[{"name":"class TwilioConfiguration(val accountSid: String, val authToken: String, val baseUrl: String = BaseUrl)","description":"com.river.connector.twilio.model.TwilioConfiguration","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/index.html","searchKeys":["TwilioConfiguration","class TwilioConfiguration(val accountSid: String, val authToken: String, val baseUrl: String = BaseUrl)","com.river.connector.twilio.model.TwilioConfiguration"]},{"name":"class TwilioMessageHttpApi(val configuration: TwilioConfiguration, val objectMapper: ObjectMapper = jacksonObjectMapper(), val httpClient: HttpClient = HttpClient.newHttpClient())","description":"com.river.connector.twilio.TwilioMessageHttpApi","location":"connector/connector-twilio/com.river.connector.twilio/-twilio-message-http-api/index.html","searchKeys":["TwilioMessageHttpApi","class TwilioMessageHttpApi(val configuration: TwilioConfiguration, val objectMapper: ObjectMapper = jacksonObjectMapper(), val httpClient: HttpClient = HttpClient.newHttpClient())","com.river.connector.twilio.TwilioMessageHttpApi"]},{"name":"const val BaseUrl: String","description":"com.river.connector.twilio.model.TwilioConfiguration.Companion.BaseUrl","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/-companion/-base-url.html","searchKeys":["BaseUrl","const val BaseUrl: String","com.river.connector.twilio.model.TwilioConfiguration.Companion.BaseUrl"]},{"name":"constructor(accountSid: String, apiVersion: String, body: String, dateCreated: String, dateSent: String, dateUpdated: String, direction: String, errorCode: Any, errorMessage: Any, from: String, messagingServiceSid: String, numMedia: String, numSegments: String, price: Any, priceUnit: Any, sid: String, status: String, subresourceUris: Message.SubresourceUris, to: String, uri: String)","description":"com.river.connector.twilio.model.Message.Message","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/-message.html","searchKeys":["Message","constructor(accountSid: String, apiVersion: String, body: String, dateCreated: String, dateSent: String, dateUpdated: String, direction: String, errorCode: Any, errorMessage: Any, from: String, messagingServiceSid: String, numMedia: String, numSegments: String, price: Any, priceUnit: Any, sid: String, status: String, subresourceUris: Message.SubresourceUris, to: String, uri: String)","com.river.connector.twilio.model.Message.Message"]},{"name":"constructor(accountSid: String, authToken: String, baseUrl: String = BaseUrl)","description":"com.river.connector.twilio.model.TwilioConfiguration.TwilioConfiguration","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/-twilio-configuration.html","searchKeys":["TwilioConfiguration","constructor(accountSid: String, authToken: String, baseUrl: String = BaseUrl)","com.river.connector.twilio.model.TwilioConfiguration.TwilioConfiguration"]},{"name":"constructor(body: String, messagingServiceSid: String, to: Destination, shortenUrls: Boolean = true)","description":"com.river.connector.twilio.model.CreateMessage.CreateMessage","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/-create-message.html","searchKeys":["CreateMessage","constructor(body: String, messagingServiceSid: String, to: Destination, shortenUrls: Boolean = true)","com.river.connector.twilio.model.CreateMessage.CreateMessage"]},{"name":"constructor(configuration: TwilioConfiguration, objectMapper: ObjectMapper = jacksonObjectMapper(), httpClient: HttpClient = HttpClient.newHttpClient())","description":"com.river.connector.twilio.TwilioMessageHttpApi.TwilioMessageHttpApi","location":"connector/connector-twilio/com.river.connector.twilio/-twilio-message-http-api/-twilio-message-http-api.html","searchKeys":["TwilioMessageHttpApi","constructor(configuration: TwilioConfiguration, objectMapper: ObjectMapper = jacksonObjectMapper(), httpClient: HttpClient = HttpClient.newHttpClient())","com.river.connector.twilio.TwilioMessageHttpApi.TwilioMessageHttpApi"]},{"name":"constructor(media: String)","description":"com.river.connector.twilio.model.Message.SubresourceUris.SubresourceUris","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/-subresource-uris/-subresource-uris.html","searchKeys":["SubresourceUris","constructor(media: String)","com.river.connector.twilio.model.Message.SubresourceUris.SubresourceUris"]},{"name":"constructor(number: String)","description":"com.river.connector.twilio.model.Destination.Sms.Sms","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/-sms/-sms.html","searchKeys":["Sms","constructor(number: String)","com.river.connector.twilio.model.Destination.Sms.Sms"]},{"name":"constructor(number: String)","description":"com.river.connector.twilio.model.Destination.Whatsapp.Whatsapp","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/-whatsapp/-whatsapp.html","searchKeys":["Whatsapp","constructor(number: String)","com.river.connector.twilio.model.Destination.Whatsapp.Whatsapp"]},{"name":"data class CreateMessage(val body: String, val messagingServiceSid: String, val to: Destination, val shortenUrls: Boolean = true)","description":"com.river.connector.twilio.model.CreateMessage","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/index.html","searchKeys":["CreateMessage","data class CreateMessage(val body: String, val messagingServiceSid: String, val to: Destination, val shortenUrls: Boolean = true)","com.river.connector.twilio.model.CreateMessage"]},{"name":"data class Message(val accountSid: String, val apiVersion: String, val body: String, val dateCreated: String, val dateSent: String, val dateUpdated: String, val direction: String, val errorCode: Any, val errorMessage: Any, val from: String, val messagingServiceSid: String, val numMedia: String, val numSegments: String, val price: Any, val priceUnit: Any, val sid: String, val status: String, val subresourceUris: Message.SubresourceUris, val to: String, val uri: String)","description":"com.river.connector.twilio.model.Message","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/index.html","searchKeys":["Message","data class Message(val accountSid: String, val apiVersion: String, val body: String, val dateCreated: String, val dateSent: String, val dateUpdated: String, val direction: String, val errorCode: Any, val errorMessage: Any, val from: String, val messagingServiceSid: String, val numMedia: String, val numSegments: String, val price: Any, val priceUnit: Any, val sid: String, val status: String, val subresourceUris: Message.SubresourceUris, val to: String, val uri: String)","com.river.connector.twilio.model.Message"]},{"name":"data class Sms(val number: String) : Destination","description":"com.river.connector.twilio.model.Destination.Sms","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/-sms/index.html","searchKeys":["Sms","data class Sms(val number: String) : Destination","com.river.connector.twilio.model.Destination.Sms"]},{"name":"data class SubresourceUris(val media: String)","description":"com.river.connector.twilio.model.Message.SubresourceUris","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/-subresource-uris/index.html","searchKeys":["SubresourceUris","data class SubresourceUris(val media: String)","com.river.connector.twilio.model.Message.SubresourceUris"]},{"name":"data class Whatsapp(val number: String) : Destination","description":"com.river.connector.twilio.model.Destination.Whatsapp","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/-whatsapp/index.html","searchKeys":["Whatsapp","data class Whatsapp(val number: String) : Destination","com.river.connector.twilio.model.Destination.Whatsapp"]},{"name":"fun CreateMessage.asHttpRequest(uri: String, authorization: String): HttpRequest","description":"com.river.connector.twilio.model.asHttpRequest","location":"connector/connector-twilio/com.river.connector.twilio.model/as-http-request.html","searchKeys":["asHttpRequest","fun CreateMessage.asHttpRequest(uri: String, authorization: String): HttpRequest","com.river.connector.twilio.model.asHttpRequest"]},{"name":"fun TwilioMessageHttpApi.sendMessageFlow(upstream: Flow<CreateMessage>, concurrency: Int = 1): Flow<Message>","description":"com.river.connector.twilio.sendMessageFlow","location":"connector/connector-twilio/com.river.connector.twilio/send-message-flow.html","searchKeys":["sendMessageFlow","fun TwilioMessageHttpApi.sendMessageFlow(upstream: Flow<CreateMessage>, concurrency: Int = 1): Flow<Message>","com.river.connector.twilio.sendMessageFlow"]},{"name":"fun asEncodedString(): String","description":"com.river.connector.twilio.model.CreateMessage.asEncodedString","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/as-encoded-string.html","searchKeys":["asEncodedString","fun asEncodedString(): String","com.river.connector.twilio.model.CreateMessage.asEncodedString"]},{"name":"object Companion","description":"com.river.connector.twilio.model.TwilioConfiguration.Companion","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.twilio.model.TwilioConfiguration.Companion"]},{"name":"sealed class Destination","description":"com.river.connector.twilio.model.Destination","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/index.html","searchKeys":["Destination","sealed class Destination","com.river.connector.twilio.model.Destination"]},{"name":"suspend fun createMessage(createMessage: CreateMessage): Message","description":"com.river.connector.twilio.TwilioMessageHttpApi.createMessage","location":"connector/connector-twilio/com.river.connector.twilio/-twilio-message-http-api/create-message.html","searchKeys":["createMessage","suspend fun createMessage(createMessage: CreateMessage): Message","com.river.connector.twilio.TwilioMessageHttpApi.createMessage"]},{"name":"val accountSid: String","description":"com.river.connector.twilio.model.Message.accountSid","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/account-sid.html","searchKeys":["accountSid","val accountSid: String","com.river.connector.twilio.model.Message.accountSid"]},{"name":"val accountSid: String","description":"com.river.connector.twilio.model.TwilioConfiguration.accountSid","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/account-sid.html","searchKeys":["accountSid","val accountSid: String","com.river.connector.twilio.model.TwilioConfiguration.accountSid"]},{"name":"val apiVersion: String","description":"com.river.connector.twilio.model.Message.apiVersion","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/api-version.html","searchKeys":["apiVersion","val apiVersion: String","com.river.connector.twilio.model.Message.apiVersion"]},{"name":"val authToken: String","description":"com.river.connector.twilio.model.TwilioConfiguration.authToken","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/auth-token.html","searchKeys":["authToken","val authToken: String","com.river.connector.twilio.model.TwilioConfiguration.authToken"]},{"name":"val authenticationHeader: String","description":"com.river.connector.twilio.model.TwilioConfiguration.authenticationHeader","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/authentication-header.html","searchKeys":["authenticationHeader","val authenticationHeader: String","com.river.connector.twilio.model.TwilioConfiguration.authenticationHeader"]},{"name":"val baseUrl: String","description":"com.river.connector.twilio.model.TwilioConfiguration.baseUrl","location":"connector/connector-twilio/com.river.connector.twilio.model/-twilio-configuration/base-url.html","searchKeys":["baseUrl","val baseUrl: String","com.river.connector.twilio.model.TwilioConfiguration.baseUrl"]},{"name":"val body: String","description":"com.river.connector.twilio.model.CreateMessage.body","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/body.html","searchKeys":["body","val body: String","com.river.connector.twilio.model.CreateMessage.body"]},{"name":"val body: String","description":"com.river.connector.twilio.model.Message.body","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/body.html","searchKeys":["body","val body: String","com.river.connector.twilio.model.Message.body"]},{"name":"val configuration: TwilioConfiguration","description":"com.river.connector.twilio.TwilioMessageHttpApi.configuration","location":"connector/connector-twilio/com.river.connector.twilio/-twilio-message-http-api/configuration.html","searchKeys":["configuration","val configuration: TwilioConfiguration","com.river.connector.twilio.TwilioMessageHttpApi.configuration"]},{"name":"val dateCreated: String","description":"com.river.connector.twilio.model.Message.dateCreated","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/date-created.html","searchKeys":["dateCreated","val dateCreated: String","com.river.connector.twilio.model.Message.dateCreated"]},{"name":"val dateSent: String","description":"com.river.connector.twilio.model.Message.dateSent","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/date-sent.html","searchKeys":["dateSent","val dateSent: String","com.river.connector.twilio.model.Message.dateSent"]},{"name":"val dateUpdated: String","description":"com.river.connector.twilio.model.Message.dateUpdated","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/date-updated.html","searchKeys":["dateUpdated","val dateUpdated: String","com.river.connector.twilio.model.Message.dateUpdated"]},{"name":"val direction: String","description":"com.river.connector.twilio.model.Message.direction","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/direction.html","searchKeys":["direction","val direction: String","com.river.connector.twilio.model.Message.direction"]},{"name":"val errorCode: Any","description":"com.river.connector.twilio.model.Message.errorCode","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/error-code.html","searchKeys":["errorCode","val errorCode: Any","com.river.connector.twilio.model.Message.errorCode"]},{"name":"val errorMessage: Any","description":"com.river.connector.twilio.model.Message.errorMessage","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/error-message.html","searchKeys":["errorMessage","val errorMessage: Any","com.river.connector.twilio.model.Message.errorMessage"]},{"name":"val from: String","description":"com.river.connector.twilio.model.Message.from","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/from.html","searchKeys":["from","val from: String","com.river.connector.twilio.model.Message.from"]},{"name":"val httpClient: HttpClient","description":"com.river.connector.twilio.TwilioMessageHttpApi.httpClient","location":"connector/connector-twilio/com.river.connector.twilio/-twilio-message-http-api/http-client.html","searchKeys":["httpClient","val httpClient: HttpClient","com.river.connector.twilio.TwilioMessageHttpApi.httpClient"]},{"name":"val media: String","description":"com.river.connector.twilio.model.Message.SubresourceUris.media","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/-subresource-uris/media.html","searchKeys":["media","val media: String","com.river.connector.twilio.model.Message.SubresourceUris.media"]},{"name":"val messagingServiceSid: String","description":"com.river.connector.twilio.model.CreateMessage.messagingServiceSid","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/messaging-service-sid.html","searchKeys":["messagingServiceSid","val messagingServiceSid: String","com.river.connector.twilio.model.CreateMessage.messagingServiceSid"]},{"name":"val messagingServiceSid: String","description":"com.river.connector.twilio.model.Message.messagingServiceSid","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/messaging-service-sid.html","searchKeys":["messagingServiceSid","val messagingServiceSid: String","com.river.connector.twilio.model.Message.messagingServiceSid"]},{"name":"val numMedia: String","description":"com.river.connector.twilio.model.Message.numMedia","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/num-media.html","searchKeys":["numMedia","val numMedia: String","com.river.connector.twilio.model.Message.numMedia"]},{"name":"val numSegments: String","description":"com.river.connector.twilio.model.Message.numSegments","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/num-segments.html","searchKeys":["numSegments","val numSegments: String","com.river.connector.twilio.model.Message.numSegments"]},{"name":"val number: String","description":"com.river.connector.twilio.model.Destination.Sms.number","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/-sms/number.html","searchKeys":["number","val number: String","com.river.connector.twilio.model.Destination.Sms.number"]},{"name":"val number: String","description":"com.river.connector.twilio.model.Destination.Whatsapp.number","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/-whatsapp/number.html","searchKeys":["number","val number: String","com.river.connector.twilio.model.Destination.Whatsapp.number"]},{"name":"val objectMapper: ObjectMapper","description":"com.river.connector.twilio.TwilioMessageHttpApi.objectMapper","location":"connector/connector-twilio/com.river.connector.twilio/-twilio-message-http-api/object-mapper.html","searchKeys":["objectMapper","val objectMapper: ObjectMapper","com.river.connector.twilio.TwilioMessageHttpApi.objectMapper"]},{"name":"val price: Any","description":"com.river.connector.twilio.model.Message.price","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/price.html","searchKeys":["price","val price: Any","com.river.connector.twilio.model.Message.price"]},{"name":"val priceUnit: Any","description":"com.river.connector.twilio.model.Message.priceUnit","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/price-unit.html","searchKeys":["priceUnit","val priceUnit: Any","com.river.connector.twilio.model.Message.priceUnit"]},{"name":"val shortenUrls: Boolean = true","description":"com.river.connector.twilio.model.CreateMessage.shortenUrls","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/shorten-urls.html","searchKeys":["shortenUrls","val shortenUrls: Boolean = true","com.river.connector.twilio.model.CreateMessage.shortenUrls"]},{"name":"val sid: String","description":"com.river.connector.twilio.model.Message.sid","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/sid.html","searchKeys":["sid","val sid: String","com.river.connector.twilio.model.Message.sid"]},{"name":"val status: String","description":"com.river.connector.twilio.model.Message.status","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/status.html","searchKeys":["status","val status: String","com.river.connector.twilio.model.Message.status"]},{"name":"val subresourceUris: Message.SubresourceUris","description":"com.river.connector.twilio.model.Message.subresourceUris","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/subresource-uris.html","searchKeys":["subresourceUris","val subresourceUris: Message.SubresourceUris","com.river.connector.twilio.model.Message.subresourceUris"]},{"name":"val to: Destination","description":"com.river.connector.twilio.model.CreateMessage.to","location":"connector/connector-twilio/com.river.connector.twilio.model/-create-message/to.html","searchKeys":["to","val to: Destination","com.river.connector.twilio.model.CreateMessage.to"]},{"name":"val to: String","description":"com.river.connector.twilio.model.Message.to","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/to.html","searchKeys":["to","val to: String","com.river.connector.twilio.model.Message.to"]},{"name":"val uri: String","description":"com.river.connector.twilio.model.Message.uri","location":"connector/connector-twilio/com.river.connector.twilio.model/-message/uri.html","searchKeys":["uri","val uri: String","com.river.connector.twilio.model.Message.uri"]},{"name":"val value: String","description":"com.river.connector.twilio.model.Destination.value","location":"connector/connector-twilio/com.river.connector.twilio.model/-destination/value.html","searchKeys":["value","val value: String","com.river.connector.twilio.model.Destination.value"]},{"name":"BREAK_LINE","description":"com.river.connector.console.Print.BREAK_LINE","location":"connector/connector-console/com.river.connector.console/-print/-b-r-e-a-k_-l-i-n-e/index.html","searchKeys":["BREAK_LINE","BREAK_LINE","com.river.connector.console.Print.BREAK_LINE"]},{"name":"DEFAULT","description":"com.river.connector.console.OutType.DEFAULT","location":"connector/connector-console/com.river.connector.console/-out-type/-d-e-f-a-u-l-t/index.html","searchKeys":["DEFAULT","DEFAULT","com.river.connector.console.OutType.DEFAULT"]},{"name":"ERROR","description":"com.river.connector.console.OutType.ERROR","location":"connector/connector-console/com.river.connector.console/-out-type/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","com.river.connector.console.OutType.ERROR"]},{"name":"NO_BREAK","description":"com.river.connector.console.Print.NO_BREAK","location":"connector/connector-console/com.river.connector.console/-print/-n-o_-b-r-e-a-k/index.html","searchKeys":["NO_BREAK","NO_BREAK","com.river.connector.console.Print.NO_BREAK"]},{"name":"enum OutType : Enum<OutType> ","description":"com.river.connector.console.OutType","location":"connector/connector-console/com.river.connector.console/-out-type/index.html","searchKeys":["OutType","enum OutType : Enum<OutType> ","com.river.connector.console.OutType"]},{"name":"enum Print : Enum<Print> ","description":"com.river.connector.console.Print","location":"connector/connector-console/com.river.connector.console/-print/index.html","searchKeys":["Print","enum Print : Enum<Print> ","com.river.connector.console.Print"]},{"name":"fun <T : Any> Flow<T>.consoleOut(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1), print: Print = Print.BREAK_LINE, mapper: suspend (T) -> Pair<Any, OutType> = { it to OutType.DEFAULT }): Flow<Pair<Any, OutType>>","description":"com.river.connector.console.consoleOut","location":"connector/connector-console/com.river.connector.console/console-out.html","searchKeys":["consoleOut","fun <T : Any> Flow<T>.consoleOut(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1), print: Print = Print.BREAK_LINE, mapper: suspend (T) -> Pair<Any, OutType> = { it to OutType.DEFAULT }): Flow<Pair<Any, OutType>>","com.river.connector.console.consoleOut"]},{"name":"fun consoleIn(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1)): Flow<String>","description":"com.river.connector.console.consoleIn","location":"connector/connector-console/com.river.connector.console/console-in.html","searchKeys":["consoleIn","fun consoleIn(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1)): Flow<String>","com.river.connector.console.consoleIn"]},{"name":"fun valueOf(value: String): OutType","description":"com.river.connector.console.OutType.valueOf","location":"connector/connector-console/com.river.connector.console/-out-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): OutType","com.river.connector.console.OutType.valueOf"]},{"name":"fun valueOf(value: String): Print","description":"com.river.connector.console.Print.valueOf","location":"connector/connector-console/com.river.connector.console/-print/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Print","com.river.connector.console.Print.valueOf"]},{"name":"fun values(): Array<OutType>","description":"com.river.connector.console.OutType.values","location":"connector/connector-console/com.river.connector.console/-out-type/values.html","searchKeys":["values","fun values(): Array<OutType>","com.river.connector.console.OutType.values"]},{"name":"fun values(): Array<Print>","description":"com.river.connector.console.Print.values","location":"connector/connector-console/com.river.connector.console/-print/values.html","searchKeys":["values","fun values(): Array<Print>","com.river.connector.console.Print.values"]},{"name":"class Credentials(var username: String? = null, var password: String? = null)","description":"com.river.connector.ftp.model.FtpConfiguration.Credentials","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-credentials/index.html","searchKeys":["Credentials","class Credentials(var username: String? = null, var password: String? = null)","com.river.connector.ftp.model.FtpConfiguration.Credentials"]},{"name":"class FtpConfiguration(host: String, port: Int, secure: FtpConfiguration.Secure? = null, var credentials: FtpConfiguration.Credentials? = null, var passiveMode: Boolean = false, var binary: Boolean = false)","description":"com.river.connector.ftp.model.FtpConfiguration","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/index.html","searchKeys":["FtpConfiguration","class FtpConfiguration(host: String, port: Int, secure: FtpConfiguration.Secure? = null, var credentials: FtpConfiguration.Credentials? = null, var passiveMode: Boolean = false, var binary: Boolean = false)","com.river.connector.ftp.model.FtpConfiguration"]},{"name":"class Secure(var protocol: String = \"TLS\", var implicit: Boolean = false)","description":"com.river.connector.ftp.model.FtpConfiguration.Secure","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-secure/index.html","searchKeys":["Secure","class Secure(var protocol: String = \"TLS\", var implicit: Boolean = false)","com.river.connector.ftp.model.FtpConfiguration.Secure"]},{"name":"constructor(host: String, port: Int, secure: FtpConfiguration.Secure? = null, credentials: FtpConfiguration.Credentials? = null, passiveMode: Boolean = false, binary: Boolean = false)","description":"com.river.connector.ftp.model.FtpConfiguration.FtpConfiguration","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-ftp-configuration.html","searchKeys":["FtpConfiguration","constructor(host: String, port: Int, secure: FtpConfiguration.Secure? = null, credentials: FtpConfiguration.Credentials? = null, passiveMode: Boolean = false, binary: Boolean = false)","com.river.connector.ftp.model.FtpConfiguration.FtpConfiguration"]},{"name":"constructor(protocol: String = \"TLS\", implicit: Boolean = false)","description":"com.river.connector.ftp.model.FtpConfiguration.Secure.Secure","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-secure/-secure.html","searchKeys":["Secure","constructor(protocol: String = \"TLS\", implicit: Boolean = false)","com.river.connector.ftp.model.FtpConfiguration.Secure.Secure"]},{"name":"constructor(username: String? = null, password: String? = null)","description":"com.river.connector.ftp.model.FtpConfiguration.Credentials.Credentials","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-credentials/-credentials.html","searchKeys":["Credentials","constructor(username: String? = null, password: String? = null)","com.river.connector.ftp.model.FtpConfiguration.Credentials.Credentials"]},{"name":"fun FTPClient.download(remotePath: String, dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ByteArray>","description":"com.river.connector.ftp.download","location":"connector/connector-ftp/com.river.connector.ftp/download.html","searchKeys":["download","fun FTPClient.download(remotePath: String, dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ByteArray>","com.river.connector.ftp.download"]},{"name":"fun FTPClient.upload(remotePath: String, content: Flow<ByteArray>, dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<Unit>","description":"com.river.connector.ftp.upload","location":"connector/connector-ftp/com.river.connector.ftp/upload.html","searchKeys":["upload","fun FTPClient.upload(remotePath: String, content: Flow<ByteArray>, dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<Unit>","com.river.connector.ftp.upload"]},{"name":"fun connect(configuration: FtpConfiguration): Flow<FTPClient>","description":"com.river.connector.ftp.connect","location":"connector/connector-ftp/com.river.connector.ftp/connect.html","searchKeys":["connect","fun connect(configuration: FtpConfiguration): Flow<FTPClient>","com.river.connector.ftp.connect"]},{"name":"fun connect(host: String, port: Int = 21, configuration: FtpConfiguration.() -> Unit = { }): Flow<FTPClient>","description":"com.river.connector.ftp.connect","location":"connector/connector-ftp/com.river.connector.ftp/connect.html","searchKeys":["connect","fun connect(host: String, port: Int = 21, configuration: FtpConfiguration.() -> Unit = { }): Flow<FTPClient>","com.river.connector.ftp.connect"]},{"name":"fun credentials(f: FtpConfiguration.Credentials.() -> Unit)","description":"com.river.connector.ftp.model.FtpConfiguration.credentials","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/credentials.html","searchKeys":["credentials","fun credentials(f: FtpConfiguration.Credentials.() -> Unit)","com.river.connector.ftp.model.FtpConfiguration.credentials"]},{"name":"fun secure(f: FtpConfiguration.Secure.() -> Unit = {})","description":"com.river.connector.ftp.model.FtpConfiguration.secure","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/secure.html","searchKeys":["secure","fun secure(f: FtpConfiguration.Secure.() -> Unit = {})","com.river.connector.ftp.model.FtpConfiguration.secure"]},{"name":"var binary: Boolean","description":"com.river.connector.ftp.model.FtpConfiguration.binary","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/binary.html","searchKeys":["binary","var binary: Boolean","com.river.connector.ftp.model.FtpConfiguration.binary"]},{"name":"var credentials: FtpConfiguration.Credentials?","description":"com.river.connector.ftp.model.FtpConfiguration.credentials","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/credentials.html","searchKeys":["credentials","var credentials: FtpConfiguration.Credentials?","com.river.connector.ftp.model.FtpConfiguration.credentials"]},{"name":"var implicit: Boolean","description":"com.river.connector.ftp.model.FtpConfiguration.Secure.implicit","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-secure/implicit.html","searchKeys":["implicit","var implicit: Boolean","com.river.connector.ftp.model.FtpConfiguration.Secure.implicit"]},{"name":"var passiveMode: Boolean","description":"com.river.connector.ftp.model.FtpConfiguration.passiveMode","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/passive-mode.html","searchKeys":["passiveMode","var passiveMode: Boolean","com.river.connector.ftp.model.FtpConfiguration.passiveMode"]},{"name":"var password: String?","description":"com.river.connector.ftp.model.FtpConfiguration.Credentials.password","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-credentials/password.html","searchKeys":["password","var password: String?","com.river.connector.ftp.model.FtpConfiguration.Credentials.password"]},{"name":"var protocol: String","description":"com.river.connector.ftp.model.FtpConfiguration.Secure.protocol","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-secure/protocol.html","searchKeys":["protocol","var protocol: String","com.river.connector.ftp.model.FtpConfiguration.Secure.protocol"]},{"name":"var username: String?","description":"com.river.connector.ftp.model.FtpConfiguration.Credentials.username","location":"connector/connector-ftp/com.river.connector.ftp.model/-ftp-configuration/-credentials/username.html","searchKeys":["username","var username: String?","com.river.connector.ftp.model.FtpConfiguration.Credentials.username"]},{"name":"fun S3AsyncClient.download(bucket: String, key: String): Flow<Pair<GetObjectResponse, Flow<ByteArray>>>","description":"com.river.connector.aws.s3.download","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/download.html","searchKeys":["download","fun S3AsyncClient.download(bucket: String, key: String): Flow<Pair<GetObjectResponse, Flow<ByteArray>>>","com.river.connector.aws.s3.download"]},{"name":"fun S3AsyncClient.mergeContents(bucket: String, key: String, concurrency: Int = 1, files: List<Pair<String, String>>): Flow<S3Response>","description":"com.river.connector.aws.s3.mergeContents","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/merge-contents.html","searchKeys":["mergeContents","fun S3AsyncClient.mergeContents(bucket: String, key: String, concurrency: Int = 1, files: List<Pair<String, String>>): Flow<S3Response>","com.river.connector.aws.s3.mergeContents"]},{"name":"fun S3AsyncClient.selectObjectContent(request: SelectObjectContentRequest.Builder.() -> Unit): Flow<SelectObjectContentEventStream>","description":"com.river.connector.aws.s3.selectObjectContent","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/select-object-content.html","searchKeys":["selectObjectContent","fun S3AsyncClient.selectObjectContent(request: SelectObjectContentRequest.Builder.() -> Unit): Flow<SelectObjectContentEventStream>","com.river.connector.aws.s3.selectObjectContent"]},{"name":"fun S3AsyncClient.upload(bucket: String, key: String, upstream: Flow<ByteArray>, concurrency: Int = 1): Flow<S3Response>","description":"com.river.connector.aws.s3.upload","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/upload.html","searchKeys":["upload","fun S3AsyncClient.upload(bucket: String, key: String, upstream: Flow<ByteArray>, concurrency: Int = 1): Flow<S3Response>","com.river.connector.aws.s3.upload"]},{"name":"fun S3AsyncClient.upload(upstream: Flow<ByteArray>, concurrency: Int = 1, initialRequest: CreateMultipartUploadRequest.Builder.() -> Unit): Flow<S3Response>","description":"com.river.connector.aws.s3.upload","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/upload.html","searchKeys":["upload","fun S3AsyncClient.upload(upstream: Flow<ByteArray>, concurrency: Int = 1, initialRequest: CreateMultipartUploadRequest.Builder.() -> Unit): Flow<S3Response>","com.river.connector.aws.s3.upload"]},{"name":"fun S3AsyncClient.uploadBytes(bucket: String, key: String, upstream: Flow<Byte>, concurrency: Int = 1): Flow<S3Response>","description":"com.river.connector.aws.s3.uploadBytes","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/upload-bytes.html","searchKeys":["uploadBytes","fun S3AsyncClient.uploadBytes(bucket: String, key: String, upstream: Flow<Byte>, concurrency: Int = 1): Flow<S3Response>","com.river.connector.aws.s3.uploadBytes"]},{"name":"fun S3AsyncClient.uploadBytes(upstream: Flow<Byte>, concurrency: Int = 1, initialRequest: CreateMultipartUploadRequest.Builder.() -> Unit): Flow<S3Response>","description":"com.river.connector.aws.s3.uploadBytes","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/upload-bytes.html","searchKeys":["uploadBytes","fun S3AsyncClient.uploadBytes(upstream: Flow<Byte>, concurrency: Int = 1, initialRequest: CreateMultipartUploadRequest.Builder.() -> Unit): Flow<S3Response>","com.river.connector.aws.s3.uploadBytes"]},{"name":"fun S3AsyncClient.uploadSplit(bucket: String, upstream: Flow<Byte>, splitEach: Int = ONE_MB, concurrency: Int = 1, key: (Int) -> String): Flow<S3Response>","description":"com.river.connector.aws.s3.uploadSplit","location":"connector/connector-aws/connector-aws-s3/com.river.connector.aws.s3/upload-split.html","searchKeys":["uploadSplit","fun S3AsyncClient.uploadSplit(bucket: String, upstream: Flow<Byte>, splitEach: Int = ONE_MB, concurrency: Int = 1, key: (Int) -> String): Flow<S3Response>","com.river.connector.aws.s3.uploadSplit"]},{"name":"class ContentfulZipEntry(entry: ZipEntry, val data: ByteArray) : ZipEntry","description":"com.river.connector.file.ContentfulZipEntry","location":"connector/connector-file/com.river.connector.file/-contentful-zip-entry/index.html","searchKeys":["ContentfulZipEntry","class ContentfulZipEntry(entry: ZipEntry, val data: ByteArray) : ZipEntry","com.river.connector.file.ContentfulZipEntry"]},{"name":"constructor(entry: ZipEntry, data: ByteArray)","description":"com.river.connector.file.ContentfulZipEntry.ContentfulZipEntry","location":"connector/connector-file/com.river.connector.file/-contentful-zip-entry/-contentful-zip-entry.html","searchKeys":["ContentfulZipEntry","constructor(entry: ZipEntry, data: ByteArray)","com.river.connector.file.ContentfulZipEntry.ContentfulZipEntry"]},{"name":"fun Flow<ByteArray>.unzipFile(dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ContentfulZipEntry>","description":"com.river.connector.file.unzipFile","location":"connector/connector-file/com.river.connector.file/unzip-file.html","searchKeys":["unzipFile","fun Flow<ByteArray>.unzipFile(dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ContentfulZipEntry>","com.river.connector.file.unzipFile"]},{"name":"fun Flow<ByteArray>.zipFile(entryName: String, dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ByteArray>","description":"com.river.connector.file.zipFile","location":"connector/connector-file/com.river.connector.file/zip-file.html","searchKeys":["zipFile","fun Flow<ByteArray>.zipFile(entryName: String, dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ByteArray>","com.river.connector.file.zipFile"]},{"name":"fun InputStream.asFlow(dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ByteArray>","description":"com.river.connector.file.asFlow","location":"connector/connector-file/com.river.connector.file/as-flow.html","searchKeys":["asFlow","fun InputStream.asFlow(dispatcher: CoroutineDispatcher = Dispatchers.IO): Flow<ByteArray>","com.river.connector.file.asFlow"]},{"name":"fun Path.asFlow(dispatcher: CoroutineDispatcher = Dispatchers.IO, vararg options: OpenOption): Flow<ByteArray>","description":"com.river.connector.file.asFlow","location":"connector/connector-file/com.river.connector.file/as-flow.html","searchKeys":["asFlow","fun Path.asFlow(dispatcher: CoroutineDispatcher = Dispatchers.IO, vararg options: OpenOption): Flow<ByteArray>","com.river.connector.file.asFlow"]},{"name":"suspend fun Flow<ByteArray>.asInputStream(bufferSize: Int = 1024, dispatcher: CoroutineDispatcher = Dispatchers.IO): InputStream","description":"com.river.connector.file.asInputStream","location":"connector/connector-file/com.river.connector.file/as-input-stream.html","searchKeys":["asInputStream","suspend fun Flow<ByteArray>.asInputStream(bufferSize: Int = 1024, dispatcher: CoroutineDispatcher = Dispatchers.IO): InputStream","com.river.connector.file.asInputStream"]},{"name":"suspend fun Flow<ByteArray>.writeTo(dispatcher: CoroutineDispatcher = Dispatchers.IO, outputStream: () -> OutputStream)","description":"com.river.connector.file.writeTo","location":"connector/connector-file/com.river.connector.file/write-to.html","searchKeys":["writeTo","suspend fun Flow<ByteArray>.writeTo(dispatcher: CoroutineDispatcher = Dispatchers.IO, outputStream: () -> OutputStream)","com.river.connector.file.writeTo"]},{"name":"suspend fun Flow<ByteArray>.writeTo(path: Path, dispatcher: CoroutineDispatcher = Dispatchers.IO, vararg options: OpenOption = arrayOf(\n        StandardOpenOption.WRITE,\n        StandardOpenOption.CREATE,\n        StandardOpenOption.APPEND\n    ))","description":"com.river.connector.file.writeTo","location":"connector/connector-file/com.river.connector.file/write-to.html","searchKeys":["writeTo","suspend fun Flow<ByteArray>.writeTo(path: Path, dispatcher: CoroutineDispatcher = Dispatchers.IO, vararg options: OpenOption = arrayOf(\n        StandardOpenOption.WRITE,\n        StandardOpenOption.CREATE,\n        StandardOpenOption.APPEND\n    ))","com.river.connector.file.writeTo"]},{"name":"val data: ByteArray","description":"com.river.connector.file.ContentfulZipEntry.data","location":"connector/connector-file/com.river.connector.file/-contentful-zip-entry/data.html","searchKeys":["data","val data: ByteArray","com.river.connector.file.ContentfulZipEntry.data"]},{"name":"class Java11HttpClient(httpClient: HttpClient, scope: CoroutineScope, attributes: AttributeMap) : SdkAsyncHttpClient","description":"com.river.connector.aws.Java11HttpClient","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/index.html","searchKeys":["Java11HttpClient","class Java11HttpClient(httpClient: HttpClient, scope: CoroutineScope, attributes: AttributeMap) : SdkAsyncHttpClient","com.river.connector.aws.Java11HttpClient"]},{"name":"class Java11HttpClientBuilder(httpClient: HttpClient? = null, scope: CoroutineScope? = null) : SdkAsyncHttpClient.Builder<Java11HttpClientBuilder> ","description":"com.river.connector.aws.Java11HttpClientBuilder","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-builder/index.html","searchKeys":["Java11HttpClientBuilder","class Java11HttpClientBuilder(httpClient: HttpClient? = null, scope: CoroutineScope? = null) : SdkAsyncHttpClient.Builder<Java11HttpClientBuilder> ","com.river.connector.aws.Java11HttpClientBuilder"]},{"name":"class Java11HttpClientService : SdkAsyncHttpService","description":"com.river.connector.aws.Java11HttpClientService","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-service/index.html","searchKeys":["Java11HttpClientService","class Java11HttpClientService : SdkAsyncHttpService","com.river.connector.aws.Java11HttpClientService"]},{"name":"constructor()","description":"com.river.connector.aws.Java11HttpClientService.Java11HttpClientService","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-service/-java11-http-client-service.html","searchKeys":["Java11HttpClientService","constructor()","com.river.connector.aws.Java11HttpClientService.Java11HttpClientService"]},{"name":"constructor(httpClient: HttpClient, scope: CoroutineScope, attributes: AttributeMap)","description":"com.river.connector.aws.Java11HttpClient.Java11HttpClient","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/-java11-http-client.html","searchKeys":["Java11HttpClient","constructor(httpClient: HttpClient, scope: CoroutineScope, attributes: AttributeMap)","com.river.connector.aws.Java11HttpClient.Java11HttpClient"]},{"name":"constructor(httpClient: HttpClient? = null, scope: CoroutineScope? = null)","description":"com.river.connector.aws.Java11HttpClientBuilder.Java11HttpClientBuilder","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-builder/-java11-http-client-builder.html","searchKeys":["Java11HttpClientBuilder","constructor(httpClient: HttpClient? = null, scope: CoroutineScope? = null)","com.river.connector.aws.Java11HttpClientBuilder.Java11HttpClientBuilder"]},{"name":"fun buildDefault(): SdkAsyncHttpClient","description":"com.river.connector.aws.Java11HttpClient.Companion.buildDefault","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/-companion/build-default.html","searchKeys":["buildDefault","fun buildDefault(): SdkAsyncHttpClient","com.river.connector.aws.Java11HttpClient.Companion.buildDefault"]},{"name":"fun builder(): Java11HttpClientBuilder","description":"com.river.connector.aws.Java11HttpClient.Companion.builder","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/-companion/builder.html","searchKeys":["builder","fun builder(): Java11HttpClientBuilder","com.river.connector.aws.Java11HttpClient.Companion.builder"]},{"name":"fun withCoroutineScope(scope: CoroutineScope): Java11HttpClientBuilder","description":"com.river.connector.aws.Java11HttpClientBuilder.withCoroutineScope","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-builder/with-coroutine-scope.html","searchKeys":["withCoroutineScope","fun withCoroutineScope(scope: CoroutineScope): Java11HttpClientBuilder","com.river.connector.aws.Java11HttpClientBuilder.withCoroutineScope"]},{"name":"fun withHttpClient(httpClient: HttpClient): Java11HttpClientBuilder","description":"com.river.connector.aws.Java11HttpClientBuilder.withHttpClient","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-builder/with-http-client.html","searchKeys":["withHttpClient","fun withHttpClient(httpClient: HttpClient): Java11HttpClientBuilder","com.river.connector.aws.Java11HttpClientBuilder.withHttpClient"]},{"name":"object Companion","description":"com.river.connector.aws.Java11HttpClient.Companion","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.aws.Java11HttpClient.Companion"]},{"name":"open override fun buildWithDefaults(serviceDefaults: AttributeMap): SdkAsyncHttpClient","description":"com.river.connector.aws.Java11HttpClientBuilder.buildWithDefaults","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-builder/build-with-defaults.html","searchKeys":["buildWithDefaults","open override fun buildWithDefaults(serviceDefaults: AttributeMap): SdkAsyncHttpClient","com.river.connector.aws.Java11HttpClientBuilder.buildWithDefaults"]},{"name":"open override fun close()","description":"com.river.connector.aws.Java11HttpClient.close","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/close.html","searchKeys":["close","open override fun close()","com.river.connector.aws.Java11HttpClient.close"]},{"name":"open override fun createAsyncHttpClientFactory(): SdkAsyncHttpClient.Builder<*>","description":"com.river.connector.aws.Java11HttpClientService.createAsyncHttpClientFactory","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client-service/create-async-http-client-factory.html","searchKeys":["createAsyncHttpClientFactory","open override fun createAsyncHttpClientFactory(): SdkAsyncHttpClient.Builder<*>","com.river.connector.aws.Java11HttpClientService.createAsyncHttpClientFactory"]},{"name":"open override fun execute(request: AsyncExecuteRequest): CompletableFuture<Void?>","description":"com.river.connector.aws.Java11HttpClient.execute","location":"connector/connector-aws/connector-aws-java-11-http-spi/com.river.connector.aws/-java11-http-client/execute.html","searchKeys":["execute","open override fun execute(request: AsyncExecuteRequest): CompletableFuture<Void?>","com.river.connector.aws.Java11HttpClient.execute"]},{"name":"class Jdbc(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","description":"com.river.connector.rdbms.jdbc.Jdbc","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/-jdbc/index.html","searchKeys":["Jdbc","class Jdbc(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","com.river.connector.rdbms.jdbc.Jdbc"]},{"name":"constructor(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","description":"com.river.connector.rdbms.jdbc.Jdbc.Jdbc","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/-jdbc/-jdbc.html","searchKeys":["Jdbc","constructor(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","com.river.connector.rdbms.jdbc.Jdbc.Jdbc"]},{"name":"fun <T> Jdbc.batchUpdate(sql: String, upstream: Flow<T>, concurrency: Int = 1, groupStrategy: GroupStrategy = TimeWindow(100, 250.milliseconds), prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","description":"com.river.connector.rdbms.jdbc.batchUpdate","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/batch-update.html","searchKeys":["batchUpdate","fun <T> Jdbc.batchUpdate(sql: String, upstream: Flow<T>, concurrency: Int = 1, groupStrategy: GroupStrategy = TimeWindow(100, 250.milliseconds), prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","com.river.connector.rdbms.jdbc.batchUpdate"]},{"name":"fun <T> Jdbc.singleUpdate(sql: String, upstream: Flow<T>, concurrency: Int = 1, prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","description":"com.river.connector.rdbms.jdbc.singleUpdate","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/single-update.html","searchKeys":["singleUpdate","fun <T> Jdbc.singleUpdate(sql: String, upstream: Flow<T>, concurrency: Int = 1, prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","com.river.connector.rdbms.jdbc.singleUpdate"]},{"name":"fun Jdbc.query(sql: String, fetchSize: Int = 100, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Row>","description":"com.river.connector.rdbms.jdbc.query","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/query.html","searchKeys":["query","fun Jdbc.query(sql: String, fetchSize: Int = 100, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Row>","com.river.connector.rdbms.jdbc.query"]},{"name":"fun Jdbc.singleUpdate(sql: String, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Int>","description":"com.river.connector.rdbms.jdbc.singleUpdate","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/single-update.html","searchKeys":["singleUpdate","fun Jdbc.singleUpdate(sql: String, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Int>","com.river.connector.rdbms.jdbc.singleUpdate"]},{"name":"inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100): Flow<T>","description":"com.river.connector.rdbms.jdbc.typedQuery","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/typed-query.html","searchKeys":["typedQuery","inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100): Flow<T>","com.river.connector.rdbms.jdbc.typedQuery"]},{"name":"inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100, crossinline prepare: suspend PreparedStatement.() -> Unit): Flow<T>","description":"com.river.connector.rdbms.jdbc.typedQuery","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/typed-query.html","searchKeys":["typedQuery","inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100, crossinline prepare: suspend PreparedStatement.() -> Unit): Flow<T>","com.river.connector.rdbms.jdbc.typedQuery"]},{"name":"object Companion","description":"com.river.connector.rdbms.jdbc.Jdbc.Companion","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/-jdbc/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.rdbms.jdbc.Jdbc.Companion"]},{"name":"operator fun invoke(url: String, connectionPoolSize: Int = 10, credentials: Pair<String, String>? = null): Jdbc","description":"com.river.connector.rdbms.jdbc.Jdbc.Companion.invoke","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/-jdbc/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(url: String, connectionPoolSize: Int = 10, credentials: Pair<String, String>? = null): Jdbc","com.river.connector.rdbms.jdbc.Jdbc.Companion.invoke"]},{"name":"suspend fun close()","description":"com.river.connector.rdbms.jdbc.Jdbc.close","location":"connector/connector-rdbms/connector-rdbms-jdbc/com.river.connector.rdbms.jdbc/-jdbc/close.html","searchKeys":["close","suspend fun close()","com.river.connector.rdbms.jdbc.Jdbc.close"]},{"name":"fun LambdaAsyncClient.invokeFlow(functionName: String, upstream: Flow<String>, invocationType: InvocationType = InvocationType.REQUEST_RESPONSE, logType: LogType? = null, qualifier: String? = null, clientContext: String? = null, concurrency: Int = 1): Flow<InvokeResponse>","description":"com.river.connector.aws.lambda.invokeFlow","location":"connector/connector-aws/connector-aws-lambda/com.river.connector.aws.lambda/invoke-flow.html","searchKeys":["invokeFlow","fun LambdaAsyncClient.invokeFlow(functionName: String, upstream: Flow<String>, invocationType: InvocationType = InvocationType.REQUEST_RESPONSE, logType: LogType? = null, qualifier: String? = null, clientContext: String? = null, concurrency: Int = 1): Flow<InvokeResponse>","com.river.connector.aws.lambda.invokeFlow"]},{"name":"fun <T> Flow<T>.asJsonNode(objectMapper: ObjectMapper = defaultObjectMapper): Flow<JsonNode>","description":"com.river.connector.format.json.asJsonNode","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/as-json-node.html","searchKeys":["asJsonNode","fun <T> Flow<T>.asJsonNode(objectMapper: ObjectMapper = defaultObjectMapper): Flow<JsonNode>","com.river.connector.format.json.asJsonNode"]},{"name":"fun <T> Flow<T>.asJsonString(pretty: Boolean = false, objectMapper: ObjectMapper = defaultObjectMapper): Flow<String>","description":"com.river.connector.format.json.asJsonString","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/as-json-string.html","searchKeys":["asJsonString","fun <T> Flow<T>.asJsonString(pretty: Boolean = false, objectMapper: ObjectMapper = defaultObjectMapper): Flow<String>","com.river.connector.format.json.asJsonString"]},{"name":"inline fun <T : Any> Flow<ByteArray>.parseJsonArray(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","description":"com.river.connector.format.json.parseJsonArray","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/parse-json-array.html","searchKeys":["parseJsonArray","inline fun <T : Any> Flow<ByteArray>.parseJsonArray(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","com.river.connector.format.json.parseJsonArray"]},{"name":"inline fun <T> Flow<ByteArray>.parseJsonLines(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","description":"com.river.connector.format.json.parseJsonLines","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/parse-json-lines.html","searchKeys":["parseJsonLines","inline fun <T> Flow<ByteArray>.parseJsonLines(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","com.river.connector.format.json.parseJsonLines"]},{"name":"inline fun <T> Flow<JsonNode>.asValue(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","description":"com.river.connector.format.json.asValue","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/as-value.html","searchKeys":["asValue","inline fun <T> Flow<JsonNode>.asValue(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","com.river.connector.format.json.asValue"]},{"name":"inline fun <T> Flow<String>.asParsedJson(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","description":"com.river.connector.format.json.asParsedJson","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/as-parsed-json.html","searchKeys":["asParsedJson","inline fun <T> Flow<String>.asParsedJson(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","com.river.connector.format.json.asParsedJson"]},{"name":"val defaultObjectMapper: ObjectMapper","description":"com.river.connector.format.json.defaultObjectMapper","location":"connector/connector-format/connector-format-json/com.river.connector.format.json/default-object-mapper.html","searchKeys":["defaultObjectMapper","val defaultObjectMapper: ObjectMapper","com.river.connector.format.json.defaultObjectMapper"]},{"name":"constructor(text: String, visibilityTimeout: Duration? = null, ttl: Duration? = null)","description":"com.river.connector.azure.queue.storage.model.SendMessageRequest.SendMessageRequest","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage.model/-send-message-request/-send-message-request.html","searchKeys":["SendMessageRequest","constructor(text: String, visibilityTimeout: Duration? = null, ttl: Duration? = null)","com.river.connector.azure.queue.storage.model.SendMessageRequest.SendMessageRequest"]},{"name":"data class SendMessageRequest(val text: String, val visibilityTimeout: Duration? = null, val ttl: Duration? = null)","description":"com.river.connector.azure.queue.storage.model.SendMessageRequest","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage.model/-send-message-request/index.html","searchKeys":["SendMessageRequest","data class SendMessageRequest(val text: String, val visibilityTimeout: Duration? = null, val ttl: Duration? = null)","com.river.connector.azure.queue.storage.model.SendMessageRequest"]},{"name":"fun QueueAsyncClient.deleteMessagesFlow(upstream: Flow<QueueMessageItem>, concurrency: Int = 100): Flow<Unit>","description":"com.river.connector.azure.queue.storage.deleteMessagesFlow","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage/delete-messages-flow.html","searchKeys":["deleteMessagesFlow","fun QueueAsyncClient.deleteMessagesFlow(upstream: Flow<QueueMessageItem>, concurrency: Int = 100): Flow<Unit>","com.river.connector.azure.queue.storage.deleteMessagesFlow"]},{"name":"fun QueueAsyncClient.receiveMessagesAsFlow(concurrency: ConcurrencyStrategy = ConcurrencyStrategy.disabled, pollSize: Int = 32, visibilityTimeout: Duration = 30.seconds, stopOnEmptyList: Boolean = false): Flow<QueueMessageItem>","description":"com.river.connector.azure.queue.storage.receiveMessagesAsFlow","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage/receive-messages-as-flow.html","searchKeys":["receiveMessagesAsFlow","fun QueueAsyncClient.receiveMessagesAsFlow(concurrency: ConcurrencyStrategy = ConcurrencyStrategy.disabled, pollSize: Int = 32, visibilityTimeout: Duration = 30.seconds, stopOnEmptyList: Boolean = false): Flow<QueueMessageItem>","com.river.connector.azure.queue.storage.receiveMessagesAsFlow"]},{"name":"fun QueueAsyncClient.sendMessagesFlow(upstream: Flow<SendMessageRequest>, concurrency: Int = 100): Flow<SendMessageResult>","description":"com.river.connector.azure.queue.storage.sendMessagesFlow","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage/send-messages-flow.html","searchKeys":["sendMessagesFlow","fun QueueAsyncClient.sendMessagesFlow(upstream: Flow<SendMessageRequest>, concurrency: Int = 100): Flow<SendMessageResult>","com.river.connector.azure.queue.storage.sendMessagesFlow"]},{"name":"val text: String","description":"com.river.connector.azure.queue.storage.model.SendMessageRequest.text","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage.model/-send-message-request/text.html","searchKeys":["text","val text: String","com.river.connector.azure.queue.storage.model.SendMessageRequest.text"]},{"name":"val ttl: Duration? = null","description":"com.river.connector.azure.queue.storage.model.SendMessageRequest.ttl","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage.model/-send-message-request/ttl.html","searchKeys":["ttl","val ttl: Duration? = null","com.river.connector.azure.queue.storage.model.SendMessageRequest.ttl"]},{"name":"val visibilityTimeout: Duration? = null","description":"com.river.connector.azure.queue.storage.model.SendMessageRequest.visibilityTimeout","location":"connector/connector-azure/connector-azure-queue-storage/com.river.connector.azure.queue.storage.model/-send-message-request/visibility-timeout.html","searchKeys":["visibilityTimeout","val visibilityTimeout: Duration? = null","com.river.connector.azure.queue.storage.model.SendMessageRequest.visibilityTimeout"]},{"name":"constructor(numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","description":"com.river.connector.red.hat.debezium.model.CommittableOffset.CommittableOffset","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-offset/-committable-offset.html","searchKeys":["CommittableOffset","constructor(numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","com.river.connector.red.hat.debezium.model.CommittableOffset.CommittableOffset"]},{"name":"constructor(record: R, committer: CommittableOffset<R>)","description":"com.river.connector.red.hat.debezium.model.CommittableRecord.CommittableRecord","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-record/-committable-record.html","searchKeys":["CommittableRecord","constructor(record: R, committer: CommittableOffset<R>)","com.river.connector.red.hat.debezium.model.CommittableRecord.CommittableRecord"]},{"name":"data class CommittableOffset<R>(val numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","description":"com.river.connector.red.hat.debezium.model.CommittableOffset","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-offset/index.html","searchKeys":["CommittableOffset","data class CommittableOffset<R>(val numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","com.river.connector.red.hat.debezium.model.CommittableOffset"]},{"name":"data class CommittableRecord<R>(val record: R, committer: CommittableOffset<R>)","description":"com.river.connector.red.hat.debezium.model.CommittableRecord","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-record/index.html","searchKeys":["CommittableRecord","data class CommittableRecord<R>(val record: R, committer: CommittableOffset<R>)","com.river.connector.red.hat.debezium.model.CommittableRecord"]},{"name":"fun <R> debeziumFlow(bufferCapacity: Int = Channel.BUFFERED, maxRecordsInFlight: Int = 2048, executor: ExecutorService = Executors.newSingleThreadExecutor(), engineBuilder: () -> DebeziumEngine.Builder<R>): Flow<CommittableRecord<R>>","description":"com.river.connector.red.hat.debezium.debeziumFlow","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium/debezium-flow.html","searchKeys":["debeziumFlow","fun <R> debeziumFlow(bufferCapacity: Int = Channel.BUFFERED, maxRecordsInFlight: Int = 2048, executor: ExecutorService = Executors.newSingleThreadExecutor(), engineBuilder: () -> DebeziumEngine.Builder<R>): Flow<CommittableRecord<R>>","com.river.connector.red.hat.debezium.debeziumFlow"]},{"name":"suspend fun markProcessed()","description":"com.river.connector.red.hat.debezium.model.CommittableRecord.markProcessed","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-record/mark-processed.html","searchKeys":["markProcessed","suspend fun markProcessed()","com.river.connector.red.hat.debezium.model.CommittableRecord.markProcessed"]},{"name":"suspend fun markProcessed(record: R)","description":"com.river.connector.red.hat.debezium.model.CommittableOffset.markProcessed","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-offset/mark-processed.html","searchKeys":["markProcessed","suspend fun markProcessed(record: R)","com.river.connector.red.hat.debezium.model.CommittableOffset.markProcessed"]},{"name":"val numberOfRecords: Int","description":"com.river.connector.red.hat.debezium.model.CommittableOffset.numberOfRecords","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-offset/number-of-records.html","searchKeys":["numberOfRecords","val numberOfRecords: Int","com.river.connector.red.hat.debezium.model.CommittableOffset.numberOfRecords"]},{"name":"val record: R","description":"com.river.connector.red.hat.debezium.model.CommittableRecord.record","location":"connector/connector-red-hat/connector-red-hat-debezium/com.river.connector.red.hat.debezium.model/-committable-record/record.html","searchKeys":["record","val record: R","com.river.connector.red.hat.debezium.model.CommittableRecord.record"]},{"name":"abstract val id: String","description":"com.river.connector.aws.sns.model.PublishMessageResponse.id","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/id.html","searchKeys":["id","abstract val id: String","com.river.connector.aws.sns.model.PublishMessageResponse.id"]},{"name":"abstract val internalBatchResponse: PublishBatchResponse","description":"com.river.connector.aws.sns.model.PublishMessageResponse.internalBatchResponse","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/internal-batch-response.html","searchKeys":["internalBatchResponse","abstract val internalBatchResponse: PublishBatchResponse","com.river.connector.aws.sns.model.PublishMessageResponse.internalBatchResponse"]},{"name":"constructor(id: String, code: String, message: String, senderFault: Boolean, internalBatchResponse: PublishBatchResponse)","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure.Failure","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/-failure.html","searchKeys":["Failure","constructor(id: String, code: String, message: String, senderFault: Boolean, internalBatchResponse: PublishBatchResponse)","com.river.connector.aws.sns.model.PublishMessageResponse.Failure.Failure"]},{"name":"constructor(id: String, messageId: String, sequenceNumber: String?, internalBatchResponse: PublishBatchResponse)","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Successful.Successful","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-successful/-successful.html","searchKeys":["Successful","constructor(id: String, messageId: String, sequenceNumber: String?, internalBatchResponse: PublishBatchResponse)","com.river.connector.aws.sns.model.PublishMessageResponse.Successful.Successful"]},{"name":"constructor(message: String, subject: String? = null, messageStructure: String? = null, messageDeduplicationId: String? = null, messageGroupId: String? = null, messageAttributes: Map<String, MessageAttributeValue> = emptyMap())","description":"com.river.connector.aws.sns.model.PublishMessageRequest.PublishMessageRequest","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/-publish-message-request.html","searchKeys":["PublishMessageRequest","constructor(message: String, subject: String? = null, messageStructure: String? = null, messageDeduplicationId: String? = null, messageGroupId: String? = null, messageAttributes: Map<String, MessageAttributeValue> = emptyMap())","com.river.connector.aws.sns.model.PublishMessageRequest.PublishMessageRequest"]},{"name":"data class Failure(val id: String, val code: String, val message: String, val senderFault: Boolean, val internalBatchResponse: PublishBatchResponse) : PublishMessageResponse","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/index.html","searchKeys":["Failure","data class Failure(val id: String, val code: String, val message: String, val senderFault: Boolean, val internalBatchResponse: PublishBatchResponse) : PublishMessageResponse","com.river.connector.aws.sns.model.PublishMessageResponse.Failure"]},{"name":"data class PublishMessageRequest(val message: String, val subject: String? = null, val messageStructure: String? = null, val messageDeduplicationId: String? = null, val messageGroupId: String? = null, val messageAttributes: Map<String, MessageAttributeValue> = emptyMap())","description":"com.river.connector.aws.sns.model.PublishMessageRequest","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/index.html","searchKeys":["PublishMessageRequest","data class PublishMessageRequest(val message: String, val subject: String? = null, val messageStructure: String? = null, val messageDeduplicationId: String? = null, val messageGroupId: String? = null, val messageAttributes: Map<String, MessageAttributeValue> = emptyMap())","com.river.connector.aws.sns.model.PublishMessageRequest"]},{"name":"data class Successful(val id: String, val messageId: String, val sequenceNumber: String?, val internalBatchResponse: PublishBatchResponse) : PublishMessageResponse","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Successful","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-successful/index.html","searchKeys":["Successful","data class Successful(val id: String, val messageId: String, val sequenceNumber: String?, val internalBatchResponse: PublishBatchResponse) : PublishMessageResponse","com.river.connector.aws.sns.model.PublishMessageResponse.Successful"]},{"name":"fun SnsAsyncClient.publishFlow(upstream: Flow<PublishMessageRequest>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), topicArn: suspend () -> String): Flow<PublishMessageResponse>","description":"com.river.connector.aws.sns.publishFlow","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns/publish-flow.html","searchKeys":["publishFlow","fun SnsAsyncClient.publishFlow(upstream: Flow<PublishMessageRequest>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), topicArn: suspend () -> String): Flow<PublishMessageResponse>","com.river.connector.aws.sns.publishFlow"]},{"name":"interface PublishMessageResponse","description":"com.river.connector.aws.sns.model.PublishMessageResponse","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/index.html","searchKeys":["PublishMessageResponse","interface PublishMessageResponse","com.river.connector.aws.sns.model.PublishMessageResponse"]},{"name":"open override val id: String","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure.id","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/id.html","searchKeys":["id","open override val id: String","com.river.connector.aws.sns.model.PublishMessageResponse.Failure.id"]},{"name":"open override val id: String","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Successful.id","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-successful/id.html","searchKeys":["id","open override val id: String","com.river.connector.aws.sns.model.PublishMessageResponse.Successful.id"]},{"name":"open override val internalBatchResponse: PublishBatchResponse","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure.internalBatchResponse","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/internal-batch-response.html","searchKeys":["internalBatchResponse","open override val internalBatchResponse: PublishBatchResponse","com.river.connector.aws.sns.model.PublishMessageResponse.Failure.internalBatchResponse"]},{"name":"open override val internalBatchResponse: PublishBatchResponse","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Successful.internalBatchResponse","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-successful/internal-batch-response.html","searchKeys":["internalBatchResponse","open override val internalBatchResponse: PublishBatchResponse","com.river.connector.aws.sns.model.PublishMessageResponse.Successful.internalBatchResponse"]},{"name":"val code: String","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure.code","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/code.html","searchKeys":["code","val code: String","com.river.connector.aws.sns.model.PublishMessageResponse.Failure.code"]},{"name":"val message: String","description":"com.river.connector.aws.sns.model.PublishMessageRequest.message","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/message.html","searchKeys":["message","val message: String","com.river.connector.aws.sns.model.PublishMessageRequest.message"]},{"name":"val message: String","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure.message","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/message.html","searchKeys":["message","val message: String","com.river.connector.aws.sns.model.PublishMessageResponse.Failure.message"]},{"name":"val messageAttributes: Map<String, MessageAttributeValue>","description":"com.river.connector.aws.sns.model.PublishMessageRequest.messageAttributes","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/message-attributes.html","searchKeys":["messageAttributes","val messageAttributes: Map<String, MessageAttributeValue>","com.river.connector.aws.sns.model.PublishMessageRequest.messageAttributes"]},{"name":"val messageDeduplicationId: String? = null","description":"com.river.connector.aws.sns.model.PublishMessageRequest.messageDeduplicationId","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/message-deduplication-id.html","searchKeys":["messageDeduplicationId","val messageDeduplicationId: String? = null","com.river.connector.aws.sns.model.PublishMessageRequest.messageDeduplicationId"]},{"name":"val messageGroupId: String? = null","description":"com.river.connector.aws.sns.model.PublishMessageRequest.messageGroupId","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/message-group-id.html","searchKeys":["messageGroupId","val messageGroupId: String? = null","com.river.connector.aws.sns.model.PublishMessageRequest.messageGroupId"]},{"name":"val messageId: String","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Successful.messageId","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-successful/message-id.html","searchKeys":["messageId","val messageId: String","com.river.connector.aws.sns.model.PublishMessageResponse.Successful.messageId"]},{"name":"val messageStructure: String? = null","description":"com.river.connector.aws.sns.model.PublishMessageRequest.messageStructure","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/message-structure.html","searchKeys":["messageStructure","val messageStructure: String? = null","com.river.connector.aws.sns.model.PublishMessageRequest.messageStructure"]},{"name":"val senderFault: Boolean","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Failure.senderFault","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-failure/sender-fault.html","searchKeys":["senderFault","val senderFault: Boolean","com.river.connector.aws.sns.model.PublishMessageResponse.Failure.senderFault"]},{"name":"val sequenceNumber: String?","description":"com.river.connector.aws.sns.model.PublishMessageResponse.Successful.sequenceNumber","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-response/-successful/sequence-number.html","searchKeys":["sequenceNumber","val sequenceNumber: String?","com.river.connector.aws.sns.model.PublishMessageResponse.Successful.sequenceNumber"]},{"name":"val subject: String? = null","description":"com.river.connector.aws.sns.model.PublishMessageRequest.subject","location":"connector/connector-aws/connector-aws-sns/com.river.connector.aws.sns.model/-publish-message-request/subject.html","searchKeys":["subject","val subject: String? = null","com.river.connector.aws.sns.model.PublishMessageRequest.subject"]},{"name":"AUTO_ACKNOWLEDGE","description":"com.river.connector.jms.model.SessionMode.AUTO_ACKNOWLEDGE","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/-a-u-t-o_-a-c-k-n-o-w-l-e-d-g-e/index.html","searchKeys":["AUTO_ACKNOWLEDGE","AUTO_ACKNOWLEDGE","com.river.connector.jms.model.SessionMode.AUTO_ACKNOWLEDGE"]},{"name":"CLIENT_ACKNOWLEDGE","description":"com.river.connector.jms.model.SessionMode.CLIENT_ACKNOWLEDGE","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/-c-l-i-e-n-t_-a-c-k-n-o-w-l-e-d-g-e/index.html","searchKeys":["CLIENT_ACKNOWLEDGE","CLIENT_ACKNOWLEDGE","com.river.connector.jms.model.SessionMode.CLIENT_ACKNOWLEDGE"]},{"name":"DUPS_OK_ACKNOWLEDGE","description":"com.river.connector.jms.model.SessionMode.DUPS_OK_ACKNOWLEDGE","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/-d-u-p-s_-o-k_-a-c-k-n-o-w-l-e-d-g-e/index.html","searchKeys":["DUPS_OK_ACKNOWLEDGE","DUPS_OK_ACKNOWLEDGE","com.river.connector.jms.model.SessionMode.DUPS_OK_ACKNOWLEDGE"]},{"name":"NON_PERSISTENT","description":"com.river.connector.jms.model.DeliveryMode.NON_PERSISTENT","location":"connector/connector-jms/com.river.connector.jms.model/-delivery-mode/-n-o-n_-p-e-r-s-i-s-t-e-n-t/index.html","searchKeys":["NON_PERSISTENT","NON_PERSISTENT","com.river.connector.jms.model.DeliveryMode.NON_PERSISTENT"]},{"name":"PERSISTENT","description":"com.river.connector.jms.model.DeliveryMode.PERSISTENT","location":"connector/connector-jms/com.river.connector.jms.model/-delivery-mode/-p-e-r-s-i-s-t-e-n-t/index.html","searchKeys":["PERSISTENT","PERSISTENT","com.river.connector.jms.model.DeliveryMode.PERSISTENT"]},{"name":"SESSION_TRANSACTED","description":"com.river.connector.jms.model.SessionMode.SESSION_TRANSACTED","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/-s-e-s-s-i-o-n_-t-r-a-n-s-a-c-t-e-d/index.html","searchKeys":["SESSION_TRANSACTED","SESSION_TRANSACTED","com.river.connector.jms.model.SessionMode.SESSION_TRANSACTED"]},{"name":"class Boolean(value: Boolean) : JmsPrimitive<Boolean> ","description":"com.river.connector.jms.model.JmsPrimitive.Boolean","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-boolean/index.html","searchKeys":["Boolean","class Boolean(value: Boolean) : JmsPrimitive<Boolean> ","com.river.connector.jms.model.JmsPrimitive.Boolean"]},{"name":"class Bytes(value: ByteArray) : JmsPrimitive<ByteArray> ","description":"com.river.connector.jms.model.JmsPrimitive.Bytes","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-bytes/index.html","searchKeys":["Bytes","class Bytes(value: ByteArray) : JmsPrimitive<ByteArray> ","com.river.connector.jms.model.JmsPrimitive.Bytes"]},{"name":"class Bytes(value: ByteArray, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"com.river.connector.jms.model.JmsMessage.Bytes","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-bytes/index.html","searchKeys":["Bytes","class Bytes(value: ByteArray, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","com.river.connector.jms.model.JmsMessage.Bytes"]},{"name":"class CommittableBytesMessage(inner: BytesMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, BytesMessage","description":"com.river.connector.jms.model.CommittableMessage.CommittableBytesMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-bytes-message/index.html","searchKeys":["CommittableBytesMessage","class CommittableBytesMessage(inner: BytesMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, BytesMessage","com.river.connector.jms.model.CommittableMessage.CommittableBytesMessage"]},{"name":"class CommittableMapMessage(inner: MapMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, MapMessage","description":"com.river.connector.jms.model.CommittableMessage.CommittableMapMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-map-message/index.html","searchKeys":["CommittableMapMessage","class CommittableMapMessage(inner: MapMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, MapMessage","com.river.connector.jms.model.CommittableMessage.CommittableMapMessage"]},{"name":"class CommittableObjectMessage(inner: ObjectMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, ObjectMessage","description":"com.river.connector.jms.model.CommittableMessage.CommittableObjectMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-object-message/index.html","searchKeys":["CommittableObjectMessage","class CommittableObjectMessage(inner: ObjectMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, ObjectMessage","com.river.connector.jms.model.CommittableMessage.CommittableObjectMessage"]},{"name":"class CommittableTextMessage(inner: TextMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, TextMessage","description":"com.river.connector.jms.model.CommittableMessage.CommittableTextMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-text-message/index.html","searchKeys":["CommittableTextMessage","class CommittableTextMessage(inner: TextMessage, coAcknowledge: suspend () -> Unit) : CommittableMessage, TextMessage","com.river.connector.jms.model.CommittableMessage.CommittableTextMessage"]},{"name":"class DefaultMessage(inner: Message, coAcknowledge: suspend () -> Unit) : CommittableMessage, Message","description":"com.river.connector.jms.model.CommittableMessage.DefaultMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-default-message/index.html","searchKeys":["DefaultMessage","class DefaultMessage(inner: Message, coAcknowledge: suspend () -> Unit) : CommittableMessage, Message","com.river.connector.jms.model.CommittableMessage.DefaultMessage"]},{"name":"class Double(value: Double) : JmsPrimitive<Double> ","description":"com.river.connector.jms.model.JmsPrimitive.Double","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-double/index.html","searchKeys":["Double","class Double(value: Double) : JmsPrimitive<Double> ","com.river.connector.jms.model.JmsPrimitive.Double"]},{"name":"class Float(value: Float) : JmsPrimitive<Float> ","description":"com.river.connector.jms.model.JmsPrimitive.Float","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-float/index.html","searchKeys":["Float","class Float(value: Float) : JmsPrimitive<Float> ","com.river.connector.jms.model.JmsPrimitive.Float"]},{"name":"class Int(value: Int) : JmsPrimitive<Int> ","description":"com.river.connector.jms.model.JmsPrimitive.Int","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-int/index.html","searchKeys":["Int","class Int(value: Int) : JmsPrimitive<Int> ","com.river.connector.jms.model.JmsPrimitive.Int"]},{"name":"class Long(value: Long) : JmsPrimitive<Long> ","description":"com.river.connector.jms.model.JmsPrimitive.Long","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-long/index.html","searchKeys":["Long","class Long(value: Long) : JmsPrimitive<Long> ","com.river.connector.jms.model.JmsPrimitive.Long"]},{"name":"class Map(value: Map<String, JmsPrimitive<*>>, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"com.river.connector.jms.model.JmsMessage.Map","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-map/index.html","searchKeys":["Map","class Map(value: Map<String, JmsPrimitive<*>>, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","com.river.connector.jms.model.JmsMessage.Map"]},{"name":"class Object(value: Serializable, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"com.river.connector.jms.model.JmsMessage.Object","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-object/index.html","searchKeys":["Object","class Object(value: Serializable, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","com.river.connector.jms.model.JmsMessage.Object"]},{"name":"class Queue(name: String) : JmsDestination","description":"com.river.connector.jms.model.JmsDestination.Queue","location":"connector/connector-jms/com.river.connector.jms.model/-jms-destination/-queue/index.html","searchKeys":["Queue","class Queue(name: String) : JmsDestination","com.river.connector.jms.model.JmsDestination.Queue"]},{"name":"class Text(value: String) : JmsPrimitive<String> ","description":"com.river.connector.jms.model.JmsPrimitive.Text","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-text/index.html","searchKeys":["Text","class Text(value: String) : JmsPrimitive<String> ","com.river.connector.jms.model.JmsPrimitive.Text"]},{"name":"class Text(value: String, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"com.river.connector.jms.model.JmsMessage.Text","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-text/index.html","searchKeys":["Text","class Text(value: String, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","com.river.connector.jms.model.JmsMessage.Text"]},{"name":"class Topic(name: String) : JmsDestination","description":"com.river.connector.jms.model.JmsDestination.Topic","location":"connector/connector-jms/com.river.connector.jms.model/-jms-destination/-topic/index.html","searchKeys":["Topic","class Topic(name: String) : JmsDestination","com.river.connector.jms.model.JmsDestination.Topic"]},{"name":"constructor(inner: BytesMessage, coAcknowledge: suspend () -> Unit)","description":"com.river.connector.jms.model.CommittableMessage.CommittableBytesMessage.CommittableBytesMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-bytes-message/-committable-bytes-message.html","searchKeys":["CommittableBytesMessage","constructor(inner: BytesMessage, coAcknowledge: suspend () -> Unit)","com.river.connector.jms.model.CommittableMessage.CommittableBytesMessage.CommittableBytesMessage"]},{"name":"constructor(inner: MapMessage, coAcknowledge: suspend () -> Unit)","description":"com.river.connector.jms.model.CommittableMessage.CommittableMapMessage.CommittableMapMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-map-message/-committable-map-message.html","searchKeys":["CommittableMapMessage","constructor(inner: MapMessage, coAcknowledge: suspend () -> Unit)","com.river.connector.jms.model.CommittableMessage.CommittableMapMessage.CommittableMapMessage"]},{"name":"constructor(inner: Message, coAcknowledge: suspend () -> Unit)","description":"com.river.connector.jms.model.CommittableMessage.DefaultMessage.DefaultMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-default-message/-default-message.html","searchKeys":["DefaultMessage","constructor(inner: Message, coAcknowledge: suspend () -> Unit)","com.river.connector.jms.model.CommittableMessage.DefaultMessage.DefaultMessage"]},{"name":"constructor(inner: ObjectMessage, coAcknowledge: suspend () -> Unit)","description":"com.river.connector.jms.model.CommittableMessage.CommittableObjectMessage.CommittableObjectMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-object-message/-committable-object-message.html","searchKeys":["CommittableObjectMessage","constructor(inner: ObjectMessage, coAcknowledge: suspend () -> Unit)","com.river.connector.jms.model.CommittableMessage.CommittableObjectMessage.CommittableObjectMessage"]},{"name":"constructor(inner: TextMessage, coAcknowledge: suspend () -> Unit)","description":"com.river.connector.jms.model.CommittableMessage.CommittableTextMessage.CommittableTextMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-text-message/-committable-text-message.html","searchKeys":["CommittableTextMessage","constructor(inner: TextMessage, coAcknowledge: suspend () -> Unit)","com.river.connector.jms.model.CommittableMessage.CommittableTextMessage.CommittableTextMessage"]},{"name":"constructor(name: String)","description":"com.river.connector.jms.model.JmsDestination.Queue.Queue","location":"connector/connector-jms/com.river.connector.jms.model/-jms-destination/-queue/-queue.html","searchKeys":["Queue","constructor(name: String)","com.river.connector.jms.model.JmsDestination.Queue.Queue"]},{"name":"constructor(name: String)","description":"com.river.connector.jms.model.JmsDestination.Topic.Topic","location":"connector/connector-jms/com.river.connector.jms.model/-jms-destination/-topic/-topic.html","searchKeys":["Topic","constructor(name: String)","com.river.connector.jms.model.JmsDestination.Topic.Topic"]},{"name":"constructor(username: String, password: String)","description":"com.river.connector.jms.model.Credentials.Credentials","location":"connector/connector-jms/com.river.connector.jms.model/-credentials/-credentials.html","searchKeys":["Credentials","constructor(username: String, password: String)","com.river.connector.jms.model.Credentials.Credentials"]},{"name":"constructor(value: Boolean)","description":"com.river.connector.jms.model.JmsPrimitive.Boolean.Boolean","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-boolean/-boolean.html","searchKeys":["Boolean","constructor(value: Boolean)","com.river.connector.jms.model.JmsPrimitive.Boolean.Boolean"]},{"name":"constructor(value: ByteArray)","description":"com.river.connector.jms.model.JmsPrimitive.Bytes.Bytes","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-bytes/-bytes.html","searchKeys":["Bytes","constructor(value: ByteArray)","com.river.connector.jms.model.JmsPrimitive.Bytes.Bytes"]},{"name":"constructor(value: ByteArray, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"com.river.connector.jms.model.JmsMessage.Bytes.Bytes","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-bytes/-bytes.html","searchKeys":["Bytes","constructor(value: ByteArray, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","com.river.connector.jms.model.JmsMessage.Bytes.Bytes"]},{"name":"constructor(value: Double)","description":"com.river.connector.jms.model.JmsPrimitive.Double.Double","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-double/-double.html","searchKeys":["Double","constructor(value: Double)","com.river.connector.jms.model.JmsPrimitive.Double.Double"]},{"name":"constructor(value: Float)","description":"com.river.connector.jms.model.JmsPrimitive.Float.Float","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-float/-float.html","searchKeys":["Float","constructor(value: Float)","com.river.connector.jms.model.JmsPrimitive.Float.Float"]},{"name":"constructor(value: Int)","description":"com.river.connector.jms.model.JmsPrimitive.Int.Int","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-int/-int.html","searchKeys":["Int","constructor(value: Int)","com.river.connector.jms.model.JmsPrimitive.Int.Int"]},{"name":"constructor(value: Long)","description":"com.river.connector.jms.model.JmsPrimitive.Long.Long","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-long/-long.html","searchKeys":["Long","constructor(value: Long)","com.river.connector.jms.model.JmsPrimitive.Long.Long"]},{"name":"constructor(value: Map<String, JmsPrimitive<*>>, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"com.river.connector.jms.model.JmsMessage.Map.Map","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-map/-map.html","searchKeys":["Map","constructor(value: Map<String, JmsPrimitive<*>>, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","com.river.connector.jms.model.JmsMessage.Map.Map"]},{"name":"constructor(value: Serializable, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"com.river.connector.jms.model.JmsMessage.Object.Object","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-object/-object.html","searchKeys":["Object","constructor(value: Serializable, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","com.river.connector.jms.model.JmsMessage.Object.Object"]},{"name":"constructor(value: String)","description":"com.river.connector.jms.model.JmsPrimitive.Text.Text","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/-text/-text.html","searchKeys":["Text","constructor(value: String)","com.river.connector.jms.model.JmsPrimitive.Text.Text"]},{"name":"constructor(value: String, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"com.river.connector.jms.model.JmsMessage.Text.Text","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/-text/-text.html","searchKeys":["Text","constructor(value: String, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","com.river.connector.jms.model.JmsMessage.Text.Text"]},{"name":"data class Credentials(val username: String, val password: String)","description":"com.river.connector.jms.model.Credentials","location":"connector/connector-jms/com.river.connector.jms.model/-credentials/index.html","searchKeys":["Credentials","data class Credentials(val username: String, val password: String)","com.river.connector.jms.model.Credentials"]},{"name":"enum DeliveryMode : Enum<DeliveryMode> ","description":"com.river.connector.jms.model.DeliveryMode","location":"connector/connector-jms/com.river.connector.jms.model/-delivery-mode/index.html","searchKeys":["DeliveryMode","enum DeliveryMode : Enum<DeliveryMode> ","com.river.connector.jms.model.DeliveryMode"]},{"name":"enum SessionMode : Enum<SessionMode> ","description":"com.river.connector.jms.model.SessionMode","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/index.html","searchKeys":["SessionMode","enum SessionMode : Enum<SessionMode> ","com.river.connector.jms.model.SessionMode"]},{"name":"fun ConnectionFactory.consume(queueName: String, credentials: Credentials? = null, sessionMode: SessionMode = SessionMode.CLIENT_ACKNOWLEDGE, pollingMaxWait: Duration = 10.seconds, concurrency: Int = 1): Flow<CommittableMessage>","description":"com.river.connector.jms.consume","location":"connector/connector-jms/com.river.connector.jms/consume.html","searchKeys":["consume","fun ConnectionFactory.consume(queueName: String, credentials: Credentials? = null, sessionMode: SessionMode = SessionMode.CLIENT_ACKNOWLEDGE, pollingMaxWait: Duration = 10.seconds, concurrency: Int = 1): Flow<CommittableMessage>","com.river.connector.jms.consume"]},{"name":"fun ConnectionFactory.sendToDestination(destination: JmsDestination, upstream: Flow<JmsMessage>, concurrency: Int = 1, credentials: Credentials? = null): Flow<Unit>","description":"com.river.connector.jms.sendToDestination","location":"connector/connector-jms/com.river.connector.jms/send-to-destination.html","searchKeys":["sendToDestination","fun ConnectionFactory.sendToDestination(destination: JmsDestination, upstream: Flow<JmsMessage>, concurrency: Int = 1, credentials: Credentials? = null): Flow<Unit>","com.river.connector.jms.sendToDestination"]},{"name":"fun valueOf(value: String): DeliveryMode","description":"com.river.connector.jms.model.DeliveryMode.valueOf","location":"connector/connector-jms/com.river.connector.jms.model/-delivery-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DeliveryMode","com.river.connector.jms.model.DeliveryMode.valueOf"]},{"name":"fun valueOf(value: String): SessionMode","description":"com.river.connector.jms.model.SessionMode.valueOf","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SessionMode","com.river.connector.jms.model.SessionMode.valueOf"]},{"name":"fun values(): Array<DeliveryMode>","description":"com.river.connector.jms.model.DeliveryMode.values","location":"connector/connector-jms/com.river.connector.jms.model/-delivery-mode/values.html","searchKeys":["values","fun values(): Array<DeliveryMode>","com.river.connector.jms.model.DeliveryMode.values"]},{"name":"fun values(): Array<SessionMode>","description":"com.river.connector.jms.model.SessionMode.values","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/values.html","searchKeys":["values","fun values(): Array<SessionMode>","com.river.connector.jms.model.SessionMode.values"]},{"name":"object Companion","description":"com.river.connector.jms.model.CommittableMessage.Companion","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.jms.model.CommittableMessage.Companion"]},{"name":"open override fun acknowledge()","description":"com.river.connector.jms.model.CommittableMessage.CommittableBytesMessage.acknowledge","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-bytes-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","com.river.connector.jms.model.CommittableMessage.CommittableBytesMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"com.river.connector.jms.model.CommittableMessage.CommittableMapMessage.acknowledge","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-map-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","com.river.connector.jms.model.CommittableMessage.CommittableMapMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"com.river.connector.jms.model.CommittableMessage.CommittableObjectMessage.acknowledge","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-object-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","com.river.connector.jms.model.CommittableMessage.CommittableObjectMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"com.river.connector.jms.model.CommittableMessage.CommittableTextMessage.acknowledge","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-committable-text-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","com.river.connector.jms.model.CommittableMessage.CommittableTextMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"com.river.connector.jms.model.CommittableMessage.DefaultMessage.acknowledge","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-default-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","com.river.connector.jms.model.CommittableMessage.DefaultMessage.acknowledge"]},{"name":"operator fun invoke(message: Message, ack: suspend () -> Unit): CommittableMessage","description":"com.river.connector.jms.model.CommittableMessage.Companion.invoke","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(message: Message, ack: suspend () -> Unit): CommittableMessage","com.river.connector.jms.model.CommittableMessage.Companion.invoke"]},{"name":"sealed class CommittableMessage : Message","description":"com.river.connector.jms.model.CommittableMessage","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/index.html","searchKeys":["CommittableMessage","sealed class CommittableMessage : Message","com.river.connector.jms.model.CommittableMessage"]},{"name":"sealed class JmsDestination","description":"com.river.connector.jms.model.JmsDestination","location":"connector/connector-jms/com.river.connector.jms.model/-jms-destination/index.html","searchKeys":["JmsDestination","sealed class JmsDestination","com.river.connector.jms.model.JmsDestination"]},{"name":"sealed class JmsMessage","description":"com.river.connector.jms.model.JmsMessage","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/index.html","searchKeys":["JmsMessage","sealed class JmsMessage","com.river.connector.jms.model.JmsMessage"]},{"name":"sealed class JmsPrimitive<T>","description":"com.river.connector.jms.model.JmsPrimitive","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/index.html","searchKeys":["JmsPrimitive","sealed class JmsPrimitive<T>","com.river.connector.jms.model.JmsPrimitive"]},{"name":"suspend fun coAcknowledge()","description":"com.river.connector.jms.model.CommittableMessage.coAcknowledge","location":"connector/connector-jms/com.river.connector.jms.model/-committable-message/co-acknowledge.html","searchKeys":["coAcknowledge","suspend fun coAcknowledge()","com.river.connector.jms.model.CommittableMessage.coAcknowledge"]},{"name":"val correlationId: String? = null","description":"com.river.connector.jms.model.JmsMessage.correlationId","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/correlation-id.html","searchKeys":["correlationId","val correlationId: String? = null","com.river.connector.jms.model.JmsMessage.correlationId"]},{"name":"val deliveryMode: DeliveryMode","description":"com.river.connector.jms.model.JmsMessage.deliveryMode","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/delivery-mode.html","searchKeys":["deliveryMode","val deliveryMode: DeliveryMode","com.river.connector.jms.model.JmsMessage.deliveryMode"]},{"name":"val destination: JMSContext.() -> Destination","description":"com.river.connector.jms.model.JmsDestination.destination","location":"connector/connector-jms/com.river.connector.jms.model/-jms-destination/destination.html","searchKeys":["destination","val destination: JMSContext.() -> Destination","com.river.connector.jms.model.JmsDestination.destination"]},{"name":"val password: String","description":"com.river.connector.jms.model.Credentials.password","location":"connector/connector-jms/com.river.connector.jms.model/-credentials/password.html","searchKeys":["password","val password: String","com.river.connector.jms.model.Credentials.password"]},{"name":"val properties: Map<String, JmsPrimitive<*>>","description":"com.river.connector.jms.model.JmsMessage.properties","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/properties.html","searchKeys":["properties","val properties: Map<String, JmsPrimitive<*>>","com.river.connector.jms.model.JmsMessage.properties"]},{"name":"val replyTo: JmsDestination? = null","description":"com.river.connector.jms.model.JmsMessage.replyTo","location":"connector/connector-jms/com.river.connector.jms.model/-jms-message/reply-to.html","searchKeys":["replyTo","val replyTo: JmsDestination? = null","com.river.connector.jms.model.JmsMessage.replyTo"]},{"name":"val username: String","description":"com.river.connector.jms.model.Credentials.username","location":"connector/connector-jms/com.river.connector.jms.model/-credentials/username.html","searchKeys":["username","val username: String","com.river.connector.jms.model.Credentials.username"]},{"name":"val value: Int","description":"com.river.connector.jms.model.DeliveryMode.value","location":"connector/connector-jms/com.river.connector.jms.model/-delivery-mode/value.html","searchKeys":["value","val value: Int","com.river.connector.jms.model.DeliveryMode.value"]},{"name":"val value: Int","description":"com.river.connector.jms.model.SessionMode.value","location":"connector/connector-jms/com.river.connector.jms.model/-session-mode/value.html","searchKeys":["value","val value: Int","com.river.connector.jms.model.SessionMode.value"]},{"name":"val value: T","description":"com.river.connector.jms.model.JmsPrimitive.value","location":"connector/connector-jms/com.river.connector.jms.model/-jms-primitive/value.html","searchKeys":["value","val value: T","com.river.connector.jms.model.JmsPrimitive.value"]},{"name":"constructor(columns: List<String>)","description":"com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.GeneratedValues","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/-generated-values/-generated-values.html","searchKeys":["GeneratedValues","constructor(columns: List<String>)","com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.GeneratedValues"]},{"name":"data class GeneratedValues(val columns: List<String>) : Returning","description":"com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/-generated-values/index.html","searchKeys":["GeneratedValues","data class GeneratedValues(val columns: List<String>) : Returning","com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues"]},{"name":"fun <T> Connection.batchUpdate(sql: String, upstream: Flow<T>, returning: Returning = Returning.Default, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(100, 250.milliseconds), prepare: Statement.(T) -> Unit = {}): Flow<Result>","description":"com.river.connector.rdbms.r2dbc.batchUpdate","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/batch-update.html","searchKeys":["batchUpdate","fun <T> Connection.batchUpdate(sql: String, upstream: Flow<T>, returning: Returning = Returning.Default, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(100, 250.milliseconds), prepare: Statement.(T) -> Unit = {}): Flow<Result>","com.river.connector.rdbms.r2dbc.batchUpdate"]},{"name":"fun <T> Connection.batchUpdate(upstream: Flow<T>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(100, 250.milliseconds), query: (T) -> String): Flow<Result>","description":"com.river.connector.rdbms.r2dbc.batchUpdate","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/batch-update.html","searchKeys":["batchUpdate","fun <T> Connection.batchUpdate(upstream: Flow<T>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(100, 250.milliseconds), query: (T) -> String): Flow<Result>","com.river.connector.rdbms.r2dbc.batchUpdate"]},{"name":"fun <T> Connection.singleUpdate(sql: String, upstream: Flow<T>, concurrency: Int = 1, prepare: Statement.(T) -> Unit = {}): Flow<Long>","description":"com.river.connector.rdbms.r2dbc.singleUpdate","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/single-update.html","searchKeys":["singleUpdate","fun <T> Connection.singleUpdate(sql: String, upstream: Flow<T>, concurrency: Int = 1, prepare: Statement.(T) -> Unit = {}): Flow<Long>","com.river.connector.rdbms.r2dbc.singleUpdate"]},{"name":"fun <T> Flow<Result>.mapRow(f: suspend (Row) -> T): Flow<T>","description":"com.river.connector.rdbms.r2dbc.mapRow","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/map-row.html","searchKeys":["mapRow","fun <T> Flow<Result>.mapRow(f: suspend (Row) -> T): Flow<T>","com.river.connector.rdbms.r2dbc.mapRow"]},{"name":"fun Connection.query(sql: String, prepare: Statement.() -> Unit = {}): Flow<ResultRow>","description":"com.river.connector.rdbms.r2dbc.query","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/query.html","searchKeys":["query","fun Connection.query(sql: String, prepare: Statement.() -> Unit = {}): Flow<ResultRow>","com.river.connector.rdbms.r2dbc.query"]},{"name":"fun Connection.singleUpdate(sql: String): Flow<Long>","description":"com.river.connector.rdbms.r2dbc.singleUpdate","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/single-update.html","searchKeys":["singleUpdate","fun Connection.singleUpdate(sql: String): Flow<Long>","com.river.connector.rdbms.r2dbc.singleUpdate"]},{"name":"fun Flow<Result>.asRows(): Flow<Row>","description":"com.river.connector.rdbms.r2dbc.asRows","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/as-rows.html","searchKeys":["asRows","fun Flow<Result>.asRows(): Flow<Row>","com.river.connector.rdbms.r2dbc.asRows"]},{"name":"fun Flow<Result>.rowsUpdated(): Flow<Long>","description":"com.river.connector.rdbms.r2dbc.rowsUpdated","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc/rows-updated.html","searchKeys":["rowsUpdated","fun Flow<Result>.rowsUpdated(): Flow<Long>","com.river.connector.rdbms.r2dbc.rowsUpdated"]},{"name":"interface Returning","description":"com.river.connector.rdbms.r2dbc.model.Returning","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/index.html","searchKeys":["Returning","interface Returning","com.river.connector.rdbms.r2dbc.model.Returning"]},{"name":"object Companion","description":"com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.Companion","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/-generated-values/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.Companion"]},{"name":"object Default : Returning","description":"com.river.connector.rdbms.r2dbc.model.Returning.Default","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/-default/index.html","searchKeys":["Default","object Default : Returning","com.river.connector.rdbms.r2dbc.model.Returning.Default"]},{"name":"operator fun invoke(vararg columns: String): Returning.GeneratedValues","description":"com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.Companion.invoke","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/-generated-values/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(vararg columns: String): Returning.GeneratedValues","com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.Companion.invoke"]},{"name":"val columns: List<String>","description":"com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.columns","location":"connector/connector-rdbms/connector-rdbms-r2dbc/com.river.connector.rdbms.r2dbc.model/-returning/-generated-values/columns.html","searchKeys":["columns","val columns: List<String>","com.river.connector.rdbms.r2dbc.model.Returning.GeneratedValues.columns"]},{"name":"abstract fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","description":"com.river.connector.elasticsearch.PaginatedSearch.paginatedSearchFlow","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","abstract fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","com.river.connector.elasticsearch.PaginatedSearch.paginatedSearchFlow"]},{"name":"class BySearchAfter(val index: String, val pageSize: Int = 100, val concurrency: Int = 1, val fields: List<PaginatedSearch.BySearchAfter.Field>, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/index.html","searchKeys":["BySearchAfter","class BySearchAfter(val index: String, val pageSize: Int = 100, val concurrency: Int = 1, val fields: List<PaginatedSearch.BySearchAfter.Field>, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter"]},{"name":"class Default(val index: String, val pageSize: Int = 100, val concurrency: Int = 1, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","description":"com.river.connector.elasticsearch.PaginatedSearch.Default","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/index.html","searchKeys":["Default","class Default(val index: String, val pageSize: Int = 100, val concurrency: Int = 1, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","com.river.connector.elasticsearch.PaginatedSearch.Default"]},{"name":"class Field(val name: String, val order: SortOrder)","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/index.html","searchKeys":["Field","class Field(val name: String, val order: SortOrder)","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field"]},{"name":"constructor(id: String, index: String, document: T)","description":"com.river.connector.elasticsearch.Document.Document","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-document/-document.html","searchKeys":["Document","constructor(id: String, index: String, document: T)","com.river.connector.elasticsearch.Document.Document"]},{"name":"constructor(index: String, pageSize: Int = 100, concurrency: Int = 1, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","description":"com.river.connector.elasticsearch.PaginatedSearch.Default.Default","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/-default.html","searchKeys":["Default","constructor(index: String, pageSize: Int = 100, concurrency: Int = 1, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","com.river.connector.elasticsearch.PaginatedSearch.Default.Default"]},{"name":"constructor(index: String, pageSize: Int = 100, concurrency: Int = 1, fields: List<PaginatedSearch.BySearchAfter.Field>, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.BySearchAfter","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/-by-search-after.html","searchKeys":["BySearchAfter","constructor(index: String, pageSize: Int = 100, concurrency: Int = 1, fields: List<PaginatedSearch.BySearchAfter.Field>, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.BySearchAfter"]},{"name":"constructor(name: String, order: SortOrder)","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.Field","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/-field.html","searchKeys":["Field","constructor(name: String, order: SortOrder)","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.Field"]},{"name":"data class Document<T>(val id: String, val index: String, val document: T)","description":"com.river.connector.elasticsearch.Document","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-document/index.html","searchKeys":["Document","data class Document<T>(val id: String, val index: String, val document: T)","com.river.connector.elasticsearch.Document"]},{"name":"fun <T> ElasticsearchAsyncClient.indexFlow(upstream: Flow<Document<T>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(100, 250.milliseconds)): Flow<BulkResponseItem>","description":"com.river.connector.elasticsearch.indexFlow","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/index-flow.html","searchKeys":["indexFlow","fun <T> ElasticsearchAsyncClient.indexFlow(upstream: Flow<Document<T>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(100, 250.milliseconds)): Flow<BulkResponseItem>","com.river.connector.elasticsearch.indexFlow"]},{"name":"fun <T> Flow<T>.toDocument(f: (T) -> Pair<String, String>): Flow<Document<T>>","description":"com.river.connector.elasticsearch.toDocument","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/to-document.html","searchKeys":["toDocument","fun <T> Flow<T>.toDocument(f: (T) -> Pair<String, String>): Flow<Document<T>>","com.river.connector.elasticsearch.toDocument"]},{"name":"inline fun <T> ElasticsearchAsyncClient.paginatedSearchFlow(configuration: PaginatedSearch): Flow<Hit<T>>","description":"com.river.connector.elasticsearch.paginatedSearchFlow","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","inline fun <T> ElasticsearchAsyncClient.paginatedSearchFlow(configuration: PaginatedSearch): Flow<Hit<T>>","com.river.connector.elasticsearch.paginatedSearchFlow"]},{"name":"interface PaginatedSearch","description":"com.river.connector.elasticsearch.PaginatedSearch","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/index.html","searchKeys":["PaginatedSearch","interface PaginatedSearch","com.river.connector.elasticsearch.PaginatedSearch"]},{"name":"open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.paginatedSearchFlow","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.paginatedSearchFlow"]},{"name":"open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","description":"com.river.connector.elasticsearch.PaginatedSearch.Default.paginatedSearchFlow","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","com.river.connector.elasticsearch.PaginatedSearch.Default.paginatedSearchFlow"]},{"name":"suspend fun ElasticsearchAsyncClient.maxResultWindow(index: String, default: Int = 10000): Int","description":"com.river.connector.elasticsearch.maxResultWindow","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/max-result-window.html","searchKeys":["maxResultWindow","suspend fun ElasticsearchAsyncClient.maxResultWindow(index: String, default: Int = 10000): Int","com.river.connector.elasticsearch.maxResultWindow"]},{"name":"val concurrency: Int = 1","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.concurrency","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/concurrency.html","searchKeys":["concurrency","val concurrency: Int = 1","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.concurrency"]},{"name":"val concurrency: Int = 1","description":"com.river.connector.elasticsearch.PaginatedSearch.Default.concurrency","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/concurrency.html","searchKeys":["concurrency","val concurrency: Int = 1","com.river.connector.elasticsearch.PaginatedSearch.Default.concurrency"]},{"name":"val document: T","description":"com.river.connector.elasticsearch.Document.document","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-document/document.html","searchKeys":["document","val document: T","com.river.connector.elasticsearch.Document.document"]},{"name":"val f: (Query.Builder) -> ObjectBuilder<Query>","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.f","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/f.html","searchKeys":["f","val f: (Query.Builder) -> ObjectBuilder<Query>","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.f"]},{"name":"val f: (Query.Builder) -> ObjectBuilder<Query>","description":"com.river.connector.elasticsearch.PaginatedSearch.Default.f","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/f.html","searchKeys":["f","val f: (Query.Builder) -> ObjectBuilder<Query>","com.river.connector.elasticsearch.PaginatedSearch.Default.f"]},{"name":"val fields: List<PaginatedSearch.BySearchAfter.Field>","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.fields","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/fields.html","searchKeys":["fields","val fields: List<PaginatedSearch.BySearchAfter.Field>","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.fields"]},{"name":"val id: String","description":"com.river.connector.elasticsearch.Document.id","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-document/id.html","searchKeys":["id","val id: String","com.river.connector.elasticsearch.Document.id"]},{"name":"val index: String","description":"com.river.connector.elasticsearch.Document.index","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-document/--index--.html","searchKeys":["index","val index: String","com.river.connector.elasticsearch.Document.index"]},{"name":"val index: String","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.index","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/--index--.html","searchKeys":["index","val index: String","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.index"]},{"name":"val index: String","description":"com.river.connector.elasticsearch.PaginatedSearch.Default.index","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/--index--.html","searchKeys":["index","val index: String","com.river.connector.elasticsearch.PaginatedSearch.Default.index"]},{"name":"val name: String","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.name","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/name.html","searchKeys":["name","val name: String","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.name"]},{"name":"val order: SortOrder","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.order","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/order.html","searchKeys":["order","val order: SortOrder","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.order"]},{"name":"val pageSize: Int = 100","description":"com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.pageSize","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-by-search-after/page-size.html","searchKeys":["pageSize","val pageSize: Int = 100","com.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.pageSize"]},{"name":"val pageSize: Int = 100","description":"com.river.connector.elasticsearch.PaginatedSearch.Default.pageSize","location":"connector/connector-elasticsearch/com.river.connector.elasticsearch/-paginated-search/-default/page-size.html","searchKeys":["pageSize","val pageSize: Int = 100","com.river.connector.elasticsearch.PaginatedSearch.Default.pageSize"]},{"name":"ASSISTANT","description":"com.river.connector.openai.model.Role.ASSISTANT","location":"connector/connector-openai/com.river.connector.openai.model/-role/-a-s-s-i-s-t-a-n-t/index.html","searchKeys":["ASSISTANT","ASSISTANT","com.river.connector.openai.model.Role.ASSISTANT"]},{"name":"SYSTEM","description":"com.river.connector.openai.model.Role.SYSTEM","location":"connector/connector-openai/com.river.connector.openai.model/-role/-s-y-s-t-e-m/index.html","searchKeys":["SYSTEM","SYSTEM","com.river.connector.openai.model.Role.SYSTEM"]},{"name":"USER","description":"com.river.connector.openai.model.Role.USER","location":"connector/connector-openai/com.river.connector.openai.model/-role/-u-s-e-r/index.html","searchKeys":["USER","USER","com.river.connector.openai.model.Role.USER"]},{"name":"class OpenAIClient(apiKey: String, baseUrl: String = OpenAIClient.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = OpenAIClient.objectMapper)","description":"com.river.connector.openai.OpenAIClient","location":"connector/connector-openai/com.river.connector.openai/-open-a-i-client/index.html","searchKeys":["OpenAIClient","class OpenAIClient(apiKey: String, baseUrl: String = OpenAIClient.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = OpenAIClient.objectMapper)","com.river.connector.openai.OpenAIClient"]},{"name":"const val gpt_3_5_turbo: String","description":"com.river.connector.openai.model.Models.gpt_3_5_turbo","location":"connector/connector-openai/com.river.connector.openai.model/-models/gpt_3_5_turbo.html","searchKeys":["gpt_3_5_turbo","const val gpt_3_5_turbo: String","com.river.connector.openai.model.Models.gpt_3_5_turbo"]},{"name":"const val gpt_3_5_turbo_0301: String","description":"com.river.connector.openai.model.Models.gpt_3_5_turbo_0301","location":"connector/connector-openai/com.river.connector.openai.model/-models/gpt_3_5_turbo_0301.html","searchKeys":["gpt_3_5_turbo_0301","const val gpt_3_5_turbo_0301: String","com.river.connector.openai.model.Models.gpt_3_5_turbo_0301"]},{"name":"const val gpt_4: String","description":"com.river.connector.openai.model.Models.gpt_4","location":"connector/connector-openai/com.river.connector.openai.model/-models/gpt_4.html","searchKeys":["gpt_4","const val gpt_4: String","com.river.connector.openai.model.Models.gpt_4"]},{"name":"constructor(apiKey: String, baseUrl: String = OpenAIClient.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = OpenAIClient.objectMapper)","description":"com.river.connector.openai.OpenAIClient.OpenAIClient","location":"connector/connector-openai/com.river.connector.openai/-open-a-i-client/-open-a-i-client.html","searchKeys":["OpenAIClient","constructor(apiKey: String, baseUrl: String = OpenAIClient.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = OpenAIClient.objectMapper)","com.river.connector.openai.OpenAIClient.OpenAIClient"]},{"name":"constructor(content: String, role: Role = Role.USER, name: String? = null)","description":"com.river.connector.openai.model.ChatCompletionRequest.Message.Message","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/-message/-message.html","searchKeys":["Message","constructor(content: String, role: Role = Role.USER, name: String? = null)","com.river.connector.openai.model.ChatCompletionRequest.Message.Message"]},{"name":"constructor(content: String?, role: Role?)","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta.Delta","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/-delta/-delta.html","searchKeys":["Delta","constructor(content: String?, role: Role?)","com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta.Delta"]},{"name":"constructor(delta: ChatCompletionResponse.Choice.Delta, index: Int, logprobs: Int?, finishReason: String?)","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.Choice","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/-choice.html","searchKeys":["Choice","constructor(delta: ChatCompletionResponse.Choice.Delta, index: Int, logprobs: Int?, finishReason: String?)","com.river.connector.openai.model.ChatCompletionResponse.Choice.Choice"]},{"name":"constructor(id: String, object: String, created: Int, model: String, choices: List<CompletionResponse.Choice>, usage: CompletionResponse.Usage?)","description":"com.river.connector.openai.model.CompletionResponse.CompletionResponse","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-completion-response.html","searchKeys":["CompletionResponse","constructor(id: String, object: String, created: Int, model: String, choices: List<CompletionResponse.Choice>, usage: CompletionResponse.Usage?)","com.river.connector.openai.model.CompletionResponse.CompletionResponse"]},{"name":"constructor(id: String, object: String, created: Long, allowCreateEngine: Boolean, allowSampling: Boolean, allowLogprobs: Boolean, allowSearchIndices: Boolean, allowView: Boolean, allowFineTuning: Boolean, organization: String, group: String?, isBlocking: Boolean)","description":"com.river.connector.openai.model.Permission.Permission","location":"connector/connector-openai/com.river.connector.openai.model/-permission/-permission.html","searchKeys":["Permission","constructor(id: String, object: String, created: Long, allowCreateEngine: Boolean, allowSampling: Boolean, allowLogprobs: Boolean, allowSearchIndices: Boolean, allowView: Boolean, allowFineTuning: Boolean, organization: String, group: String?, isBlocking: Boolean)","com.river.connector.openai.model.Permission.Permission"]},{"name":"constructor(id: String, object: String, created: Long, ownedBy: String, permission: List<Permission>, root: String, parent: String?)","description":"com.river.connector.openai.model.ModelObject.ModelObject","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/-model-object.html","searchKeys":["ModelObject","constructor(id: String, object: String, created: Long, ownedBy: String, permission: List<Permission>, root: String, parent: String?)","com.river.connector.openai.model.ModelObject.ModelObject"]},{"name":"constructor(id: String, objectType: String?, created: Long, choices: List<ChatCompletionResponse.Choice>, model: String)","description":"com.river.connector.openai.model.ChatCompletionResponse.ChatCompletionResponse","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-chat-completion-response.html","searchKeys":["ChatCompletionResponse","constructor(id: String, objectType: String?, created: Long, choices: List<ChatCompletionResponse.Choice>, model: String)","com.river.connector.openai.model.ChatCompletionResponse.ChatCompletionResponse"]},{"name":"constructor(messages: List<ChatCompletionRequest.Message>, model: String = Models.gpt_3_5_turbo, temperature: Temperature = Temperature())","description":"com.river.connector.openai.model.ChatCompletionRequest.ChatCompletionRequest","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/-chat-completion-request.html","searchKeys":["ChatCompletionRequest","constructor(messages: List<ChatCompletionRequest.Message>, model: String = Models.gpt_3_5_turbo, temperature: Temperature = Temperature())","com.river.connector.openai.model.ChatCompletionRequest.ChatCompletionRequest"]},{"name":"constructor(object: String, data: List<T>)","description":"com.river.connector.openai.model.Items.Items","location":"connector/connector-openai/com.river.connector.openai.model/-items/-items.html","searchKeys":["Items","constructor(object: String, data: List<T>)","com.river.connector.openai.model.Items.Items"]},{"name":"constructor(prompt: List<String>, maxTokens: Int = 16, model: String = Models.gpt_3_5_turbo, temperature: Temperature = Temperature())","description":"com.river.connector.openai.model.CompletionRequest.CompletionRequest","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/-completion-request.html","searchKeys":["CompletionRequest","constructor(prompt: List<String>, maxTokens: Int = 16, model: String = Models.gpt_3_5_turbo, temperature: Temperature = Temperature())","com.river.connector.openai.model.CompletionRequest.CompletionRequest"]},{"name":"constructor(promptTokens: Int, completionTokens: Int, totalTokens: Int)","description":"com.river.connector.openai.model.CompletionResponse.Usage.Usage","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-usage/-usage.html","searchKeys":["Usage","constructor(promptTokens: Int, completionTokens: Int, totalTokens: Int)","com.river.connector.openai.model.CompletionResponse.Usage.Usage"]},{"name":"constructor(text: String, index: Int, logprobs: Int?, finishReason: String?)","description":"com.river.connector.openai.model.CompletionResponse.Choice.Choice","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-choice/-choice.html","searchKeys":["Choice","constructor(text: String, index: Int, logprobs: Int?, finishReason: String?)","com.river.connector.openai.model.CompletionResponse.Choice.Choice"]},{"name":"constructor(value: Double = 1.0)","description":"com.river.connector.openai.model.Temperature.Temperature","location":"connector/connector-openai/com.river.connector.openai.model/-temperature/-temperature.html","searchKeys":["Temperature","constructor(value: Double = 1.0)","com.river.connector.openai.model.Temperature.Temperature"]},{"name":"data class ChatCompletionRequest(val messages: List<ChatCompletionRequest.Message>, val model: String = Models.gpt_3_5_turbo, val temperature: Temperature = Temperature())","description":"com.river.connector.openai.model.ChatCompletionRequest","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/index.html","searchKeys":["ChatCompletionRequest","data class ChatCompletionRequest(val messages: List<ChatCompletionRequest.Message>, val model: String = Models.gpt_3_5_turbo, val temperature: Temperature = Temperature())","com.river.connector.openai.model.ChatCompletionRequest"]},{"name":"data class ChatCompletionResponse(val id: String, val objectType: String?, val created: Long, val choices: List<ChatCompletionResponse.Choice>, val model: String)","description":"com.river.connector.openai.model.ChatCompletionResponse","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/index.html","searchKeys":["ChatCompletionResponse","data class ChatCompletionResponse(val id: String, val objectType: String?, val created: Long, val choices: List<ChatCompletionResponse.Choice>, val model: String)","com.river.connector.openai.model.ChatCompletionResponse"]},{"name":"data class Choice(val delta: ChatCompletionResponse.Choice.Delta, val index: Int, val logprobs: Int?, val finishReason: String?)","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/index.html","searchKeys":["Choice","data class Choice(val delta: ChatCompletionResponse.Choice.Delta, val index: Int, val logprobs: Int?, val finishReason: String?)","com.river.connector.openai.model.ChatCompletionResponse.Choice"]},{"name":"data class Choice(val text: String, val index: Int, val logprobs: Int?, val finishReason: String?)","description":"com.river.connector.openai.model.CompletionResponse.Choice","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-choice/index.html","searchKeys":["Choice","data class Choice(val text: String, val index: Int, val logprobs: Int?, val finishReason: String?)","com.river.connector.openai.model.CompletionResponse.Choice"]},{"name":"data class CompletionRequest(val prompt: List<String>, val maxTokens: Int = 16, val model: String = Models.gpt_3_5_turbo, val temperature: Temperature = Temperature())","description":"com.river.connector.openai.model.CompletionRequest","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/index.html","searchKeys":["CompletionRequest","data class CompletionRequest(val prompt: List<String>, val maxTokens: Int = 16, val model: String = Models.gpt_3_5_turbo, val temperature: Temperature = Temperature())","com.river.connector.openai.model.CompletionRequest"]},{"name":"data class CompletionResponse(val id: String, val object: String, val created: Int, val model: String, val choices: List<CompletionResponse.Choice>, val usage: CompletionResponse.Usage?)","description":"com.river.connector.openai.model.CompletionResponse","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/index.html","searchKeys":["CompletionResponse","data class CompletionResponse(val id: String, val object: String, val created: Int, val model: String, val choices: List<CompletionResponse.Choice>, val usage: CompletionResponse.Usage?)","com.river.connector.openai.model.CompletionResponse"]},{"name":"data class Delta(val content: String?, val role: Role?)","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/-delta/index.html","searchKeys":["Delta","data class Delta(val content: String?, val role: Role?)","com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta"]},{"name":"data class Items<T>(val object: String, val data: List<T>)","description":"com.river.connector.openai.model.Items","location":"connector/connector-openai/com.river.connector.openai.model/-items/index.html","searchKeys":["Items","data class Items<T>(val object: String, val data: List<T>)","com.river.connector.openai.model.Items"]},{"name":"data class Message(val content: String, val role: Role = Role.USER, val name: String? = null)","description":"com.river.connector.openai.model.ChatCompletionRequest.Message","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/-message/index.html","searchKeys":["Message","data class Message(val content: String, val role: Role = Role.USER, val name: String? = null)","com.river.connector.openai.model.ChatCompletionRequest.Message"]},{"name":"data class ModelObject(val id: String, val object: String, val created: Long, val ownedBy: String, val permission: List<Permission>, val root: String, val parent: String?)","description":"com.river.connector.openai.model.ModelObject","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/index.html","searchKeys":["ModelObject","data class ModelObject(val id: String, val object: String, val created: Long, val ownedBy: String, val permission: List<Permission>, val root: String, val parent: String?)","com.river.connector.openai.model.ModelObject"]},{"name":"data class Permission(val id: String, val object: String, val created: Long, val allowCreateEngine: Boolean, val allowSampling: Boolean, val allowLogprobs: Boolean, val allowSearchIndices: Boolean, val allowView: Boolean, val allowFineTuning: Boolean, val organization: String, val group: String?, val isBlocking: Boolean)","description":"com.river.connector.openai.model.Permission","location":"connector/connector-openai/com.river.connector.openai.model/-permission/index.html","searchKeys":["Permission","data class Permission(val id: String, val object: String, val created: Long, val allowCreateEngine: Boolean, val allowSampling: Boolean, val allowLogprobs: Boolean, val allowSearchIndices: Boolean, val allowView: Boolean, val allowFineTuning: Boolean, val organization: String, val group: String?, val isBlocking: Boolean)","com.river.connector.openai.model.Permission"]},{"name":"data class Temperature(val value: Double = 1.0)","description":"com.river.connector.openai.model.Temperature","location":"connector/connector-openai/com.river.connector.openai.model/-temperature/index.html","searchKeys":["Temperature","data class Temperature(val value: Double = 1.0)","com.river.connector.openai.model.Temperature"]},{"name":"data class Usage(val promptTokens: Int, val completionTokens: Int, val totalTokens: Int)","description":"com.river.connector.openai.model.CompletionResponse.Usage","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-usage/index.html","searchKeys":["Usage","data class Usage(val promptTokens: Int, val completionTokens: Int, val totalTokens: Int)","com.river.connector.openai.model.CompletionResponse.Usage"]},{"name":"enum Role : Enum<Role> ","description":"com.river.connector.openai.model.Role","location":"connector/connector-openai/com.river.connector.openai.model/-role/index.html","searchKeys":["Role","enum Role : Enum<Role> ","com.river.connector.openai.model.Role"]},{"name":"fun OpenAIClient.chatCompletions(request: ChatCompletionRequest): Flow<ChatCompletionResponse>","description":"com.river.connector.openai.chatCompletions","location":"connector/connector-openai/com.river.connector.openai/chat-completions.html","searchKeys":["chatCompletions","fun OpenAIClient.chatCompletions(request: ChatCompletionRequest): Flow<ChatCompletionResponse>","com.river.connector.openai.chatCompletions"]},{"name":"fun OpenAIClient.completions(request: CompletionRequest): Flow<CompletionResponse>","description":"com.river.connector.openai.completions","location":"connector/connector-openai/com.river.connector.openai/completions.html","searchKeys":["completions","fun OpenAIClient.completions(request: CompletionRequest): Flow<CompletionResponse>","com.river.connector.openai.completions"]},{"name":"fun OpenAIClient.models(): Flow<ModelObject>","description":"com.river.connector.openai.models","location":"connector/connector-openai/com.river.connector.openai/models.html","searchKeys":["models","fun OpenAIClient.models(): Flow<ModelObject>","com.river.connector.openai.models"]},{"name":"fun value(): String","description":"com.river.connector.openai.model.Role.value","location":"connector/connector-openai/com.river.connector.openai.model/-role/value.html","searchKeys":["value","fun value(): String","com.river.connector.openai.model.Role.value"]},{"name":"fun valueOf(value: String): Role","description":"com.river.connector.openai.model.Role.valueOf","location":"connector/connector-openai/com.river.connector.openai.model/-role/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Role","com.river.connector.openai.model.Role.valueOf"]},{"name":"fun values(): Array<Role>","description":"com.river.connector.openai.model.Role.values","location":"connector/connector-openai/com.river.connector.openai.model/-role/values.html","searchKeys":["values","fun values(): Array<Role>","com.river.connector.openai.model.Role.values"]},{"name":"object Companion","description":"com.river.connector.openai.OpenAIClient.Companion","location":"connector/connector-openai/com.river.connector.openai/-open-a-i-client/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.openai.OpenAIClient.Companion"]},{"name":"object Companion","description":"com.river.connector.openai.model.CompletionRequest.Companion","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.openai.model.CompletionRequest.Companion"]},{"name":"object Models","description":"com.river.connector.openai.model.Models","location":"connector/connector-openai/com.river.connector.openai.model/-models/index.html","searchKeys":["Models","object Models","com.river.connector.openai.model.Models"]},{"name":"operator fun invoke(vararg prompt: String, maxTokens: Int = 16, model: String = Models.gpt_3_5_turbo, temperature: Temperature = Temperature()): CompletionRequest","description":"com.river.connector.openai.model.CompletionRequest.Companion.invoke","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(vararg prompt: String, maxTokens: Int = 16, model: String = Models.gpt_3_5_turbo, temperature: Temperature = Temperature()): CompletionRequest","com.river.connector.openai.model.CompletionRequest.Companion.invoke"]},{"name":"val allowCreateEngine: Boolean","description":"com.river.connector.openai.model.Permission.allowCreateEngine","location":"connector/connector-openai/com.river.connector.openai.model/-permission/allow-create-engine.html","searchKeys":["allowCreateEngine","val allowCreateEngine: Boolean","com.river.connector.openai.model.Permission.allowCreateEngine"]},{"name":"val allowFineTuning: Boolean","description":"com.river.connector.openai.model.Permission.allowFineTuning","location":"connector/connector-openai/com.river.connector.openai.model/-permission/allow-fine-tuning.html","searchKeys":["allowFineTuning","val allowFineTuning: Boolean","com.river.connector.openai.model.Permission.allowFineTuning"]},{"name":"val allowLogprobs: Boolean","description":"com.river.connector.openai.model.Permission.allowLogprobs","location":"connector/connector-openai/com.river.connector.openai.model/-permission/allow-logprobs.html","searchKeys":["allowLogprobs","val allowLogprobs: Boolean","com.river.connector.openai.model.Permission.allowLogprobs"]},{"name":"val allowSampling: Boolean","description":"com.river.connector.openai.model.Permission.allowSampling","location":"connector/connector-openai/com.river.connector.openai.model/-permission/allow-sampling.html","searchKeys":["allowSampling","val allowSampling: Boolean","com.river.connector.openai.model.Permission.allowSampling"]},{"name":"val allowSearchIndices: Boolean","description":"com.river.connector.openai.model.Permission.allowSearchIndices","location":"connector/connector-openai/com.river.connector.openai.model/-permission/allow-search-indices.html","searchKeys":["allowSearchIndices","val allowSearchIndices: Boolean","com.river.connector.openai.model.Permission.allowSearchIndices"]},{"name":"val allowView: Boolean","description":"com.river.connector.openai.model.Permission.allowView","location":"connector/connector-openai/com.river.connector.openai.model/-permission/allow-view.html","searchKeys":["allowView","val allowView: Boolean","com.river.connector.openai.model.Permission.allowView"]},{"name":"val choices: List<ChatCompletionResponse.Choice>","description":"com.river.connector.openai.model.ChatCompletionResponse.choices","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/choices.html","searchKeys":["choices","val choices: List<ChatCompletionResponse.Choice>","com.river.connector.openai.model.ChatCompletionResponse.choices"]},{"name":"val choices: List<CompletionResponse.Choice>","description":"com.river.connector.openai.model.CompletionResponse.choices","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/choices.html","searchKeys":["choices","val choices: List<CompletionResponse.Choice>","com.river.connector.openai.model.CompletionResponse.choices"]},{"name":"val completionTokens: Int","description":"com.river.connector.openai.model.CompletionResponse.Usage.completionTokens","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-usage/completion-tokens.html","searchKeys":["completionTokens","val completionTokens: Int","com.river.connector.openai.model.CompletionResponse.Usage.completionTokens"]},{"name":"val content: String","description":"com.river.connector.openai.model.ChatCompletionRequest.Message.content","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/-message/content.html","searchKeys":["content","val content: String","com.river.connector.openai.model.ChatCompletionRequest.Message.content"]},{"name":"val content: String?","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta.content","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/-delta/content.html","searchKeys":["content","val content: String?","com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta.content"]},{"name":"val created: Int","description":"com.river.connector.openai.model.CompletionResponse.created","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/created.html","searchKeys":["created","val created: Int","com.river.connector.openai.model.CompletionResponse.created"]},{"name":"val created: Long","description":"com.river.connector.openai.model.ChatCompletionResponse.created","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/created.html","searchKeys":["created","val created: Long","com.river.connector.openai.model.ChatCompletionResponse.created"]},{"name":"val created: Long","description":"com.river.connector.openai.model.ModelObject.created","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/created.html","searchKeys":["created","val created: Long","com.river.connector.openai.model.ModelObject.created"]},{"name":"val created: Long","description":"com.river.connector.openai.model.Permission.created","location":"connector/connector-openai/com.river.connector.openai.model/-permission/created.html","searchKeys":["created","val created: Long","com.river.connector.openai.model.Permission.created"]},{"name":"val data: List<T>","description":"com.river.connector.openai.model.Items.data","location":"connector/connector-openai/com.river.connector.openai.model/-items/data.html","searchKeys":["data","val data: List<T>","com.river.connector.openai.model.Items.data"]},{"name":"val delta: ChatCompletionResponse.Choice.Delta","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.delta","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/delta.html","searchKeys":["delta","val delta: ChatCompletionResponse.Choice.Delta","com.river.connector.openai.model.ChatCompletionResponse.Choice.delta"]},{"name":"val finishReason: String?","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.finishReason","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/finish-reason.html","searchKeys":["finishReason","val finishReason: String?","com.river.connector.openai.model.ChatCompletionResponse.Choice.finishReason"]},{"name":"val finishReason: String?","description":"com.river.connector.openai.model.CompletionResponse.Choice.finishReason","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-choice/finish-reason.html","searchKeys":["finishReason","val finishReason: String?","com.river.connector.openai.model.CompletionResponse.Choice.finishReason"]},{"name":"val group: String?","description":"com.river.connector.openai.model.Permission.group","location":"connector/connector-openai/com.river.connector.openai.model/-permission/group.html","searchKeys":["group","val group: String?","com.river.connector.openai.model.Permission.group"]},{"name":"val id: String","description":"com.river.connector.openai.model.ChatCompletionResponse.id","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/id.html","searchKeys":["id","val id: String","com.river.connector.openai.model.ChatCompletionResponse.id"]},{"name":"val id: String","description":"com.river.connector.openai.model.CompletionResponse.id","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/id.html","searchKeys":["id","val id: String","com.river.connector.openai.model.CompletionResponse.id"]},{"name":"val id: String","description":"com.river.connector.openai.model.ModelObject.id","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/id.html","searchKeys":["id","val id: String","com.river.connector.openai.model.ModelObject.id"]},{"name":"val id: String","description":"com.river.connector.openai.model.Permission.id","location":"connector/connector-openai/com.river.connector.openai.model/-permission/id.html","searchKeys":["id","val id: String","com.river.connector.openai.model.Permission.id"]},{"name":"val index: Int","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.index","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/--index--.html","searchKeys":["index","val index: Int","com.river.connector.openai.model.ChatCompletionResponse.Choice.index"]},{"name":"val index: Int","description":"com.river.connector.openai.model.CompletionResponse.Choice.index","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-choice/--index--.html","searchKeys":["index","val index: Int","com.river.connector.openai.model.CompletionResponse.Choice.index"]},{"name":"val isBlocking: Boolean","description":"com.river.connector.openai.model.Permission.isBlocking","location":"connector/connector-openai/com.river.connector.openai.model/-permission/is-blocking.html","searchKeys":["isBlocking","val isBlocking: Boolean","com.river.connector.openai.model.Permission.isBlocking"]},{"name":"val logprobs: Int?","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.logprobs","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/logprobs.html","searchKeys":["logprobs","val logprobs: Int?","com.river.connector.openai.model.ChatCompletionResponse.Choice.logprobs"]},{"name":"val logprobs: Int?","description":"com.river.connector.openai.model.CompletionResponse.Choice.logprobs","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-choice/logprobs.html","searchKeys":["logprobs","val logprobs: Int?","com.river.connector.openai.model.CompletionResponse.Choice.logprobs"]},{"name":"val maxTokens: Int = 16","description":"com.river.connector.openai.model.CompletionRequest.maxTokens","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/max-tokens.html","searchKeys":["maxTokens","val maxTokens: Int = 16","com.river.connector.openai.model.CompletionRequest.maxTokens"]},{"name":"val messages: List<ChatCompletionRequest.Message>","description":"com.river.connector.openai.model.ChatCompletionRequest.messages","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/messages.html","searchKeys":["messages","val messages: List<ChatCompletionRequest.Message>","com.river.connector.openai.model.ChatCompletionRequest.messages"]},{"name":"val model: String","description":"com.river.connector.openai.model.ChatCompletionRequest.model","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/model.html","searchKeys":["model","val model: String","com.river.connector.openai.model.ChatCompletionRequest.model"]},{"name":"val model: String","description":"com.river.connector.openai.model.ChatCompletionResponse.model","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/model.html","searchKeys":["model","val model: String","com.river.connector.openai.model.ChatCompletionResponse.model"]},{"name":"val model: String","description":"com.river.connector.openai.model.CompletionRequest.model","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/model.html","searchKeys":["model","val model: String","com.river.connector.openai.model.CompletionRequest.model"]},{"name":"val model: String","description":"com.river.connector.openai.model.CompletionResponse.model","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/model.html","searchKeys":["model","val model: String","com.river.connector.openai.model.CompletionResponse.model"]},{"name":"val name: String? = null","description":"com.river.connector.openai.model.ChatCompletionRequest.Message.name","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/-message/name.html","searchKeys":["name","val name: String? = null","com.river.connector.openai.model.ChatCompletionRequest.Message.name"]},{"name":"val object: String","description":"com.river.connector.openai.model.CompletionResponse.object","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/object.html","searchKeys":["object","val object: String","com.river.connector.openai.model.CompletionResponse.object"]},{"name":"val object: String","description":"com.river.connector.openai.model.Items.object","location":"connector/connector-openai/com.river.connector.openai.model/-items/object.html","searchKeys":["object","val object: String","com.river.connector.openai.model.Items.object"]},{"name":"val object: String","description":"com.river.connector.openai.model.ModelObject.object","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/object.html","searchKeys":["object","val object: String","com.river.connector.openai.model.ModelObject.object"]},{"name":"val object: String","description":"com.river.connector.openai.model.Permission.object","location":"connector/connector-openai/com.river.connector.openai.model/-permission/object.html","searchKeys":["object","val object: String","com.river.connector.openai.model.Permission.object"]},{"name":"val objectType: String?","description":"com.river.connector.openai.model.ChatCompletionResponse.objectType","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/object-type.html","searchKeys":["objectType","val objectType: String?","com.river.connector.openai.model.ChatCompletionResponse.objectType"]},{"name":"val organization: String","description":"com.river.connector.openai.model.Permission.organization","location":"connector/connector-openai/com.river.connector.openai.model/-permission/organization.html","searchKeys":["organization","val organization: String","com.river.connector.openai.model.Permission.organization"]},{"name":"val ownedBy: String","description":"com.river.connector.openai.model.ModelObject.ownedBy","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/owned-by.html","searchKeys":["ownedBy","val ownedBy: String","com.river.connector.openai.model.ModelObject.ownedBy"]},{"name":"val parent: String?","description":"com.river.connector.openai.model.ModelObject.parent","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/parent.html","searchKeys":["parent","val parent: String?","com.river.connector.openai.model.ModelObject.parent"]},{"name":"val permission: List<Permission>","description":"com.river.connector.openai.model.ModelObject.permission","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/permission.html","searchKeys":["permission","val permission: List<Permission>","com.river.connector.openai.model.ModelObject.permission"]},{"name":"val prompt: List<String>","description":"com.river.connector.openai.model.CompletionRequest.prompt","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/prompt.html","searchKeys":["prompt","val prompt: List<String>","com.river.connector.openai.model.CompletionRequest.prompt"]},{"name":"val promptTokens: Int","description":"com.river.connector.openai.model.CompletionResponse.Usage.promptTokens","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-usage/prompt-tokens.html","searchKeys":["promptTokens","val promptTokens: Int","com.river.connector.openai.model.CompletionResponse.Usage.promptTokens"]},{"name":"val role: Role","description":"com.river.connector.openai.model.ChatCompletionRequest.Message.role","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/-message/role.html","searchKeys":["role","val role: Role","com.river.connector.openai.model.ChatCompletionRequest.Message.role"]},{"name":"val role: Role?","description":"com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta.role","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-response/-choice/-delta/role.html","searchKeys":["role","val role: Role?","com.river.connector.openai.model.ChatCompletionResponse.Choice.Delta.role"]},{"name":"val root: String","description":"com.river.connector.openai.model.ModelObject.root","location":"connector/connector-openai/com.river.connector.openai.model/-model-object/root.html","searchKeys":["root","val root: String","com.river.connector.openai.model.ModelObject.root"]},{"name":"val stream: Boolean = true","description":"com.river.connector.openai.model.ChatCompletionRequest.stream","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/stream.html","searchKeys":["stream","val stream: Boolean = true","com.river.connector.openai.model.ChatCompletionRequest.stream"]},{"name":"val stream: Boolean = true","description":"com.river.connector.openai.model.CompletionRequest.stream","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/stream.html","searchKeys":["stream","val stream: Boolean = true","com.river.connector.openai.model.CompletionRequest.stream"]},{"name":"val temperature: Temperature","description":"com.river.connector.openai.model.ChatCompletionRequest.temperature","location":"connector/connector-openai/com.river.connector.openai.model/-chat-completion-request/temperature.html","searchKeys":["temperature","val temperature: Temperature","com.river.connector.openai.model.ChatCompletionRequest.temperature"]},{"name":"val temperature: Temperature","description":"com.river.connector.openai.model.CompletionRequest.temperature","location":"connector/connector-openai/com.river.connector.openai.model/-completion-request/temperature.html","searchKeys":["temperature","val temperature: Temperature","com.river.connector.openai.model.CompletionRequest.temperature"]},{"name":"val text: String","description":"com.river.connector.openai.model.CompletionResponse.Choice.text","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-choice/text.html","searchKeys":["text","val text: String","com.river.connector.openai.model.CompletionResponse.Choice.text"]},{"name":"val totalTokens: Int","description":"com.river.connector.openai.model.CompletionResponse.Usage.totalTokens","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/-usage/total-tokens.html","searchKeys":["totalTokens","val totalTokens: Int","com.river.connector.openai.model.CompletionResponse.Usage.totalTokens"]},{"name":"val usage: CompletionResponse.Usage?","description":"com.river.connector.openai.model.CompletionResponse.usage","location":"connector/connector-openai/com.river.connector.openai.model/-completion-response/usage.html","searchKeys":["usage","val usage: CompletionResponse.Usage?","com.river.connector.openai.model.CompletionResponse.usage"]},{"name":"val value: Double = 1.0","description":"com.river.connector.openai.model.Temperature.value","location":"connector/connector-openai/com.river.connector.openai.model/-temperature/value.html","searchKeys":["value","val value: Double = 1.0","com.river.connector.openai.model.Temperature.value"]},{"name":"abstract suspend fun borrow(): ObjectPool.ObjectHolder<T>","description":"com.river.util.pool.ObjectPool.borrow","location":"utils/pool/com.river.util.pool/-object-pool/borrow.html","searchKeys":["borrow","abstract suspend fun borrow(): ObjectPool.ObjectHolder<T>","com.river.util.pool.ObjectPool.borrow"]},{"name":"abstract suspend fun close()","description":"com.river.util.pool.ObjectPool.close","location":"utils/pool/com.river.util.pool/-object-pool/close.html","searchKeys":["close","abstract suspend fun close()","com.river.util.pool.ObjectPool.close"]},{"name":"abstract suspend fun release(holder: ObjectPool.ObjectHolder<T>)","description":"com.river.util.pool.ObjectPool.release","location":"utils/pool/com.river.util.pool/-object-pool/release.html","searchKeys":["release","abstract suspend fun release(holder: ObjectPool.ObjectHolder<T>)","com.river.util.pool.ObjectPool.release"]},{"name":"class DefaultObjectPool<T>(size: Int, maxDuration: Duration, initial: List<T>, val factory: suspend () -> T, val onClose: suspend (T) -> Unit) : ObjectPool<T> ","description":"com.river.util.pool.DefaultObjectPool","location":"utils/pool/com.river.util.pool/-default-object-pool/index.html","searchKeys":["DefaultObjectPool","class DefaultObjectPool<T>(size: Int, maxDuration: Duration, initial: List<T>, val factory: suspend () -> T, val onClose: suspend (T) -> Unit) : ObjectPool<T> ","com.river.util.pool.DefaultObjectPool"]},{"name":"class ObjectHolder<T>(val instance: T, val maxDuration: Duration, val createdAt: ZonedDateTime)","description":"com.river.util.pool.ObjectPool.ObjectHolder","location":"utils/pool/com.river.util.pool/-object-pool/-object-holder/index.html","searchKeys":["ObjectHolder","class ObjectHolder<T>(val instance: T, val maxDuration: Duration, val createdAt: ZonedDateTime)","com.river.util.pool.ObjectPool.ObjectHolder"]},{"name":"constructor(instance: T, maxDuration: Duration, createdAt: ZonedDateTime)","description":"com.river.util.pool.ObjectPool.ObjectHolder.ObjectHolder","location":"utils/pool/com.river.util.pool/-object-pool/-object-holder/-object-holder.html","searchKeys":["ObjectHolder","constructor(instance: T, maxDuration: Duration, createdAt: ZonedDateTime)","com.river.util.pool.ObjectPool.ObjectHolder.ObjectHolder"]},{"name":"constructor(size: Int, maxDuration: Duration, initial: List<T>, factory: suspend () -> T, onClose: suspend (T) -> Unit)","description":"com.river.util.pool.DefaultObjectPool.DefaultObjectPool","location":"utils/pool/com.river.util.pool/-default-object-pool/-default-object-pool.html","searchKeys":["DefaultObjectPool","constructor(size: Int, maxDuration: Duration, initial: List<T>, factory: suspend () -> T, onClose: suspend (T) -> Unit)","com.river.util.pool.DefaultObjectPool.DefaultObjectPool"]},{"name":"fun <T> sized(maxSize: Int, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","description":"com.river.util.pool.ObjectPool.Companion.sized","location":"utils/pool/com.river.util.pool/-object-pool/-companion/sized.html","searchKeys":["sized","fun <T> sized(maxSize: Int, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","com.river.util.pool.ObjectPool.Companion.sized"]},{"name":"fun shouldBeClosed(): Boolean","description":"com.river.util.pool.ObjectPool.ObjectHolder.shouldBeClosed","location":"utils/pool/com.river.util.pool/-object-pool/-object-holder/should-be-closed.html","searchKeys":["shouldBeClosed","fun shouldBeClosed(): Boolean","com.river.util.pool.ObjectPool.ObjectHolder.shouldBeClosed"]},{"name":"interface ObjectPool<T>","description":"com.river.util.pool.ObjectPool","location":"utils/pool/com.river.util.pool/-object-pool/index.html","searchKeys":["ObjectPool","interface ObjectPool<T>","com.river.util.pool.ObjectPool"]},{"name":"object Companion","description":"com.river.util.pool.ObjectPool.Companion","location":"utils/pool/com.river.util.pool/-object-pool/-companion/index.html","searchKeys":["Companion","object Companion","com.river.util.pool.ObjectPool.Companion"]},{"name":"open suspend fun <R> use(f: suspend (T) -> R): R","description":"com.river.util.pool.ObjectPool.use","location":"utils/pool/com.river.util.pool/-object-pool/use.html","searchKeys":["use","open suspend fun <R> use(f: suspend (T) -> R): R","com.river.util.pool.ObjectPool.use"]},{"name":"open suspend override fun borrow(): ObjectPool.ObjectHolder<T>","description":"com.river.util.pool.DefaultObjectPool.borrow","location":"utils/pool/com.river.util.pool/-default-object-pool/borrow.html","searchKeys":["borrow","open suspend override fun borrow(): ObjectPool.ObjectHolder<T>","com.river.util.pool.DefaultObjectPool.borrow"]},{"name":"open suspend override fun close()","description":"com.river.util.pool.DefaultObjectPool.close","location":"utils/pool/com.river.util.pool/-default-object-pool/close.html","searchKeys":["close","open suspend override fun close()","com.river.util.pool.DefaultObjectPool.close"]},{"name":"open suspend override fun release(holder: ObjectPool.ObjectHolder<T>)","description":"com.river.util.pool.DefaultObjectPool.release","location":"utils/pool/com.river.util.pool/-default-object-pool/release.html","searchKeys":["release","open suspend override fun release(holder: ObjectPool.ObjectHolder<T>)","com.river.util.pool.DefaultObjectPool.release"]},{"name":"suspend fun <T> sized(maxSize: Int, initialSize: Int = 1, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","description":"com.river.util.pool.ObjectPool.Companion.sized","location":"utils/pool/com.river.util.pool/-object-pool/-companion/sized.html","searchKeys":["sized","suspend fun <T> sized(maxSize: Int, initialSize: Int = 1, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","com.river.util.pool.ObjectPool.Companion.sized"]},{"name":"val createdAt: ZonedDateTime","description":"com.river.util.pool.ObjectPool.ObjectHolder.createdAt","location":"utils/pool/com.river.util.pool/-object-pool/-object-holder/created-at.html","searchKeys":["createdAt","val createdAt: ZonedDateTime","com.river.util.pool.ObjectPool.ObjectHolder.createdAt"]},{"name":"val factory: suspend () -> T","description":"com.river.util.pool.DefaultObjectPool.factory","location":"utils/pool/com.river.util.pool/-default-object-pool/factory.html","searchKeys":["factory","val factory: suspend () -> T","com.river.util.pool.DefaultObjectPool.factory"]},{"name":"val instance: T","description":"com.river.util.pool.ObjectPool.ObjectHolder.instance","location":"utils/pool/com.river.util.pool/-object-pool/-object-holder/instance.html","searchKeys":["instance","val instance: T","com.river.util.pool.ObjectPool.ObjectHolder.instance"]},{"name":"val maxDuration: Duration","description":"com.river.util.pool.ObjectPool.ObjectHolder.maxDuration","location":"utils/pool/com.river.util.pool/-object-pool/-object-holder/max-duration.html","searchKeys":["maxDuration","val maxDuration: Duration","com.river.util.pool.ObjectPool.ObjectHolder.maxDuration"]},{"name":"val onClose: suspend (T) -> Unit","description":"com.river.util.pool.DefaultObjectPool.onClose","location":"utils/pool/com.river.util.pool/-default-object-pool/on-close.html","searchKeys":["onClose","val onClose: suspend (T) -> Unit","com.river.util.pool.DefaultObjectPool.onClose"]},{"name":"class RecordBuilder","description":"com.river.connector.format.positional.flat.line.RecordBuilder","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/index.html","searchKeys":["RecordBuilder","class RecordBuilder","com.river.connector.format.positional.flat.line.RecordBuilder"]},{"name":"constructor()","description":"com.river.connector.format.positional.flat.line.RecordBuilder.RecordBuilder","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/-record-builder.html","searchKeys":["RecordBuilder","constructor()","com.river.connector.format.positional.flat.line.RecordBuilder.RecordBuilder"]},{"name":"constructor(fields: Map<String, Field<*>>)","description":"com.river.connector.format.positional.flat.line.RecordDef.RecordDef","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-def/-record-def.html","searchKeys":["RecordDef","constructor(fields: Map<String, Field<*>>)","com.river.connector.format.positional.flat.line.RecordDef.RecordDef"]},{"name":"constructor(name: String, padding: Char, range: IntRange, parser: (String) -> T)","description":"com.river.connector.format.positional.flat.line.Field.Field","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/-field.html","searchKeys":["Field","constructor(name: String, padding: Char, range: IntRange, parser: (String) -> T)","com.river.connector.format.positional.flat.line.Field.Field"]},{"name":"data class Field<T>(val name: String, val padding: Char, val range: IntRange, val parser: (String) -> T)","description":"com.river.connector.format.positional.flat.line.Field","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/index.html","searchKeys":["Field","data class Field<T>(val name: String, val padding: Char, val range: IntRange, val parser: (String) -> T)","com.river.connector.format.positional.flat.line.Field"]},{"name":"data class RecordDef(val fields: Map<String, Field<*>>)","description":"com.river.connector.format.positional.flat.line.RecordDef","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-def/index.html","searchKeys":["RecordDef","data class RecordDef(val fields: Map<String, Field<*>>)","com.river.connector.format.positional.flat.line.RecordDef"]},{"name":"fun <T> Flow<String>.toPositionalFlatLine(mappedAs: (Map<String, Any?>) -> T, record: RecordBuilder.() -> Unit): Flow<T>","description":"com.river.connector.format.positional.flat.line.toPositionalFlatLine","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/to-positional-flat-line.html","searchKeys":["toPositionalFlatLine","fun <T> Flow<String>.toPositionalFlatLine(mappedAs: (Map<String, Any?>) -> T, record: RecordBuilder.() -> Unit): Flow<T>","com.river.connector.format.positional.flat.line.toPositionalFlatLine"]},{"name":"fun <T> Flow<String>.toPositionalFlatLine(record: RecordDef, f: (Map<String, Any?>) -> T): Flow<T>","description":"com.river.connector.format.positional.flat.line.toPositionalFlatLine","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/to-positional-flat-line.html","searchKeys":["toPositionalFlatLine","fun <T> Flow<String>.toPositionalFlatLine(record: RecordDef, f: (Map<String, Any?>) -> T): Flow<T>","com.river.connector.format.positional.flat.line.toPositionalFlatLine"]},{"name":"fun <T> field(field: Field<T>)","description":"com.river.connector.format.positional.flat.line.RecordBuilder.field","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/field.html","searchKeys":["field","fun <T> field(field: Field<T>)","com.river.connector.format.positional.flat.line.RecordBuilder.field"]},{"name":"fun Flow<String>.toPositionalFlatLine(record: RecordBuilder.() -> Unit): Flow<Map<String, Any?>>","description":"com.river.connector.format.positional.flat.line.toPositionalFlatLine","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/to-positional-flat-line.html","searchKeys":["toPositionalFlatLine","fun Flow<String>.toPositionalFlatLine(record: RecordBuilder.() -> Unit): Flow<Map<String, Any?>>","com.river.connector.format.positional.flat.line.toPositionalFlatLine"]},{"name":"fun Flow<String>.toPositionalFlatLine(record: RecordDef): Flow<Map<String, Any?>>","description":"com.river.connector.format.positional.flat.line.toPositionalFlatLine","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/to-positional-flat-line.html","searchKeys":["toPositionalFlatLine","fun Flow<String>.toPositionalFlatLine(record: RecordDef): Flow<Map<String, Any?>>","com.river.connector.format.positional.flat.line.toPositionalFlatLine"]},{"name":"fun build(): RecordDef","description":"com.river.connector.format.positional.flat.line.RecordBuilder.build","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/build.html","searchKeys":["build","fun build(): RecordDef","com.river.connector.format.positional.flat.line.RecordBuilder.build"]},{"name":"fun parse(line: String): Map<String, Any?>","description":"com.river.connector.format.positional.flat.line.RecordDef.parse","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-def/parse.html","searchKeys":["parse","fun parse(line: String): Map<String, Any?>","com.river.connector.format.positional.flat.line.RecordDef.parse"]},{"name":"fun parse(line: String): T","description":"com.river.connector.format.positional.flat.line.Field.parse","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/parse.html","searchKeys":["parse","fun parse(line: String): T","com.river.connector.format.positional.flat.line.Field.parse"]},{"name":"fun record(builder: RecordBuilder.() -> Unit): RecordDef","description":"com.river.connector.format.positional.flat.line.record","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/record.html","searchKeys":["record","fun record(builder: RecordBuilder.() -> Unit): RecordDef","com.river.connector.format.positional.flat.line.record"]},{"name":"infix fun <F, T> Field<F>.mappedAs(p: (F) -> T): Field<T>","description":"com.river.connector.format.positional.flat.line.RecordBuilder.mappedAs","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/mapped-as.html","searchKeys":["mappedAs","infix fun <F, T> Field<F>.mappedAs(p: (F) -> T): Field<T>","com.river.connector.format.positional.flat.line.RecordBuilder.mappedAs"]},{"name":"infix fun <T> Map<String, Any?>.mappedAs(f: (Map<String, Any?>) -> T): T","description":"com.river.connector.format.positional.flat.line.mappedAs","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/mapped-as.html","searchKeys":["mappedAs","infix fun <T> Map<String, Any?>.mappedAs(f: (Map<String, Any?>) -> T): T","com.river.connector.format.positional.flat.line.mappedAs"]},{"name":"infix fun String.from(range: IntRange): Field<String>","description":"com.river.connector.format.positional.flat.line.RecordBuilder.from","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/from.html","searchKeys":["from","infix fun String.from(range: IntRange): Field<String>","com.river.connector.format.positional.flat.line.RecordBuilder.from"]},{"name":"infix fun String.parsedTo(record: RecordDef): Map<String, Any?>","description":"com.river.connector.format.positional.flat.line.parsedTo","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/parsed-to.html","searchKeys":["parsedTo","infix fun String.parsedTo(record: RecordDef): Map<String, Any?>","com.river.connector.format.positional.flat.line.parsedTo"]},{"name":"val boolean: (String) -> Boolean","description":"com.river.connector.format.positional.flat.line.RecordBuilder.boolean","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/boolean.html","searchKeys":["boolean","val boolean: (String) -> Boolean","com.river.connector.format.positional.flat.line.RecordBuilder.boolean"]},{"name":"val fields: Map<String, Field<*>>","description":"com.river.connector.format.positional.flat.line.RecordDef.fields","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-def/fields.html","searchKeys":["fields","val fields: Map<String, Field<*>>","com.river.connector.format.positional.flat.line.RecordDef.fields"]},{"name":"val int: (String) -> Int","description":"com.river.connector.format.positional.flat.line.RecordBuilder.int","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/int.html","searchKeys":["int","val int: (String) -> Int","com.river.connector.format.positional.flat.line.RecordBuilder.int"]},{"name":"val localDate: (String) -> LocalDate","description":"com.river.connector.format.positional.flat.line.RecordBuilder.localDate","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/local-date.html","searchKeys":["localDate","val localDate: (String) -> LocalDate","com.river.connector.format.positional.flat.line.RecordBuilder.localDate"]},{"name":"val long: (String) -> Long","description":"com.river.connector.format.positional.flat.line.RecordBuilder.long","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/long.html","searchKeys":["long","val long: (String) -> Long","com.river.connector.format.positional.flat.line.RecordBuilder.long"]},{"name":"val name: String","description":"com.river.connector.format.positional.flat.line.Field.name","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/name.html","searchKeys":["name","val name: String","com.river.connector.format.positional.flat.line.Field.name"]},{"name":"val padding: Char","description":"com.river.connector.format.positional.flat.line.Field.padding","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/padding.html","searchKeys":["padding","val padding: Char","com.river.connector.format.positional.flat.line.Field.padding"]},{"name":"val parser: (String) -> T","description":"com.river.connector.format.positional.flat.line.Field.parser","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/parser.html","searchKeys":["parser","val parser: (String) -> T","com.river.connector.format.positional.flat.line.Field.parser"]},{"name":"val range: IntRange","description":"com.river.connector.format.positional.flat.line.Field.range","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-field/range.html","searchKeys":["range","val range: IntRange","com.river.connector.format.positional.flat.line.Field.range"]},{"name":"val string: (String) -> String","description":"com.river.connector.format.positional.flat.line.RecordBuilder.string","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/string.html","searchKeys":["string","val string: (String) -> String","com.river.connector.format.positional.flat.line.RecordBuilder.string"]},{"name":"var padding: Char","description":"com.river.connector.format.positional.flat.line.RecordBuilder.padding","location":"connector/connector-format/connector-format-positional-flat-line/com.river.connector.format.positional.flat.line/-record-builder/padding.html","searchKeys":["padding","var padding: Char","com.river.connector.format.positional.flat.line.RecordBuilder.padding"]},{"name":"Drop","description":"com.river.core.ThrottleStrategy.Drop","location":"core/com.river.core/-throttle-strategy/-drop/index.html","searchKeys":["Drop","Drop","com.river.core.ThrottleStrategy.Drop"]},{"name":"Suspend","description":"com.river.core.ThrottleStrategy.Suspend","location":"core/com.river.core/-throttle-strategy/-suspend/index.html","searchKeys":["Suspend","Suspend","com.river.core.ThrottleStrategy.Suspend"]},{"name":"class ConcurrencyStrategy(val initial: ConcurrencyInfo, val increaseStrategy: (ConcurrencyInfo) -> ConcurrencyInfo = { it })","description":"com.river.core.ConcurrencyStrategy","location":"core/com.river.core/-concurrency-strategy/index.html","searchKeys":["ConcurrencyStrategy","class ConcurrencyStrategy(val initial: ConcurrencyInfo, val increaseStrategy: (ConcurrencyInfo) -> ConcurrencyInfo = { it })","com.river.core.ConcurrencyStrategy"]},{"name":"class Count(val size: Int) : GroupStrategy","description":"com.river.core.GroupStrategy.Count","location":"core/com.river.core/-group-strategy/-count/index.html","searchKeys":["Count","class Count(val size: Int) : GroupStrategy","com.river.core.GroupStrategy.Count"]},{"name":"class TimeWindow(val size: Int, val duration: Duration) : GroupStrategy","description":"com.river.core.GroupStrategy.TimeWindow","location":"core/com.river.core/-group-strategy/-time-window/index.html","searchKeys":["TimeWindow","class TimeWindow(val size: Int, val duration: Duration) : GroupStrategy","com.river.core.GroupStrategy.TimeWindow"]},{"name":"constructor(initial: ConcurrencyInfo, increaseStrategy: (ConcurrencyInfo) -> ConcurrencyInfo = { it })","description":"com.river.core.ConcurrencyStrategy.ConcurrencyStrategy","location":"core/com.river.core/-concurrency-strategy/-concurrency-strategy.html","searchKeys":["ConcurrencyStrategy","constructor(initial: ConcurrencyInfo, increaseStrategy: (ConcurrencyInfo) -> ConcurrencyInfo = { it })","com.river.core.ConcurrencyStrategy.ConcurrencyStrategy"]},{"name":"constructor(maximum: Int, current: Int)","description":"com.river.core.ConcurrencyInfo.ConcurrencyInfo","location":"core/com.river.core/-concurrency-info/-concurrency-info.html","searchKeys":["ConcurrencyInfo","constructor(maximum: Int, current: Int)","com.river.core.ConcurrencyInfo.ConcurrencyInfo"]},{"name":"constructor(size: Int)","description":"com.river.core.GroupStrategy.Count.Count","location":"core/com.river.core/-group-strategy/-count/-count.html","searchKeys":["Count","constructor(size: Int)","com.river.core.GroupStrategy.Count.Count"]},{"name":"constructor(size: Int, duration: Duration)","description":"com.river.core.GroupStrategy.TimeWindow.TimeWindow","location":"core/com.river.core/-group-strategy/-time-window/-time-window.html","searchKeys":["TimeWindow","constructor(size: Int, duration: Duration)","com.river.core.GroupStrategy.TimeWindow.TimeWindow"]},{"name":"data class ConcurrencyInfo(val maximum: Int, val current: Int)","description":"com.river.core.ConcurrencyInfo","location":"core/com.river.core/-concurrency-info/index.html","searchKeys":["ConcurrencyInfo","data class ConcurrencyInfo(val maximum: Int, val current: Int)","com.river.core.ConcurrencyInfo"]},{"name":"enum ThrottleStrategy : Enum<ThrottleStrategy> ","description":"com.river.core.ThrottleStrategy","location":"core/com.river.core/-throttle-strategy/index.html","searchKeys":["ThrottleStrategy","enum ThrottleStrategy : Enum<ThrottleStrategy> ","com.river.core.ThrottleStrategy"]},{"name":"fun <E, F, S, T> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, thirdFlowMap: Flow<E>.() -> Flow<T>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Triple<F, S, T>>","description":"com.river.core.broadcast","location":"core/com.river.core/broadcast.html","searchKeys":["broadcast","fun <E, F, S, T> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, thirdFlowMap: Flow<E>.() -> Flow<T>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Triple<F, S, T>>","com.river.core.broadcast"]},{"name":"fun <E, F, S> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Pair<F, S>>","description":"com.river.core.broadcast","location":"core/com.river.core/broadcast.html","searchKeys":["broadcast","fun <E, F, S> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Pair<F, S>>","com.river.core.broadcast"]},{"name":"fun <E, S> Flow<E>.alsoTo(bufferCapacity: Int = Channel.BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null, flow: Flow<E>.() -> Flow<S>): Flow<Pair<E, S>>","description":"com.river.core.alsoTo","location":"core/com.river.core/also-to.html","searchKeys":["alsoTo","fun <E, S> Flow<E>.alsoTo(bufferCapacity: Int = Channel.BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null, flow: Flow<E>.() -> Flow<S>): Flow<Pair<E, S>>","com.river.core.alsoTo"]},{"name":"fun <T, R> Flow<Iterable<T>>.unorderedFlatMapAsync(concurrency: Int, f: suspend (Iterable<T>) -> Iterable<R>): Flow<R>","description":"com.river.core.unorderedFlatMapAsync","location":"core/com.river.core/unordered-flat-map-async.html","searchKeys":["unorderedFlatMapAsync","fun <T, R> Flow<Iterable<T>>.unorderedFlatMapAsync(concurrency: Int, f: suspend (Iterable<T>) -> Iterable<R>): Flow<R>","com.river.core.unorderedFlatMapAsync"]},{"name":"fun <T, R> Flow<T>.flatIterable(f: (T) -> Iterable<R>): Flow<R>","description":"com.river.core.flatIterable","location":"core/com.river.core/flat-iterable.html","searchKeys":["flatIterable","fun <T, R> Flow<T>.flatIterable(f: (T) -> Iterable<R>): Flow<R>","com.river.core.flatIterable"]},{"name":"fun <T, R> Flow<T>.flatMapAsync(concurrency: Int, f: suspend (T) -> Iterable<R>): Flow<R>","description":"com.river.core.flatMapAsync","location":"core/com.river.core/flat-map-async.html","searchKeys":["flatMapAsync","fun <T, R> Flow<T>.flatMapAsync(concurrency: Int, f: suspend (T) -> Iterable<R>): Flow<R>","com.river.core.flatMapAsync"]},{"name":"fun <T, R> Flow<T>.mapAsync(concurrency: Int, transform: suspend (T) -> R): Flow<R>","description":"com.river.core.mapAsync","location":"core/com.river.core/map-async.html","searchKeys":["mapAsync","fun <T, R> Flow<T>.mapAsync(concurrency: Int, transform: suspend (T) -> R): Flow<R>","com.river.core.mapAsync"]},{"name":"fun <T, R> Flow<T>.unorderedMapAsync(concurrency: Int, f: suspend (T) -> R): Flow<R>","description":"com.river.core.unorderedMapAsync","location":"core/com.river.core/unordered-map-async.html","searchKeys":["unorderedMapAsync","fun <T, R> Flow<T>.unorderedMapAsync(concurrency: Int, f: suspend (T) -> R): Flow<R>","com.river.core.unorderedMapAsync"]},{"name":"fun <T, S> pollWithState(initial: S, shouldStop: (S) -> Boolean = { false }, f: suspend (S) -> Pair<S, List<T>>): Flow<T>","description":"com.river.core.pollWithState","location":"core/com.river.core/poll-with-state.html","searchKeys":["pollWithState","fun <T, S> pollWithState(initial: S, shouldStop: (S) -> Boolean = { false }, f: suspend (S) -> Pair<S, List<T>>): Flow<T>","com.river.core.pollWithState"]},{"name":"fun <T> Flow<Iterable<T>>.flatten(): Flow<T>","description":"com.river.core.flatten","location":"core/com.river.core/flatten.html","searchKeys":["flatten","fun <T> Flow<Iterable<T>>.flatten(): Flow<T>","com.river.core.flatten"]},{"name":"fun <T> Flow<T>.broadcast(number: Int, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): List<Flow<T>>","description":"com.river.core.broadcast","location":"core/com.river.core/broadcast.html","searchKeys":["broadcast","fun <T> Flow<T>.broadcast(number: Int, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): List<Flow<T>>","com.river.core.broadcast"]},{"name":"fun <T> Flow<T>.catchAndEmitLast(f: FlowCollector<T>.(Throwable) -> T): Flow<T>","description":"com.river.core.catchAndEmitLast","location":"core/com.river.core/catch-and-emit-last.html","searchKeys":["catchAndEmitLast","fun <T> Flow<T>.catchAndEmitLast(f: FlowCollector<T>.(Throwable) -> T): Flow<T>","com.river.core.catchAndEmitLast"]},{"name":"fun <T> Flow<T>.chunked(size: Int): Flow<List<T>>","description":"com.river.core.chunked","location":"core/com.river.core/chunked.html","searchKeys":["chunked","fun <T> Flow<T>.chunked(size: Int): Flow<List<T>>","com.river.core.chunked"]},{"name":"fun <T> Flow<T>.chunked(size: Int, duration: Duration): Flow<List<T>>","description":"com.river.core.chunked","location":"core/com.river.core/chunked.html","searchKeys":["chunked","fun <T> Flow<T>.chunked(size: Int, duration: Duration): Flow<List<T>>","com.river.core.chunked"]},{"name":"fun <T> Flow<T>.chunked(strategy: GroupStrategy): Flow<List<T>>","description":"com.river.core.chunked","location":"core/com.river.core/chunked.html","searchKeys":["chunked","fun <T> Flow<T>.chunked(strategy: GroupStrategy): Flow<List<T>>","com.river.core.chunked"]},{"name":"fun <T> Flow<T>.delay(duration: Duration): Flow<T>","description":"com.river.core.delay","location":"core/com.river.core/delay.html","searchKeys":["delay","fun <T> Flow<T>.delay(duration: Duration): Flow<T>","com.river.core.delay"]},{"name":"fun <T> Flow<T>.earlyCompleteIf(stopPredicate: suspend (T) -> Boolean): Flow<T>","description":"com.river.core.earlyCompleteIf","location":"core/com.river.core/early-complete-if.html","searchKeys":["earlyCompleteIf","fun <T> Flow<T>.earlyCompleteIf(stopPredicate: suspend (T) -> Boolean): Flow<T>","com.river.core.earlyCompleteIf"]},{"name":"fun <T> Flow<T>.intersperse(between: T): Flow<T>","description":"com.river.core.intersperse","location":"core/com.river.core/intersperse.html","searchKeys":["intersperse","fun <T> Flow<T>.intersperse(between: T): Flow<T>","com.river.core.intersperse"]},{"name":"fun <T> Flow<T>.intersperse(start: T? = null, between: T, end: T? = null): Flow<T>","description":"com.river.core.intersperse","location":"core/com.river.core/intersperse.html","searchKeys":["intersperse","fun <T> Flow<T>.intersperse(start: T? = null, between: T, end: T? = null): Flow<T>","com.river.core.intersperse"]},{"name":"fun <T> Flow<T>.launchCollect(collector: FlowCollector<T> = FlowCollector { }): Job","description":"com.river.core.launchCollect","location":"core/com.river.core/launch-collect.html","searchKeys":["launchCollect","fun <T> Flow<T>.launchCollect(collector: FlowCollector<T> = FlowCollector { }): Job","com.river.core.launchCollect"]},{"name":"fun <T> Flow<T>.launchCollect(scope: CoroutineScope = CoroutineScope(Dispatchers.Default), collector: FlowCollector<T> = FlowCollector { }): Job","description":"com.river.core.launchCollect","location":"core/com.river.core/launch-collect.html","searchKeys":["launchCollect","fun <T> Flow<T>.launchCollect(scope: CoroutineScope = CoroutineScope(Dispatchers.Default), collector: FlowCollector<T> = FlowCollector { }): Job","com.river.core.launchCollect"]},{"name":"fun <T> Flow<T>.split(size: Int): Flow<Flow<T>>","description":"com.river.core.split","location":"core/com.river.core/split.html","searchKeys":["split","fun <T> Flow<T>.split(size: Int): Flow<Flow<T>>","com.river.core.split"]},{"name":"fun <T> Flow<T>.split(size: Int, duration: Duration): Flow<Flow<T>>","description":"com.river.core.split","location":"core/com.river.core/split.html","searchKeys":["split","fun <T> Flow<T>.split(size: Int, duration: Duration): Flow<Flow<T>>","com.river.core.split"]},{"name":"fun <T> Flow<T>.split(strategy: GroupStrategy): Flow<Flow<T>>","description":"com.river.core.split","location":"core/com.river.core/split.html","searchKeys":["split","fun <T> Flow<T>.split(strategy: GroupStrategy): Flow<Flow<T>>","com.river.core.split"]},{"name":"fun <T> Flow<T>.throttle(elementsPerInterval: Int, interval: Duration, strategy: ThrottleStrategy = ThrottleStrategy.Suspend): Flow<T>","description":"com.river.core.throttle","location":"core/com.river.core/throttle.html","searchKeys":["throttle","fun <T> Flow<T>.throttle(elementsPerInterval: Int, interval: Duration, strategy: ThrottleStrategy = ThrottleStrategy.Suspend): Flow<T>","com.river.core.throttle"]},{"name":"fun <T> Flow<T>.timeout(duration: Duration): Flow<T>","description":"com.river.core.timeout","location":"core/com.river.core/timeout.html","searchKeys":["timeout","fun <T> Flow<T>.timeout(duration: Duration): Flow<T>","com.river.core.timeout"]},{"name":"fun <T> flowOf(item: suspend () -> T): Flow<T>","description":"com.river.core.flowOf","location":"core/com.river.core/flow-of.html","searchKeys":["flowOf","fun <T> flowOf(item: suspend () -> T): Flow<T>","com.river.core.flowOf"]},{"name":"fun <T> indefinitelyRepeat(item: T): Flow<T>","description":"com.river.core.indefinitelyRepeat","location":"core/com.river.core/indefinitely-repeat.html","searchKeys":["indefinitelyRepeat","fun <T> indefinitelyRepeat(item: T): Flow<T>","com.river.core.indefinitelyRepeat"]},{"name":"fun <T> poll(concurrency: ConcurrencyStrategy = ConcurrencyStrategy.disabled, stopOnEmptyList: Boolean = false, f: suspend ConcurrencyInfo.() -> List<T>): Flow<T>","description":"com.river.core.poll","location":"core/com.river.core/poll.html","searchKeys":["poll","fun <T> poll(concurrency: ConcurrencyStrategy = ConcurrencyStrategy.disabled, stopOnEmptyList: Boolean = false, f: suspend ConcurrencyInfo.() -> List<T>): Flow<T>","com.river.core.poll"]},{"name":"fun <T> promiseFlow(f: suspend (CompletableDeferred<Flow<T>>) -> Unit): Flow<T>","description":"com.river.core.promiseFlow","location":"core/com.river.core/promise-flow.html","searchKeys":["promiseFlow","fun <T> promiseFlow(f: suspend (CompletableDeferred<Flow<T>>) -> Unit): Flow<T>","com.river.core.promiseFlow"]},{"name":"fun <T> stoppableFlow(block: suspend StoppableFlowCollector<T>.() -> Unit): Flow<T>","description":"com.river.core.stoppableFlow","location":"core/com.river.core/stoppable-flow.html","searchKeys":["stoppableFlow","fun <T> stoppableFlow(block: suspend StoppableFlowCollector<T>.() -> Unit): Flow<T>","com.river.core.stoppableFlow"]},{"name":"fun CoroutineScope.tick(intervalDuration: Duration, f: suspend () -> Unit): Job","description":"com.river.core.tick","location":"core/com.river.core/tick.html","searchKeys":["tick","fun CoroutineScope.tick(intervalDuration: Duration, f: suspend () -> Unit): Job","com.river.core.tick"]},{"name":"fun Flow<Byte>.asByteArray(groupStrategy: GroupStrategy = GroupStrategy.Count(8)): Flow<ByteArray>","description":"com.river.core.asByteArray","location":"core/com.river.core/as-byte-array.html","searchKeys":["asByteArray","fun Flow<Byte>.asByteArray(groupStrategy: GroupStrategy = GroupStrategy.Count(8)): Flow<ByteArray>","com.river.core.asByteArray"]},{"name":"fun Flow<Byte>.asString(charset: Charset = Charset.defaultCharset()): Flow<String>","description":"com.river.core.asString","location":"core/com.river.core/as-string.html","searchKeys":["asString","fun Flow<Byte>.asString(charset: Charset = Charset.defaultCharset()): Flow<String>","com.river.core.asString"]},{"name":"fun Flow<ByteArray>.asByteBuffer(): Flow<ByteBuffer>","description":"com.river.core.asByteBuffer","location":"core/com.river.core/as-byte-buffer.html","searchKeys":["asByteBuffer","fun Flow<ByteArray>.asByteBuffer(): Flow<ByteBuffer>","com.river.core.asByteBuffer"]},{"name":"fun Flow<ByteArray>.asString(charset: Charset = Charset.defaultCharset()): Flow<String>","description":"com.river.core.asString","location":"core/com.river.core/as-string.html","searchKeys":["asString","fun Flow<ByteArray>.asString(charset: Charset = Charset.defaultCharset()): Flow<String>","com.river.core.asString"]},{"name":"fun Flow<ByteBuffer>.asByteArray(): Flow<ByteArray>","description":"com.river.core.asByteArray","location":"core/com.river.core/as-byte-array.html","searchKeys":["asByteArray","fun Flow<ByteBuffer>.asByteArray(): Flow<ByteArray>","com.river.core.asByteArray"]},{"name":"fun Flow<List<ByteBuffer>>.flattenAsByteArray(): Flow<ByteArray>","description":"com.river.core.flattenAsByteArray","location":"core/com.river.core/flatten-as-byte-array.html","searchKeys":["flattenAsByteArray","fun Flow<List<ByteBuffer>>.flattenAsByteArray(): Flow<ByteArray>","com.river.core.flattenAsByteArray"]},{"name":"fun Flow<String>.asByteArray(charset: Charset = Charset.defaultCharset()): Flow<ByteArray>","description":"com.river.core.asByteArray","location":"core/com.river.core/as-byte-array.html","searchKeys":["asByteArray","fun Flow<String>.asByteArray(charset: Charset = Charset.defaultCharset()): Flow<ByteArray>","com.river.core.asByteArray"]},{"name":"fun Flow<String>.asByteBuffer(charset: Charset = Charset.defaultCharset()): Flow<ByteBuffer>","description":"com.river.core.asByteBuffer","location":"core/com.river.core/as-byte-buffer.html","searchKeys":["asByteBuffer","fun Flow<String>.asByteBuffer(charset: Charset = Charset.defaultCharset()): Flow<ByteBuffer>","com.river.core.asByteBuffer"]},{"name":"fun Flow<String>.asBytes(charset: Charset = Charset.defaultCharset()): Flow<Byte>","description":"com.river.core.asBytes","location":"core/com.river.core/as-bytes.html","searchKeys":["asBytes","fun Flow<String>.asBytes(charset: Charset = Charset.defaultCharset()): Flow<Byte>","com.river.core.asBytes"]},{"name":"fun Flow<String>.lines(): Flow<String>","description":"com.river.core.lines","location":"core/com.river.core/lines.html","searchKeys":["lines","fun Flow<String>.lines(): Flow<String>","com.river.core.lines"]},{"name":"fun Flow<String>.splitEvery(delimiter: String): Flow<String>","description":"com.river.core.splitEvery","location":"core/com.river.core/split-every.html","searchKeys":["splitEvery","fun Flow<String>.splitEvery(delimiter: String): Flow<String>","com.river.core.splitEvery"]},{"name":"fun exponential(maximumConcurrency: Int, minimumConcurrency: Int = 1, factor: Int = 2): ConcurrencyStrategy","description":"com.river.core.ConcurrencyStrategy.Companion.exponential","location":"core/com.river.core/-concurrency-strategy/-companion/exponential.html","searchKeys":["exponential","fun exponential(maximumConcurrency: Int, minimumConcurrency: Int = 1, factor: Int = 2): ConcurrencyStrategy","com.river.core.ConcurrencyStrategy.Companion.exponential"]},{"name":"fun fixed(concurrency: Int): ConcurrencyStrategy","description":"com.river.core.ConcurrencyStrategy.Companion.fixed","location":"core/com.river.core/-concurrency-strategy/-companion/fixed.html","searchKeys":["fixed","fun fixed(concurrency: Int): ConcurrencyStrategy","com.river.core.ConcurrencyStrategy.Companion.fixed"]},{"name":"fun increaseBy(maximumConcurrency: Int, minimumConcurrency: Int = 1, factor: (Int) -> Int): ConcurrencyStrategy","description":"com.river.core.ConcurrencyStrategy.Companion.increaseBy","location":"core/com.river.core/-concurrency-strategy/-companion/increase-by.html","searchKeys":["increaseBy","fun increaseBy(maximumConcurrency: Int, minimumConcurrency: Int = 1, factor: (Int) -> Int): ConcurrencyStrategy","com.river.core.ConcurrencyStrategy.Companion.increaseBy"]},{"name":"fun increaseByOne(maximumConcurrency: Int, minimumConcurrency: Int = 1): ConcurrencyStrategy","description":"com.river.core.ConcurrencyStrategy.Companion.increaseByOne","location":"core/com.river.core/-concurrency-strategy/-companion/increase-by-one.html","searchKeys":["increaseByOne","fun increaseByOne(maximumConcurrency: Int, minimumConcurrency: Int = 1): ConcurrencyStrategy","com.river.core.ConcurrencyStrategy.Companion.increaseByOne"]},{"name":"fun maximumAllowedAfterFirstIteration(maximumConcurrency: Int, minimumConcurrency: Int = 1): ConcurrencyStrategy","description":"com.river.core.ConcurrencyStrategy.Companion.maximumAllowedAfterFirstIteration","location":"core/com.river.core/-concurrency-strategy/-companion/maximum-allowed-after-first-iteration.html","searchKeys":["maximumAllowedAfterFirstIteration","fun maximumAllowedAfterFirstIteration(maximumConcurrency: Int, minimumConcurrency: Int = 1): ConcurrencyStrategy","com.river.core.ConcurrencyStrategy.Companion.maximumAllowedAfterFirstIteration"]},{"name":"fun unboundedLongFlow(startAt: Long = 0): Flow<Long>","description":"com.river.core.unboundedLongFlow","location":"core/com.river.core/unbounded-long-flow.html","searchKeys":["unboundedLongFlow","fun unboundedLongFlow(startAt: Long = 0): Flow<Long>","com.river.core.unboundedLongFlow"]},{"name":"fun valueOf(value: String): ThrottleStrategy","description":"com.river.core.ThrottleStrategy.valueOf","location":"core/com.river.core/-throttle-strategy/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ThrottleStrategy","com.river.core.ThrottleStrategy.valueOf"]},{"name":"fun values(): Array<ThrottleStrategy>","description":"com.river.core.ThrottleStrategy.values","location":"core/com.river.core/-throttle-strategy/values.html","searchKeys":["values","fun values(): Array<ThrottleStrategy>","com.river.core.ThrottleStrategy.values"]},{"name":"infix fun <T> List<CompletableDeferred<T>>.completeAll(values: List<T>): Boolean","description":"com.river.core.completeAll","location":"core/com.river.core/complete-all.html","searchKeys":["completeAll","infix fun <T> List<CompletableDeferred<T>>.completeAll(values: List<T>): Boolean","com.river.core.completeAll"]},{"name":"infix fun <T> List<CompletableDeferred<T>>.completeAllWith(result: Result<List<T>>): Boolean","description":"com.river.core.completeAllWith","location":"core/com.river.core/complete-all-with.html","searchKeys":["completeAllWith","infix fun <T> List<CompletableDeferred<T>>.completeAllWith(result: Result<List<T>>): Boolean","com.river.core.completeAllWith"]},{"name":"inline fun <T> Flow<T>.onEachAsync(concurrency: Int, crossinline f: suspend (T) -> Unit): Flow<T>","description":"com.river.core.onEachAsync","location":"core/com.river.core/on-each-async.html","searchKeys":["onEachAsync","inline fun <T> Flow<T>.onEachAsync(concurrency: Int, crossinline f: suspend (T) -> Unit): Flow<T>","com.river.core.onEachAsync"]},{"name":"inline fun <T> Flow<T>.unorderedOnEachAsync(concurrency: Int, crossinline f: suspend (T) -> Unit): Flow<T>","description":"com.river.core.unorderedOnEachAsync","location":"core/com.river.core/unordered-on-each-async.html","searchKeys":["unorderedOnEachAsync","inline fun <T> Flow<T>.unorderedOnEachAsync(concurrency: Int, crossinline f: suspend (T) -> Unit): Flow<T>","com.river.core.unorderedOnEachAsync"]},{"name":"inline suspend fun <T> Flow<T>.collectAsync(concurrency: Int, crossinline f: suspend (T) -> Unit)","description":"com.river.core.collectAsync","location":"core/com.river.core/collect-async.html","searchKeys":["collectAsync","inline suspend fun <T> Flow<T>.collectAsync(concurrency: Int, crossinline f: suspend (T) -> Unit)","com.river.core.collectAsync"]},{"name":"inline suspend fun <T> Flow<T>.unorderedCollectAsync(concurrency: Int, crossinline f: suspend (T) -> Unit)","description":"com.river.core.unorderedCollectAsync","location":"core/com.river.core/unordered-collect-async.html","searchKeys":["unorderedCollectAsync","inline suspend fun <T> Flow<T>.unorderedCollectAsync(concurrency: Int, crossinline f: suspend (T) -> Unit)","com.river.core.unorderedCollectAsync"]},{"name":"interface GroupStrategy","description":"com.river.core.GroupStrategy","location":"core/com.river.core/-group-strategy/index.html","searchKeys":["GroupStrategy","interface GroupStrategy","com.river.core.GroupStrategy"]},{"name":"interface StoppableFlowCollector<T> : FlowCollector<T> ","description":"com.river.core.StoppableFlowCollector","location":"core/com.river.core/-stoppable-flow-collector/index.html","searchKeys":["StoppableFlowCollector","interface StoppableFlowCollector<T> : FlowCollector<T> ","com.river.core.StoppableFlowCollector"]},{"name":"object Companion","description":"com.river.core.ConcurrencyStrategy.Companion","location":"core/com.river.core/-concurrency-strategy/-companion/index.html","searchKeys":["Companion","object Companion","com.river.core.ConcurrencyStrategy.Companion"]},{"name":"object Companion","description":"com.river.core.StoppableFlowCollector.Companion","location":"core/com.river.core/-stoppable-flow-collector/-companion/index.html","searchKeys":["Companion","object Companion","com.river.core.StoppableFlowCollector.Companion"]},{"name":"open suspend fun halt(msg: String = \"cancelling flow\"): Nothing","description":"com.river.core.StoppableFlowCollector.halt","location":"core/com.river.core/-stoppable-flow-collector/halt.html","searchKeys":["halt","open suspend fun halt(msg: String = \"cancelling flow\"): Nothing","com.river.core.StoppableFlowCollector.halt"]},{"name":"operator fun <T, R : T> Flow<T>.plus(other: Flow<R>): Flow<T>","description":"com.river.core.plus","location":"core/com.river.core/plus.html","searchKeys":["plus","operator fun <T, R : T> Flow<T>.plus(other: Flow<R>): Flow<T>","com.river.core.plus"]},{"name":"operator fun <T> invoke(outer: FlowCollector<T>): StoppableFlowCollector<T>","description":"com.river.core.StoppableFlowCollector.Companion.invoke","location":"core/com.river.core/-stoppable-flow-collector/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(outer: FlowCollector<T>): StoppableFlowCollector<T>","com.river.core.StoppableFlowCollector.Companion.invoke"]},{"name":"suspend fun <T, R> Iterable<T>.flatMapAsync(concurrency: Int, f: suspend (T) -> Iterable<R>): List<R>","description":"com.river.core.flatMapAsync","location":"core/com.river.core/flat-map-async.html","searchKeys":["flatMapAsync","suspend fun <T, R> Iterable<T>.flatMapAsync(concurrency: Int, f: suspend (T) -> Iterable<R>): List<R>","com.river.core.flatMapAsync"]},{"name":"suspend fun <T, R> Iterable<T>.flatMapAsync(f: suspend (T) -> Iterable<R>): List<R>","description":"com.river.core.flatMapAsync","location":"core/com.river.core/flat-map-async.html","searchKeys":["flatMapAsync","suspend fun <T, R> Iterable<T>.flatMapAsync(f: suspend (T) -> Iterable<R>): List<R>","com.river.core.flatMapAsync"]},{"name":"suspend fun <T, R> Iterable<T>.mapAsync(concurrency: Int, f: suspend (T) -> R): List<R>","description":"com.river.core.mapAsync","location":"core/com.river.core/map-async.html","searchKeys":["mapAsync","suspend fun <T, R> Iterable<T>.mapAsync(concurrency: Int, f: suspend (T) -> R): List<R>","com.river.core.mapAsync"]},{"name":"suspend fun <T, R> Iterable<T>.mapAsync(f: suspend (T) -> R): List<R>","description":"com.river.core.mapAsync","location":"core/com.river.core/map-async.html","searchKeys":["mapAsync","suspend fun <T, R> Iterable<T>.mapAsync(f: suspend (T) -> R): List<R>","com.river.core.mapAsync"]},{"name":"suspend fun <T> Flow<T>.collectCatching(collector: FlowCollector<T> = FlowCollector { }): Result<Unit>","description":"com.river.core.collectCatching","location":"core/com.river.core/collect-catching.html","searchKeys":["collectCatching","suspend fun <T> Flow<T>.collectCatching(collector: FlowCollector<T> = FlowCollector { }): Result<Unit>","com.river.core.collectCatching"]},{"name":"suspend fun <T> Flow<T>.collectWithTimeout(duration: Duration, collector: FlowCollector<T> = FlowCollector { })","description":"com.river.core.collectWithTimeout","location":"core/com.river.core/collect-with-timeout.html","searchKeys":["collectWithTimeout","suspend fun <T> Flow<T>.collectWithTimeout(duration: Duration, collector: FlowCollector<T> = FlowCollector { })","com.river.core.collectWithTimeout"]},{"name":"suspend fun <T> Flow<T>.countOnWindow(duration: Duration): Int","description":"com.river.core.countOnWindow","location":"core/com.river.core/count-on-window.html","searchKeys":["countOnWindow","suspend fun <T> Flow<T>.countOnWindow(duration: Duration): Int","com.river.core.countOnWindow"]},{"name":"suspend fun <T> Flow<T>.joinToString(between: String, f: suspend (T) -> String): String","description":"com.river.core.joinToString","location":"core/com.river.core/join-to-string.html","searchKeys":["joinToString","suspend fun <T> Flow<T>.joinToString(between: String, f: suspend (T) -> String): String","com.river.core.joinToString"]},{"name":"suspend fun <T> Flow<T>.joinToString(f: suspend (T) -> String = { it.toString() }): String","description":"com.river.core.joinToString","location":"core/com.river.core/join-to-string.html","searchKeys":["joinToString","suspend fun <T> Flow<T>.joinToString(f: suspend (T) -> String = { it.toString() }): String","com.river.core.joinToString"]},{"name":"suspend fun <T> Flow<T>.joinToString(start: String, between: String, end: String, f: suspend (T) -> String): String","description":"com.river.core.joinToString","location":"core/com.river.core/join-to-string.html","searchKeys":["joinToString","suspend fun <T> Flow<T>.joinToString(start: String, between: String, end: String, f: suspend (T) -> String): String","com.river.core.joinToString"]},{"name":"suspend fun <T> Flow<T>.toList(size: Int): List<T>","description":"com.river.core.toList","location":"core/com.river.core/to-list.html","searchKeys":["toList","suspend fun <T> Flow<T>.toList(size: Int): List<T>","com.river.core.toList"]},{"name":"suspend fun <T> Flow<T>.toList(size: Int, duration: Duration): List<T>","description":"com.river.core.toList","location":"core/com.river.core/to-list.html","searchKeys":["toList","suspend fun <T> Flow<T>.toList(size: Int, duration: Duration): List<T>","com.river.core.toList"]},{"name":"suspend fun <T> withPromise(f: suspend (CompletableDeferred<T>) -> Unit): T","description":"com.river.core.withPromise","location":"core/com.river.core/with-promise.html","searchKeys":["withPromise","suspend fun <T> withPromise(f: suspend (CompletableDeferred<T>) -> Unit): T","com.river.core.withPromise"]},{"name":"suspend fun Flow<BigDecimal>.sum(): BigDecimal","description":"com.river.core.sum","location":"core/com.river.core/sum.html","searchKeys":["sum","suspend fun Flow<BigDecimal>.sum(): BigDecimal","com.river.core.sum"]},{"name":"suspend fun Flow<Int>.sum(): Long","description":"com.river.core.sum","location":"core/com.river.core/sum.html","searchKeys":["sum","suspend fun Flow<Int>.sum(): Long","com.river.core.sum"]},{"name":"suspend fun Flow<Long>.sum(): Long","description":"com.river.core.sum","location":"core/com.river.core/sum.html","searchKeys":["sum","suspend fun Flow<Long>.sum(): Long","com.river.core.sum"]},{"name":"val current: Int","description":"com.river.core.ConcurrencyInfo.current","location":"core/com.river.core/-concurrency-info/current.html","searchKeys":["current","val current: Int","com.river.core.ConcurrencyInfo.current"]},{"name":"val disabled: ConcurrencyStrategy","description":"com.river.core.ConcurrencyStrategy.Companion.disabled","location":"core/com.river.core/-concurrency-strategy/-companion/disabled.html","searchKeys":["disabled","val disabled: ConcurrencyStrategy","com.river.core.ConcurrencyStrategy.Companion.disabled"]},{"name":"val duration: Duration","description":"com.river.core.GroupStrategy.TimeWindow.duration","location":"core/com.river.core/-group-strategy/-time-window/duration.html","searchKeys":["duration","val duration: Duration","com.river.core.GroupStrategy.TimeWindow.duration"]},{"name":"val increaseStrategy: (ConcurrencyInfo) -> ConcurrencyInfo","description":"com.river.core.ConcurrencyStrategy.increaseStrategy","location":"core/com.river.core/-concurrency-strategy/increase-strategy.html","searchKeys":["increaseStrategy","val increaseStrategy: (ConcurrencyInfo) -> ConcurrencyInfo","com.river.core.ConcurrencyStrategy.increaseStrategy"]},{"name":"val initial: ConcurrencyInfo","description":"com.river.core.ConcurrencyStrategy.initial","location":"core/com.river.core/-concurrency-strategy/initial.html","searchKeys":["initial","val initial: ConcurrencyInfo","com.river.core.ConcurrencyStrategy.initial"]},{"name":"val maximum: Int","description":"com.river.core.ConcurrencyInfo.maximum","location":"core/com.river.core/-concurrency-info/maximum.html","searchKeys":["maximum","val maximum: Int","com.river.core.ConcurrencyInfo.maximum"]},{"name":"val size: Int","description":"com.river.core.GroupStrategy.Count.size","location":"core/com.river.core/-group-strategy/-count/size.html","searchKeys":["size","val size: Int","com.river.core.GroupStrategy.Count.size"]},{"name":"val size: Int","description":"com.river.core.GroupStrategy.TimeWindow.size","location":"core/com.river.core/-group-strategy/-time-window/size.html","searchKeys":["size","val size: Int","com.river.core.GroupStrategy.TimeWindow.size"]},{"name":"fun <T> Flow<T>.asSendEmailRequest(f: SendEmailRequest.Builder.(T) -> Unit): Flow<SendEmailRequest>","description":"com.river.connector.aws.sqs.asSendEmailRequest","location":"connector/connector-aws/connector-aws-ses/com.river.connector.aws.sqs/as-send-email-request.html","searchKeys":["asSendEmailRequest","fun <T> Flow<T>.asSendEmailRequest(f: SendEmailRequest.Builder.(T) -> Unit): Flow<SendEmailRequest>","com.river.connector.aws.sqs.asSendEmailRequest"]},{"name":"fun SesV2AsyncClient.sendEmailFlow(upstream: Flow<SendEmailRequest>, concurrency: Int = 1): Flow<SendEmailResponse>","description":"com.river.connector.aws.sqs.sendEmailFlow","location":"connector/connector-aws/connector-aws-ses/com.river.connector.aws.sqs/send-email-flow.html","searchKeys":["sendEmailFlow","fun SesV2AsyncClient.sendEmailFlow(upstream: Flow<SendEmailRequest>, concurrency: Int = 1): Flow<SendEmailResponse>","com.river.connector.aws.sqs.sendEmailFlow"]},{"name":"fun <T> Flow<String>.parseCsv(delimiter: String = \";\", f: (List<String>) -> T): Flow<T>","description":"com.river.connector.format.csv.parseCsv","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/parse-csv.html","searchKeys":["parseCsv","fun <T> Flow<String>.parseCsv(delimiter: String = \";\", f: (List<String>) -> T): Flow<T>","com.river.connector.format.csv.parseCsv"]},{"name":"fun <T> Flow<String>.parseCsvWithHeaders(delimiter: String = \";\", f: (Map<String, String>) -> T): Flow<T>","description":"com.river.connector.format.csv.parseCsvWithHeaders","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/parse-csv-with-headers.html","searchKeys":["parseCsvWithHeaders","fun <T> Flow<String>.parseCsvWithHeaders(delimiter: String = \";\", f: (Map<String, String>) -> T): Flow<T>","com.river.connector.format.csv.parseCsvWithHeaders"]},{"name":"fun <T> Flow<T>.rawCsv(headers: List<String>, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","description":"com.river.connector.format.csv.rawCsv","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/raw-csv.html","searchKeys":["rawCsv","fun <T> Flow<T>.rawCsv(headers: List<String>, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","com.river.connector.format.csv.rawCsv"]},{"name":"fun <T> Flow<T>.rawCsv(vararg headers: String, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","description":"com.river.connector.format.csv.rawCsv","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/raw-csv.html","searchKeys":["rawCsv","fun <T> Flow<T>.rawCsv(vararg headers: String, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","com.river.connector.format.csv.rawCsv"]},{"name":"fun Flow<String>.parseCsv(delimiter: String = \";\"): Flow<List<String>>","description":"com.river.connector.format.csv.parseCsv","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/parse-csv.html","searchKeys":["parseCsv","fun Flow<String>.parseCsv(delimiter: String = \";\"): Flow<List<String>>","com.river.connector.format.csv.parseCsv"]},{"name":"fun Flow<String>.parseCsvWithHeaders(delimiter: String = \";\"): Flow<Map<String, String>>","description":"com.river.connector.format.csv.parseCsvWithHeaders","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/parse-csv-with-headers.html","searchKeys":["parseCsvWithHeaders","fun Flow<String>.parseCsvWithHeaders(delimiter: String = \";\"): Flow<Map<String, String>>","com.river.connector.format.csv.parseCsvWithHeaders"]},{"name":"inline fun <T> Flow<T>.csv(appendHeader: Boolean = true, delimiter: String = \";\"): Flow<String>","description":"com.river.connector.format.csv.csv","location":"connector/connector-format/connector-format-csv/com.river.connector.format.csv/csv.html","searchKeys":["csv","inline fun <T> Flow<T>.csv(appendHeader: Boolean = true, delimiter: String = \";\"): Flow<String>","com.river.connector.format.csv.csv"]},{"name":"ALL","description":"com.river.connector.github.model.query.IssueQuery.Filter.ALL","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/-a-l-l/index.html","searchKeys":["ALL","ALL","com.river.connector.github.model.query.IssueQuery.Filter.ALL"]},{"name":"ALL","description":"com.river.connector.github.model.query.IssueQuery.State.ALL","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-state/-a-l-l/index.html","searchKeys":["ALL","ALL","com.river.connector.github.model.query.IssueQuery.State.ALL"]},{"name":"ALL","description":"com.river.connector.github.model.query.PullRequestQuery.State.ALL","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-state/-a-l-l/index.html","searchKeys":["ALL","ALL","com.river.connector.github.model.query.PullRequestQuery.State.ALL"]},{"name":"ALL","description":"com.river.connector.github.model.query.RepositoryIssueQuery.State.ALL","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-state/-a-l-l/index.html","searchKeys":["ALL","ALL","com.river.connector.github.model.query.RepositoryIssueQuery.State.ALL"]},{"name":"ALL","description":"com.river.connector.github.model.query.RepositoryQuery.Type.ALL","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/-a-l-l/index.html","searchKeys":["ALL","ALL","com.river.connector.github.model.query.RepositoryQuery.Type.ALL"]},{"name":"ASC","description":"com.river.connector.github.model.query.IssueQuery.Direction.ASC","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-direction/-a-s-c/index.html","searchKeys":["ASC","ASC","com.river.connector.github.model.query.IssueQuery.Direction.ASC"]},{"name":"ASC","description":"com.river.connector.github.model.query.PullRequestQuery.Direction.ASC","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-direction/-a-s-c/index.html","searchKeys":["ASC","ASC","com.river.connector.github.model.query.PullRequestQuery.Direction.ASC"]},{"name":"ASC","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Direction.ASC","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-direction/-a-s-c/index.html","searchKeys":["ASC","ASC","com.river.connector.github.model.query.RepositoryIssueQuery.Direction.ASC"]},{"name":"ASC","description":"com.river.connector.github.model.query.RepositoryQuery.Direction.ASC","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-direction/-a-s-c/index.html","searchKeys":["ASC","ASC","com.river.connector.github.model.query.RepositoryQuery.Direction.ASC"]},{"name":"ASSIGNED","description":"com.river.connector.github.model.query.IssueQuery.Filter.ASSIGNED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/-a-s-s-i-g-n-e-d/index.html","searchKeys":["ASSIGNED","ASSIGNED","com.river.connector.github.model.query.IssueQuery.Filter.ASSIGNED"]},{"name":"BASE64","description":"com.river.connector.github.model.BlobContent.Encoding.BASE64","location":"connector/connector-github/com.river.connector.github.model/-blob-content/-encoding/-b-a-s-e64/index.html","searchKeys":["BASE64","BASE64","com.river.connector.github.model.BlobContent.Encoding.BASE64"]},{"name":"CLOSED","description":"com.river.connector.github.model.query.IssueQuery.State.CLOSED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-state/-c-l-o-s-e-d/index.html","searchKeys":["CLOSED","CLOSED","com.river.connector.github.model.query.IssueQuery.State.CLOSED"]},{"name":"CLOSED","description":"com.river.connector.github.model.query.PullRequestQuery.State.CLOSED","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-state/-c-l-o-s-e-d/index.html","searchKeys":["CLOSED","CLOSED","com.river.connector.github.model.query.PullRequestQuery.State.CLOSED"]},{"name":"CLOSED","description":"com.river.connector.github.model.query.RepositoryIssueQuery.State.CLOSED","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-state/-c-l-o-s-e-d/index.html","searchKeys":["CLOSED","CLOSED","com.river.connector.github.model.query.RepositoryIssueQuery.State.CLOSED"]},{"name":"COMMENTS","description":"com.river.connector.github.model.query.IssueQuery.Sort.COMMENTS","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-sort/-c-o-m-m-e-n-t-s/index.html","searchKeys":["COMMENTS","COMMENTS","com.river.connector.github.model.query.IssueQuery.Sort.COMMENTS"]},{"name":"COMMENTS","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Sort.COMMENTS","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-sort/-c-o-m-m-e-n-t-s/index.html","searchKeys":["COMMENTS","COMMENTS","com.river.connector.github.model.query.RepositoryIssueQuery.Sort.COMMENTS"]},{"name":"CREATED","description":"com.river.connector.github.model.query.IssueQuery.Filter.CREATED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","com.river.connector.github.model.query.IssueQuery.Filter.CREATED"]},{"name":"CREATED","description":"com.river.connector.github.model.query.IssueQuery.Sort.CREATED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-sort/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","com.river.connector.github.model.query.IssueQuery.Sort.CREATED"]},{"name":"CREATED","description":"com.river.connector.github.model.query.PullRequestQuery.Sort.CREATED","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","com.river.connector.github.model.query.PullRequestQuery.Sort.CREATED"]},{"name":"CREATED","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Sort.CREATED","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-sort/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","com.river.connector.github.model.query.RepositoryIssueQuery.Sort.CREATED"]},{"name":"CREATED","description":"com.river.connector.github.model.query.RepositoryQuery.Sort.CREATED","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","com.river.connector.github.model.query.RepositoryQuery.Sort.CREATED"]},{"name":"DESC","description":"com.river.connector.github.model.query.IssueQuery.Direction.DESC","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-direction/-d-e-s-c/index.html","searchKeys":["DESC","DESC","com.river.connector.github.model.query.IssueQuery.Direction.DESC"]},{"name":"DESC","description":"com.river.connector.github.model.query.PullRequestQuery.Direction.DESC","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-direction/-d-e-s-c/index.html","searchKeys":["DESC","DESC","com.river.connector.github.model.query.PullRequestQuery.Direction.DESC"]},{"name":"DESC","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Direction.DESC","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-direction/-d-e-s-c/index.html","searchKeys":["DESC","DESC","com.river.connector.github.model.query.RepositoryIssueQuery.Direction.DESC"]},{"name":"DESC","description":"com.river.connector.github.model.query.RepositoryQuery.Direction.DESC","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-direction/-d-e-s-c/index.html","searchKeys":["DESC","DESC","com.river.connector.github.model.query.RepositoryQuery.Direction.DESC"]},{"name":"FORKS","description":"com.river.connector.github.model.query.RepositoryQuery.Type.FORKS","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/-f-o-r-k-s/index.html","searchKeys":["FORKS","FORKS","com.river.connector.github.model.query.RepositoryQuery.Type.FORKS"]},{"name":"FULL_NAME","description":"com.river.connector.github.model.query.RepositoryQuery.Sort.FULL_NAME","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/-f-u-l-l_-n-a-m-e/index.html","searchKeys":["FULL_NAME","FULL_NAME","com.river.connector.github.model.query.RepositoryQuery.Sort.FULL_NAME"]},{"name":"LONG_RUNNING","description":"com.river.connector.github.model.query.PullRequestQuery.Sort.LONG_RUNNING","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/-l-o-n-g_-r-u-n-n-i-n-g/index.html","searchKeys":["LONG_RUNNING","LONG_RUNNING","com.river.connector.github.model.query.PullRequestQuery.Sort.LONG_RUNNING"]},{"name":"MEMBER","description":"com.river.connector.github.model.query.RepositoryQuery.Type.MEMBER","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/-m-e-m-b-e-r/index.html","searchKeys":["MEMBER","MEMBER","com.river.connector.github.model.query.RepositoryQuery.Type.MEMBER"]},{"name":"MENTIONED","description":"com.river.connector.github.model.query.IssueQuery.Filter.MENTIONED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/-m-e-n-t-i-o-n-e-d/index.html","searchKeys":["MENTIONED","MENTIONED","com.river.connector.github.model.query.IssueQuery.Filter.MENTIONED"]},{"name":"OPEN","description":"com.river.connector.github.model.query.IssueQuery.State.OPEN","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-state/-o-p-e-n/index.html","searchKeys":["OPEN","OPEN","com.river.connector.github.model.query.IssueQuery.State.OPEN"]},{"name":"OPEN","description":"com.river.connector.github.model.query.PullRequestQuery.State.OPEN","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-state/-o-p-e-n/index.html","searchKeys":["OPEN","OPEN","com.river.connector.github.model.query.PullRequestQuery.State.OPEN"]},{"name":"OPEN","description":"com.river.connector.github.model.query.RepositoryIssueQuery.State.OPEN","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-state/-o-p-e-n/index.html","searchKeys":["OPEN","OPEN","com.river.connector.github.model.query.RepositoryIssueQuery.State.OPEN"]},{"name":"POPULARITY","description":"com.river.connector.github.model.query.PullRequestQuery.Sort.POPULARITY","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/-p-o-p-u-l-a-r-i-t-y/index.html","searchKeys":["POPULARITY","POPULARITY","com.river.connector.github.model.query.PullRequestQuery.Sort.POPULARITY"]},{"name":"PRIVATE","description":"com.river.connector.github.model.query.RepositoryQuery.Type.PRIVATE","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/-p-r-i-v-a-t-e/index.html","searchKeys":["PRIVATE","PRIVATE","com.river.connector.github.model.query.RepositoryQuery.Type.PRIVATE"]},{"name":"PUBLIC","description":"com.river.connector.github.model.query.RepositoryQuery.Type.PUBLIC","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/-p-u-b-l-i-c/index.html","searchKeys":["PUBLIC","PUBLIC","com.river.connector.github.model.query.RepositoryQuery.Type.PUBLIC"]},{"name":"PUSHED","description":"com.river.connector.github.model.query.RepositoryQuery.Sort.PUSHED","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/-p-u-s-h-e-d/index.html","searchKeys":["PUSHED","PUSHED","com.river.connector.github.model.query.RepositoryQuery.Sort.PUSHED"]},{"name":"REPOS","description":"com.river.connector.github.model.query.IssueQuery.Filter.REPOS","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/-r-e-p-o-s/index.html","searchKeys":["REPOS","REPOS","com.river.connector.github.model.query.IssueQuery.Filter.REPOS"]},{"name":"SOURCES","description":"com.river.connector.github.model.query.RepositoryQuery.Type.SOURCES","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/-s-o-u-r-c-e-s/index.html","searchKeys":["SOURCES","SOURCES","com.river.connector.github.model.query.RepositoryQuery.Type.SOURCES"]},{"name":"SUBSCRIBED","description":"com.river.connector.github.model.query.IssueQuery.Filter.SUBSCRIBED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/-s-u-b-s-c-r-i-b-e-d/index.html","searchKeys":["SUBSCRIBED","SUBSCRIBED","com.river.connector.github.model.query.IssueQuery.Filter.SUBSCRIBED"]},{"name":"TAR","description":"com.river.connector.github.model.CompressionType.TAR","location":"connector/connector-github/com.river.connector.github.model/-compression-type/-t-a-r/index.html","searchKeys":["TAR","TAR","com.river.connector.github.model.CompressionType.TAR"]},{"name":"UPDATED","description":"com.river.connector.github.model.query.IssueQuery.Sort.UPDATED","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-sort/-u-p-d-a-t-e-d/index.html","searchKeys":["UPDATED","UPDATED","com.river.connector.github.model.query.IssueQuery.Sort.UPDATED"]},{"name":"UPDATED","description":"com.river.connector.github.model.query.PullRequestQuery.Sort.UPDATED","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/-u-p-d-a-t-e-d/index.html","searchKeys":["UPDATED","UPDATED","com.river.connector.github.model.query.PullRequestQuery.Sort.UPDATED"]},{"name":"UPDATED","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Sort.UPDATED","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-sort/-u-p-d-a-t-e-d/index.html","searchKeys":["UPDATED","UPDATED","com.river.connector.github.model.query.RepositoryIssueQuery.Sort.UPDATED"]},{"name":"UPDATED","description":"com.river.connector.github.model.query.RepositoryQuery.Sort.UPDATED","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/-u-p-d-a-t-e-d/index.html","searchKeys":["UPDATED","UPDATED","com.river.connector.github.model.query.RepositoryQuery.Sort.UPDATED"]},{"name":"UTF-8","description":"com.river.connector.github.model.BlobContent.Encoding.UTF-8","location":"connector/connector-github/com.river.connector.github.model/-blob-content/-encoding/-u-t-f-8/index.html","searchKeys":["UTF-8","UTF-8","com.river.connector.github.model.BlobContent.Encoding.UTF-8"]},{"name":"ZIP","description":"com.river.connector.github.model.CompressionType.ZIP","location":"connector/connector-github/com.river.connector.github.model/-compression-type/-z-i-p/index.html","searchKeys":["ZIP","ZIP","com.river.connector.github.model.CompressionType.ZIP"]},{"name":"abstract val mode: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.mode","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/mode.html","searchKeys":["mode","abstract val mode: String","com.river.connector.github.model.TreeRef.TreeEntry.mode"]},{"name":"abstract val path: String","description":"com.river.connector.github.model.Content.path","location":"connector/connector-github/com.river.connector.github.model/-content/path.html","searchKeys":["path","abstract val path: String","com.river.connector.github.model.Content.path"]},{"name":"abstract val path: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.path","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/path.html","searchKeys":["path","abstract val path: String","com.river.connector.github.model.TreeRef.TreeEntry.path"]},{"name":"abstract val sha: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.sha","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/sha.html","searchKeys":["sha","abstract val sha: String","com.river.connector.github.model.TreeRef.TreeEntry.sha"]},{"name":"abstract val url: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.url","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/url.html","searchKeys":["url","abstract val url: String","com.river.connector.github.model.TreeRef.TreeEntry.url"]},{"name":"abstract var page: Int","description":"com.river.connector.github.model.query.PageableQuery.page","location":"connector/connector-github/com.river.connector.github.model.query/-pageable-query/page.html","searchKeys":["page","abstract var page: Int","com.river.connector.github.model.query.PageableQuery.page"]},{"name":"abstract var perPage: Int","description":"com.river.connector.github.model.query.PageableQuery.perPage","location":"connector/connector-github/com.river.connector.github.model.query/-pageable-query/per-page.html","searchKeys":["perPage","abstract var perPage: Int","com.river.connector.github.model.query.PageableQuery.perPage"]},{"name":"class CommitQuery : QueryParameters, PageableQuery","description":"com.river.connector.github.model.query.CommitQuery","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/index.html","searchKeys":["CommitQuery","class CommitQuery : QueryParameters, PageableQuery","com.river.connector.github.model.query.CommitQuery"]},{"name":"class GithubApi(apiKey: String, baseUrl: String = GithubApi.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = GithubApi.objectMapper)","description":"com.river.connector.github.GithubApi","location":"connector/connector-github/com.river.connector.github/-github-api/index.html","searchKeys":["GithubApi","class GithubApi(apiKey: String, baseUrl: String = GithubApi.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = GithubApi.objectMapper)","com.river.connector.github.GithubApi"]},{"name":"class IssueQuery : QueryParameters, PageableQuery","description":"com.river.connector.github.model.query.IssueQuery","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/index.html","searchKeys":["IssueQuery","class IssueQuery : QueryParameters, PageableQuery","com.river.connector.github.model.query.IssueQuery"]},{"name":"class PullRequestQuery : QueryParameters, PageableQuery","description":"com.river.connector.github.model.query.PullRequestQuery","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/index.html","searchKeys":["PullRequestQuery","class PullRequestQuery : QueryParameters, PageableQuery","com.river.connector.github.model.query.PullRequestQuery"]},{"name":"class RepositoryIssueQuery : QueryParameters, PageableQuery","description":"com.river.connector.github.model.query.RepositoryIssueQuery","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/index.html","searchKeys":["RepositoryIssueQuery","class RepositoryIssueQuery : QueryParameters, PageableQuery","com.river.connector.github.model.query.RepositoryIssueQuery"]},{"name":"class RepositoryQuery : QueryParameters, PageableQuery","description":"com.river.connector.github.model.query.RepositoryQuery","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/index.html","searchKeys":["RepositoryQuery","class RepositoryQuery : QueryParameters, PageableQuery","com.river.connector.github.model.query.RepositoryQuery"]},{"name":"constructor()","description":"com.river.connector.github.model.query.CommitQuery.CommitQuery","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/-commit-query.html","searchKeys":["CommitQuery","constructor()","com.river.connector.github.model.query.CommitQuery.CommitQuery"]},{"name":"constructor()","description":"com.river.connector.github.model.query.IssueQuery.IssueQuery","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-issue-query.html","searchKeys":["IssueQuery","constructor()","com.river.connector.github.model.query.IssueQuery.IssueQuery"]},{"name":"constructor()","description":"com.river.connector.github.model.query.PullRequestQuery.PullRequestQuery","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-pull-request-query.html","searchKeys":["PullRequestQuery","constructor()","com.river.connector.github.model.query.PullRequestQuery.PullRequestQuery"]},{"name":"constructor()","description":"com.river.connector.github.model.query.RepositoryIssueQuery.RepositoryIssueQuery","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-repository-issue-query.html","searchKeys":["RepositoryIssueQuery","constructor()","com.river.connector.github.model.query.RepositoryIssueQuery.RepositoryIssueQuery"]},{"name":"constructor()","description":"com.river.connector.github.model.query.RepositoryQuery.RepositoryQuery","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-repository-query.html","searchKeys":["RepositoryQuery","constructor()","com.river.connector.github.model.query.RepositoryQuery.RepositoryQuery"]},{"name":"constructor(apiKey: String, baseUrl: String = GithubApi.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = GithubApi.objectMapper)","description":"com.river.connector.github.GithubApi.GithubApi","location":"connector/connector-github/com.river.connector.github/-github-api/-github-api.html","searchKeys":["GithubApi","constructor(apiKey: String, baseUrl: String = GithubApi.baseUrl, client: HttpClient = httpClient, objectMapper: ObjectMapper = GithubApi.objectMapper)","com.river.connector.github.GithubApi.GithubApi"]},{"name":"constructor(id: Long, name: String, color: String)","description":"com.river.connector.github.model.Issue.Label.Label","location":"connector/connector-github/com.river.connector.github.model/-issue/-label/-label.html","searchKeys":["Label","constructor(id: Long, name: String, color: String)","com.river.connector.github.model.Issue.Label.Label"]},{"name":"constructor(id: Long, name: String, fullName: String, description: String?, htmlUrl: String, createdAt: String, updatedAt: String, pushedAt: String, forks: Int, watchers: Int, owner: Repository.Owner)","description":"com.river.connector.github.model.Repository.Repository","location":"connector/connector-github/com.river.connector.github.model/-repository/-repository.html","searchKeys":["Repository","constructor(id: Long, name: String, fullName: String, description: String?, htmlUrl: String, createdAt: String, updatedAt: String, pushedAt: String, forks: Int, watchers: Int, owner: Repository.Owner)","com.river.connector.github.model.Repository.Repository"]},{"name":"constructor(id: Long, number: Int, title: String, body: String?, state: String, htmlUrl: String, createdAt: String, updatedAt: String, closedAt: String?, mergedAt: String?, user: PullRequest.User, assignee: PullRequest.User?, assignees: List<PullRequest.User>, requestedReviewers: List<PullRequest.User>, head: PullRequest.Branch, base: PullRequest.Branch)","description":"com.river.connector.github.model.PullRequest.PullRequest","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-pull-request.html","searchKeys":["PullRequest","constructor(id: Long, number: Int, title: String, body: String?, state: String, htmlUrl: String, createdAt: String, updatedAt: String, closedAt: String?, mergedAt: String?, user: PullRequest.User, assignee: PullRequest.User?, assignees: List<PullRequest.User>, requestedReviewers: List<PullRequest.User>, head: PullRequest.Branch, base: PullRequest.Branch)","com.river.connector.github.model.PullRequest.PullRequest"]},{"name":"constructor(id: Long, number: Int, title: String, body: String?, state: String, htmlUrl: String, createdAt: String, updatedAt: String, closedAt: String?, user: Issue.User, assignee: Issue.User?, assignees: List<Issue.User>, labels: List<Issue.Label>)","description":"com.river.connector.github.model.Issue.Issue","location":"connector/connector-github/com.river.connector.github.model/-issue/-issue.html","searchKeys":["Issue","constructor(id: Long, number: Int, title: String, body: String?, state: String, htmlUrl: String, createdAt: String, updatedAt: String, closedAt: String?, user: Issue.User, assignee: Issue.User?, assignees: List<Issue.User>, labels: List<Issue.Label>)","com.river.connector.github.model.Issue.Issue"]},{"name":"constructor(label: String, ref: String, sha: String)","description":"com.river.connector.github.model.PullRequest.Branch.Branch","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-branch/-branch.html","searchKeys":["Branch","constructor(label: String, ref: String, sha: String)","com.river.connector.github.model.PullRequest.Branch.Branch"]},{"name":"constructor(login: String, id: Long, avatarUrl: String)","description":"com.river.connector.github.model.Issue.User.User","location":"connector/connector-github/com.river.connector.github.model/-issue/-user/-user.html","searchKeys":["User","constructor(login: String, id: Long, avatarUrl: String)","com.river.connector.github.model.Issue.User.User"]},{"name":"constructor(login: String, id: Long, avatarUrl: String)","description":"com.river.connector.github.model.PullRequest.User.User","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-user/-user.html","searchKeys":["User","constructor(login: String, id: Long, avatarUrl: String)","com.river.connector.github.model.PullRequest.User.User"]},{"name":"constructor(login: String, id: Long, avatarUrl: String)","description":"com.river.connector.github.model.Repository.Owner.Owner","location":"connector/connector-github/com.river.connector.github.model/-repository/-owner/-owner.html","searchKeys":["Owner","constructor(login: String, id: Long, avatarUrl: String)","com.river.connector.github.model.Repository.Owner.Owner"]},{"name":"constructor(login: String?, id: Long, avatarUrl: String?)","description":"com.river.connector.github.model.Commit.Author.Author","location":"connector/connector-github/com.river.connector.github.model/-commit/-author/-author.html","searchKeys":["Author","constructor(login: String?, id: Long, avatarUrl: String?)","com.river.connector.github.model.Commit.Author.Author"]},{"name":"constructor(login: String?, id: Long, avatarUrl: String?)","description":"com.river.connector.github.model.Commit.Committer.Committer","location":"connector/connector-github/com.river.connector.github.model/-commit/-committer/-committer.html","searchKeys":["Committer","constructor(login: String?, id: Long, avatarUrl: String?)","com.river.connector.github.model.Commit.Committer.Committer"]},{"name":"constructor(message: String, author: Commit.CommitAuthor, committer: Commit.CommitCommitter)","description":"com.river.connector.github.model.Commit.CommitDetails.CommitDetails","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-details/-commit-details.html","searchKeys":["CommitDetails","constructor(message: String, author: Commit.CommitAuthor, committer: Commit.CommitCommitter)","com.river.connector.github.model.Commit.CommitDetails.CommitDetails"]},{"name":"constructor(name: String, email: String, date: String)","description":"com.river.connector.github.model.Commit.CommitAuthor.CommitAuthor","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-author/-commit-author.html","searchKeys":["CommitAuthor","constructor(name: String, email: String, date: String)","com.river.connector.github.model.Commit.CommitAuthor.CommitAuthor"]},{"name":"constructor(name: String, email: String, date: String)","description":"com.river.connector.github.model.Commit.CommitCommitter.CommitCommitter","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-committer/-commit-committer.html","searchKeys":["CommitCommitter","constructor(name: String, email: String, date: String)","com.river.connector.github.model.Commit.CommitCommitter.CommitCommitter"]},{"name":"constructor(path: String, fileType: String, content: String)","description":"com.river.connector.github.model.FileContent.FileContent","location":"connector/connector-github/com.river.connector.github.model/-file-content/-file-content.html","searchKeys":["FileContent","constructor(path: String, fileType: String, content: String)","com.river.connector.github.model.FileContent.FileContent"]},{"name":"constructor(path: String, list: List<Content>)","description":"com.river.connector.github.model.Content.Dir.Dir","location":"connector/connector-github/com.river.connector.github.model/-content/-dir/-dir.html","searchKeys":["Dir","constructor(path: String, list: List<Content>)","com.river.connector.github.model.Content.Dir.Dir"]},{"name":"constructor(path: String, mode: String, sha: String, url: String)","description":"com.river.connector.github.model.TreeRef.TreeEntry.Tree.Tree","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-tree/-tree.html","searchKeys":["Tree","constructor(path: String, mode: String, sha: String, url: String)","com.river.connector.github.model.TreeRef.TreeEntry.Tree.Tree"]},{"name":"constructor(path: String, mode: String, sha: String, url: String, size: Long)","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob.Blob","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/-blob.html","searchKeys":["Blob","constructor(path: String, mode: String, sha: String, url: String, size: Long)","com.river.connector.github.model.TreeRef.TreeEntry.Blob.Blob"]},{"name":"constructor(sha: String, commit: Commit.CommitDetails, htmlUrl: String, author: Commit.Author?, committer: Commit.Committer?)","description":"com.river.connector.github.model.Commit.Commit","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit.html","searchKeys":["Commit","constructor(sha: String, commit: Commit.CommitDetails, htmlUrl: String, author: Commit.Author?, committer: Commit.Committer?)","com.river.connector.github.model.Commit.Commit"]},{"name":"constructor(sha: String, nodeId: String, size: Long, url: String, content: String, encoding: BlobContent.Encoding)","description":"com.river.connector.github.model.BlobContent.BlobContent","location":"connector/connector-github/com.river.connector.github.model/-blob-content/-blob-content.html","searchKeys":["BlobContent","constructor(sha: String, nodeId: String, size: Long, url: String, content: String, encoding: BlobContent.Encoding)","com.river.connector.github.model.BlobContent.BlobContent"]},{"name":"constructor(sha: String, url: String, tree: List<TreeRef.TreeEntry>)","description":"com.river.connector.github.model.TreeRef.TreeRef","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-ref.html","searchKeys":["TreeRef","constructor(sha: String, url: String, tree: List<TreeRef.TreeEntry>)","com.river.connector.github.model.TreeRef.TreeRef"]},{"name":"constructor(type: String, encoding: String, size: Int, name: String, path: String, content: String, sha: String, url: String, gitUrl: String, htmlUrl: String, downloadUrl: String, links: Map<String, String>)","description":"com.river.connector.github.model.Content.File.File","location":"connector/connector-github/com.river.connector.github.model/-content/-file/-file.html","searchKeys":["File","constructor(type: String, encoding: String, size: Int, name: String, path: String, content: String, sha: String, url: String, gitUrl: String, htmlUrl: String, downloadUrl: String, links: Map<String, String>)","com.river.connector.github.model.Content.File.File"]},{"name":"data class Author(val login: String?, val id: Long, val avatarUrl: String?)","description":"com.river.connector.github.model.Commit.Author","location":"connector/connector-github/com.river.connector.github.model/-commit/-author/index.html","searchKeys":["Author","data class Author(val login: String?, val id: Long, val avatarUrl: String?)","com.river.connector.github.model.Commit.Author"]},{"name":"data class Blob(val path: String, val mode: String, val sha: String, val url: String, val size: Long) : TreeRef.TreeEntry","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/index.html","searchKeys":["Blob","data class Blob(val path: String, val mode: String, val sha: String, val url: String, val size: Long) : TreeRef.TreeEntry","com.river.connector.github.model.TreeRef.TreeEntry.Blob"]},{"name":"data class BlobContent(val sha: String, val nodeId: String, val size: Long, val url: String, val content: String, val encoding: BlobContent.Encoding)","description":"com.river.connector.github.model.BlobContent","location":"connector/connector-github/com.river.connector.github.model/-blob-content/index.html","searchKeys":["BlobContent","data class BlobContent(val sha: String, val nodeId: String, val size: Long, val url: String, val content: String, val encoding: BlobContent.Encoding)","com.river.connector.github.model.BlobContent"]},{"name":"data class Branch(val label: String, val ref: String, val sha: String)","description":"com.river.connector.github.model.PullRequest.Branch","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-branch/index.html","searchKeys":["Branch","data class Branch(val label: String, val ref: String, val sha: String)","com.river.connector.github.model.PullRequest.Branch"]},{"name":"data class Commit(val sha: String, val commit: Commit.CommitDetails, val htmlUrl: String, val author: Commit.Author?, val committer: Commit.Committer?)","description":"com.river.connector.github.model.Commit","location":"connector/connector-github/com.river.connector.github.model/-commit/index.html","searchKeys":["Commit","data class Commit(val sha: String, val commit: Commit.CommitDetails, val htmlUrl: String, val author: Commit.Author?, val committer: Commit.Committer?)","com.river.connector.github.model.Commit"]},{"name":"data class CommitAuthor(val name: String, val email: String, val date: String)","description":"com.river.connector.github.model.Commit.CommitAuthor","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-author/index.html","searchKeys":["CommitAuthor","data class CommitAuthor(val name: String, val email: String, val date: String)","com.river.connector.github.model.Commit.CommitAuthor"]},{"name":"data class CommitCommitter(val name: String, val email: String, val date: String)","description":"com.river.connector.github.model.Commit.CommitCommitter","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-committer/index.html","searchKeys":["CommitCommitter","data class CommitCommitter(val name: String, val email: String, val date: String)","com.river.connector.github.model.Commit.CommitCommitter"]},{"name":"data class CommitDetails(val message: String, val author: Commit.CommitAuthor, val committer: Commit.CommitCommitter)","description":"com.river.connector.github.model.Commit.CommitDetails","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-details/index.html","searchKeys":["CommitDetails","data class CommitDetails(val message: String, val author: Commit.CommitAuthor, val committer: Commit.CommitCommitter)","com.river.connector.github.model.Commit.CommitDetails"]},{"name":"data class Committer(val login: String?, val id: Long, val avatarUrl: String?)","description":"com.river.connector.github.model.Commit.Committer","location":"connector/connector-github/com.river.connector.github.model/-commit/-committer/index.html","searchKeys":["Committer","data class Committer(val login: String?, val id: Long, val avatarUrl: String?)","com.river.connector.github.model.Commit.Committer"]},{"name":"data class Dir(val path: String, val list: List<Content>) : Content","description":"com.river.connector.github.model.Content.Dir","location":"connector/connector-github/com.river.connector.github.model/-content/-dir/index.html","searchKeys":["Dir","data class Dir(val path: String, val list: List<Content>) : Content","com.river.connector.github.model.Content.Dir"]},{"name":"data class File(val type: String, val encoding: String, val size: Int, val name: String, val path: String, val content: String, val sha: String, val url: String, val gitUrl: String, val htmlUrl: String, val downloadUrl: String, val links: Map<String, String>) : Content","description":"com.river.connector.github.model.Content.File","location":"connector/connector-github/com.river.connector.github.model/-content/-file/index.html","searchKeys":["File","data class File(val type: String, val encoding: String, val size: Int, val name: String, val path: String, val content: String, val sha: String, val url: String, val gitUrl: String, val htmlUrl: String, val downloadUrl: String, val links: Map<String, String>) : Content","com.river.connector.github.model.Content.File"]},{"name":"data class FileContent(val path: String, val fileType: String, val content: String)","description":"com.river.connector.github.model.FileContent","location":"connector/connector-github/com.river.connector.github.model/-file-content/index.html","searchKeys":["FileContent","data class FileContent(val path: String, val fileType: String, val content: String)","com.river.connector.github.model.FileContent"]},{"name":"data class Issue(val id: Long, val number: Int, val title: String, val body: String?, val state: String, val htmlUrl: String, val createdAt: String, val updatedAt: String, val closedAt: String?, val user: Issue.User, val assignee: Issue.User?, val assignees: List<Issue.User>, val labels: List<Issue.Label>)","description":"com.river.connector.github.model.Issue","location":"connector/connector-github/com.river.connector.github.model/-issue/index.html","searchKeys":["Issue","data class Issue(val id: Long, val number: Int, val title: String, val body: String?, val state: String, val htmlUrl: String, val createdAt: String, val updatedAt: String, val closedAt: String?, val user: Issue.User, val assignee: Issue.User?, val assignees: List<Issue.User>, val labels: List<Issue.Label>)","com.river.connector.github.model.Issue"]},{"name":"data class Label(val id: Long, val name: String, val color: String)","description":"com.river.connector.github.model.Issue.Label","location":"connector/connector-github/com.river.connector.github.model/-issue/-label/index.html","searchKeys":["Label","data class Label(val id: Long, val name: String, val color: String)","com.river.connector.github.model.Issue.Label"]},{"name":"data class Owner(val login: String, val id: Long, val avatarUrl: String)","description":"com.river.connector.github.model.Repository.Owner","location":"connector/connector-github/com.river.connector.github.model/-repository/-owner/index.html","searchKeys":["Owner","data class Owner(val login: String, val id: Long, val avatarUrl: String)","com.river.connector.github.model.Repository.Owner"]},{"name":"data class PullRequest(val id: Long, val number: Int, val title: String, val body: String?, val state: String, val htmlUrl: String, val createdAt: String, val updatedAt: String, val closedAt: String?, val mergedAt: String?, val user: PullRequest.User, val assignee: PullRequest.User?, val assignees: List<PullRequest.User>, val requestedReviewers: List<PullRequest.User>, val head: PullRequest.Branch, val base: PullRequest.Branch)","description":"com.river.connector.github.model.PullRequest","location":"connector/connector-github/com.river.connector.github.model/-pull-request/index.html","searchKeys":["PullRequest","data class PullRequest(val id: Long, val number: Int, val title: String, val body: String?, val state: String, val htmlUrl: String, val createdAt: String, val updatedAt: String, val closedAt: String?, val mergedAt: String?, val user: PullRequest.User, val assignee: PullRequest.User?, val assignees: List<PullRequest.User>, val requestedReviewers: List<PullRequest.User>, val head: PullRequest.Branch, val base: PullRequest.Branch)","com.river.connector.github.model.PullRequest"]},{"name":"data class Repository(val id: Long, val name: String, val fullName: String, val description: String?, val htmlUrl: String, val createdAt: String, val updatedAt: String, val pushedAt: String, val forks: Int, val watchers: Int, val owner: Repository.Owner)","description":"com.river.connector.github.model.Repository","location":"connector/connector-github/com.river.connector.github.model/-repository/index.html","searchKeys":["Repository","data class Repository(val id: Long, val name: String, val fullName: String, val description: String?, val htmlUrl: String, val createdAt: String, val updatedAt: String, val pushedAt: String, val forks: Int, val watchers: Int, val owner: Repository.Owner)","com.river.connector.github.model.Repository"]},{"name":"data class Tree(val path: String, val mode: String, val sha: String, val url: String) : TreeRef.TreeEntry","description":"com.river.connector.github.model.TreeRef.TreeEntry.Tree","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-tree/index.html","searchKeys":["Tree","data class Tree(val path: String, val mode: String, val sha: String, val url: String) : TreeRef.TreeEntry","com.river.connector.github.model.TreeRef.TreeEntry.Tree"]},{"name":"data class TreeRef(val sha: String, val url: String, val tree: List<TreeRef.TreeEntry>)","description":"com.river.connector.github.model.TreeRef","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/index.html","searchKeys":["TreeRef","data class TreeRef(val sha: String, val url: String, val tree: List<TreeRef.TreeEntry>)","com.river.connector.github.model.TreeRef"]},{"name":"data class User(val login: String, val id: Long, val avatarUrl: String)","description":"com.river.connector.github.model.Issue.User","location":"connector/connector-github/com.river.connector.github.model/-issue/-user/index.html","searchKeys":["User","data class User(val login: String, val id: Long, val avatarUrl: String)","com.river.connector.github.model.Issue.User"]},{"name":"data class User(val login: String, val id: Long, val avatarUrl: String)","description":"com.river.connector.github.model.PullRequest.User","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-user/index.html","searchKeys":["User","data class User(val login: String, val id: Long, val avatarUrl: String)","com.river.connector.github.model.PullRequest.User"]},{"name":"enum CompressionType : Enum<CompressionType> ","description":"com.river.connector.github.model.CompressionType","location":"connector/connector-github/com.river.connector.github.model/-compression-type/index.html","searchKeys":["CompressionType","enum CompressionType : Enum<CompressionType> ","com.river.connector.github.model.CompressionType"]},{"name":"enum Direction : Enum<IssueQuery.Direction> ","description":"com.river.connector.github.model.query.IssueQuery.Direction","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-direction/index.html","searchKeys":["Direction","enum Direction : Enum<IssueQuery.Direction> ","com.river.connector.github.model.query.IssueQuery.Direction"]},{"name":"enum Direction : Enum<PullRequestQuery.Direction> ","description":"com.river.connector.github.model.query.PullRequestQuery.Direction","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-direction/index.html","searchKeys":["Direction","enum Direction : Enum<PullRequestQuery.Direction> ","com.river.connector.github.model.query.PullRequestQuery.Direction"]},{"name":"enum Direction : Enum<RepositoryIssueQuery.Direction> ","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Direction","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-direction/index.html","searchKeys":["Direction","enum Direction : Enum<RepositoryIssueQuery.Direction> ","com.river.connector.github.model.query.RepositoryIssueQuery.Direction"]},{"name":"enum Direction : Enum<RepositoryQuery.Direction> ","description":"com.river.connector.github.model.query.RepositoryQuery.Direction","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-direction/index.html","searchKeys":["Direction","enum Direction : Enum<RepositoryQuery.Direction> ","com.river.connector.github.model.query.RepositoryQuery.Direction"]},{"name":"enum Encoding : Enum<BlobContent.Encoding> ","description":"com.river.connector.github.model.BlobContent.Encoding","location":"connector/connector-github/com.river.connector.github.model/-blob-content/-encoding/index.html","searchKeys":["Encoding","enum Encoding : Enum<BlobContent.Encoding> ","com.river.connector.github.model.BlobContent.Encoding"]},{"name":"enum Filter : Enum<IssueQuery.Filter> ","description":"com.river.connector.github.model.query.IssueQuery.Filter","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/index.html","searchKeys":["Filter","enum Filter : Enum<IssueQuery.Filter> ","com.river.connector.github.model.query.IssueQuery.Filter"]},{"name":"enum Sort : Enum<IssueQuery.Sort> ","description":"com.river.connector.github.model.query.IssueQuery.Sort","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-sort/index.html","searchKeys":["Sort","enum Sort : Enum<IssueQuery.Sort> ","com.river.connector.github.model.query.IssueQuery.Sort"]},{"name":"enum Sort : Enum<PullRequestQuery.Sort> ","description":"com.river.connector.github.model.query.PullRequestQuery.Sort","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/index.html","searchKeys":["Sort","enum Sort : Enum<PullRequestQuery.Sort> ","com.river.connector.github.model.query.PullRequestQuery.Sort"]},{"name":"enum Sort : Enum<RepositoryIssueQuery.Sort> ","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Sort","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-sort/index.html","searchKeys":["Sort","enum Sort : Enum<RepositoryIssueQuery.Sort> ","com.river.connector.github.model.query.RepositoryIssueQuery.Sort"]},{"name":"enum Sort : Enum<RepositoryQuery.Sort> ","description":"com.river.connector.github.model.query.RepositoryQuery.Sort","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/index.html","searchKeys":["Sort","enum Sort : Enum<RepositoryQuery.Sort> ","com.river.connector.github.model.query.RepositoryQuery.Sort"]},{"name":"enum State : Enum<IssueQuery.State> ","description":"com.river.connector.github.model.query.IssueQuery.State","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-state/index.html","searchKeys":["State","enum State : Enum<IssueQuery.State> ","com.river.connector.github.model.query.IssueQuery.State"]},{"name":"enum State : Enum<PullRequestQuery.State> ","description":"com.river.connector.github.model.query.PullRequestQuery.State","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-state/index.html","searchKeys":["State","enum State : Enum<PullRequestQuery.State> ","com.river.connector.github.model.query.PullRequestQuery.State"]},{"name":"enum State : Enum<RepositoryIssueQuery.State> ","description":"com.river.connector.github.model.query.RepositoryIssueQuery.State","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-state/index.html","searchKeys":["State","enum State : Enum<RepositoryIssueQuery.State> ","com.river.connector.github.model.query.RepositoryIssueQuery.State"]},{"name":"enum Type : Enum<RepositoryQuery.Type> ","description":"com.river.connector.github.model.query.RepositoryQuery.Type","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/index.html","searchKeys":["Type","enum Type : Enum<RepositoryQuery.Type> ","com.river.connector.github.model.query.RepositoryQuery.Type"]},{"name":"fun GithubApi.commitsAsFlow(repositoryName: String, concurrency: Int = 1, filter: CommitQuery.() -> Unit = {}): Flow<Commit>","description":"com.river.connector.github.commitsAsFlow","location":"connector/connector-github/com.river.connector.github/commits-as-flow.html","searchKeys":["commitsAsFlow","fun GithubApi.commitsAsFlow(repositoryName: String, concurrency: Int = 1, filter: CommitQuery.() -> Unit = {}): Flow<Commit>","com.river.connector.github.commitsAsFlow"]},{"name":"fun GithubApi.downloadRepositoryArchive(repositoryName: String, compressionType: CompressionType = CompressionType.ZIP, ref: String = \"main\"): Flow<ByteBuffer>","description":"com.river.connector.github.downloadRepositoryArchive","location":"connector/connector-github/com.river.connector.github/download-repository-archive.html","searchKeys":["downloadRepositoryArchive","fun GithubApi.downloadRepositoryArchive(repositoryName: String, compressionType: CompressionType = CompressionType.ZIP, ref: String = \"main\"): Flow<ByteBuffer>","com.river.connector.github.downloadRepositoryArchive"]},{"name":"fun GithubApi.issuesAsFlow(repositoryName: String, concurrency: Int = 1, filter: RepositoryIssueQuery.() -> Unit = {}): Flow<Issue>","description":"com.river.connector.github.issuesAsFlow","location":"connector/connector-github/com.river.connector.github/issues-as-flow.html","searchKeys":["issuesAsFlow","fun GithubApi.issuesAsFlow(repositoryName: String, concurrency: Int = 1, filter: RepositoryIssueQuery.() -> Unit = {}): Flow<Issue>","com.river.connector.github.issuesAsFlow"]},{"name":"fun GithubApi.pullRequestsAsFlow(repositoryName: String, concurrency: Int = 1, filter: PullRequestQuery.() -> Unit = {}): Flow<PullRequest>","description":"com.river.connector.github.pullRequestsAsFlow","location":"connector/connector-github/com.river.connector.github/pull-requests-as-flow.html","searchKeys":["pullRequestsAsFlow","fun GithubApi.pullRequestsAsFlow(repositoryName: String, concurrency: Int = 1, filter: PullRequestQuery.() -> Unit = {}): Flow<PullRequest>","com.river.connector.github.pullRequestsAsFlow"]},{"name":"fun GithubApi.repositoriesAsFlow(username: String, concurrency: Int = 1, filter: RepositoryQuery.() -> Unit = {}): Flow<Repository>","description":"com.river.connector.github.repositoriesAsFlow","location":"connector/connector-github/com.river.connector.github/repositories-as-flow.html","searchKeys":["repositoriesAsFlow","fun GithubApi.repositoriesAsFlow(username: String, concurrency: Int = 1, filter: RepositoryQuery.() -> Unit = {}): Flow<Repository>","com.river.connector.github.repositoriesAsFlow"]},{"name":"fun GithubApi.treeAsFlow(repositoryName: String, fileExtensions: List<String> = emptyList(), skipFolders: List<String> = emptyList(), sha: String? = null, concurrency: Int = 100): Flow<TreeRef.TreeEntry>","description":"com.river.connector.github.treeAsFlow","location":"connector/connector-github/com.river.connector.github/tree-as-flow.html","searchKeys":["treeAsFlow","fun GithubApi.treeAsFlow(repositoryName: String, fileExtensions: List<String> = emptyList(), skipFolders: List<String> = emptyList(), sha: String? = null, concurrency: Int = 100): Flow<TreeRef.TreeEntry>","com.river.connector.github.treeAsFlow"]},{"name":"fun valueOf(value: String): BlobContent.Encoding","description":"com.river.connector.github.model.BlobContent.Encoding.valueOf","location":"connector/connector-github/com.river.connector.github.model/-blob-content/-encoding/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BlobContent.Encoding","com.river.connector.github.model.BlobContent.Encoding.valueOf"]},{"name":"fun valueOf(value: String): CompressionType","description":"com.river.connector.github.model.CompressionType.valueOf","location":"connector/connector-github/com.river.connector.github.model/-compression-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CompressionType","com.river.connector.github.model.CompressionType.valueOf"]},{"name":"fun valueOf(value: String): IssueQuery.Direction","description":"com.river.connector.github.model.query.IssueQuery.Direction.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): IssueQuery.Direction","com.river.connector.github.model.query.IssueQuery.Direction.valueOf"]},{"name":"fun valueOf(value: String): IssueQuery.Filter","description":"com.river.connector.github.model.query.IssueQuery.Filter.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): IssueQuery.Filter","com.river.connector.github.model.query.IssueQuery.Filter.valueOf"]},{"name":"fun valueOf(value: String): IssueQuery.Sort","description":"com.river.connector.github.model.query.IssueQuery.Sort.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-sort/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): IssueQuery.Sort","com.river.connector.github.model.query.IssueQuery.Sort.valueOf"]},{"name":"fun valueOf(value: String): IssueQuery.State","description":"com.river.connector.github.model.query.IssueQuery.State.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): IssueQuery.State","com.river.connector.github.model.query.IssueQuery.State.valueOf"]},{"name":"fun valueOf(value: String): PullRequestQuery.Direction","description":"com.river.connector.github.model.query.PullRequestQuery.Direction.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): PullRequestQuery.Direction","com.river.connector.github.model.query.PullRequestQuery.Direction.valueOf"]},{"name":"fun valueOf(value: String): PullRequestQuery.Sort","description":"com.river.connector.github.model.query.PullRequestQuery.Sort.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): PullRequestQuery.Sort","com.river.connector.github.model.query.PullRequestQuery.Sort.valueOf"]},{"name":"fun valueOf(value: String): PullRequestQuery.State","description":"com.river.connector.github.model.query.PullRequestQuery.State.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): PullRequestQuery.State","com.river.connector.github.model.query.PullRequestQuery.State.valueOf"]},{"name":"fun valueOf(value: String): RepositoryIssueQuery.Direction","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Direction.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RepositoryIssueQuery.Direction","com.river.connector.github.model.query.RepositoryIssueQuery.Direction.valueOf"]},{"name":"fun valueOf(value: String): RepositoryIssueQuery.Sort","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Sort.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-sort/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RepositoryIssueQuery.Sort","com.river.connector.github.model.query.RepositoryIssueQuery.Sort.valueOf"]},{"name":"fun valueOf(value: String): RepositoryIssueQuery.State","description":"com.river.connector.github.model.query.RepositoryIssueQuery.State.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RepositoryIssueQuery.State","com.river.connector.github.model.query.RepositoryIssueQuery.State.valueOf"]},{"name":"fun valueOf(value: String): RepositoryQuery.Direction","description":"com.river.connector.github.model.query.RepositoryQuery.Direction.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RepositoryQuery.Direction","com.river.connector.github.model.query.RepositoryQuery.Direction.valueOf"]},{"name":"fun valueOf(value: String): RepositoryQuery.Sort","description":"com.river.connector.github.model.query.RepositoryQuery.Sort.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RepositoryQuery.Sort","com.river.connector.github.model.query.RepositoryQuery.Sort.valueOf"]},{"name":"fun valueOf(value: String): RepositoryQuery.Type","description":"com.river.connector.github.model.query.RepositoryQuery.Type.valueOf","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RepositoryQuery.Type","com.river.connector.github.model.query.RepositoryQuery.Type.valueOf"]},{"name":"fun values(): Array<BlobContent.Encoding>","description":"com.river.connector.github.model.BlobContent.Encoding.values","location":"connector/connector-github/com.river.connector.github.model/-blob-content/-encoding/values.html","searchKeys":["values","fun values(): Array<BlobContent.Encoding>","com.river.connector.github.model.BlobContent.Encoding.values"]},{"name":"fun values(): Array<CompressionType>","description":"com.river.connector.github.model.CompressionType.values","location":"connector/connector-github/com.river.connector.github.model/-compression-type/values.html","searchKeys":["values","fun values(): Array<CompressionType>","com.river.connector.github.model.CompressionType.values"]},{"name":"fun values(): Array<IssueQuery.Direction>","description":"com.river.connector.github.model.query.IssueQuery.Direction.values","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-direction/values.html","searchKeys":["values","fun values(): Array<IssueQuery.Direction>","com.river.connector.github.model.query.IssueQuery.Direction.values"]},{"name":"fun values(): Array<IssueQuery.Filter>","description":"com.river.connector.github.model.query.IssueQuery.Filter.values","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-filter/values.html","searchKeys":["values","fun values(): Array<IssueQuery.Filter>","com.river.connector.github.model.query.IssueQuery.Filter.values"]},{"name":"fun values(): Array<IssueQuery.Sort>","description":"com.river.connector.github.model.query.IssueQuery.Sort.values","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-sort/values.html","searchKeys":["values","fun values(): Array<IssueQuery.Sort>","com.river.connector.github.model.query.IssueQuery.Sort.values"]},{"name":"fun values(): Array<IssueQuery.State>","description":"com.river.connector.github.model.query.IssueQuery.State.values","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/-state/values.html","searchKeys":["values","fun values(): Array<IssueQuery.State>","com.river.connector.github.model.query.IssueQuery.State.values"]},{"name":"fun values(): Array<PullRequestQuery.Direction>","description":"com.river.connector.github.model.query.PullRequestQuery.Direction.values","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-direction/values.html","searchKeys":["values","fun values(): Array<PullRequestQuery.Direction>","com.river.connector.github.model.query.PullRequestQuery.Direction.values"]},{"name":"fun values(): Array<PullRequestQuery.Sort>","description":"com.river.connector.github.model.query.PullRequestQuery.Sort.values","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-sort/values.html","searchKeys":["values","fun values(): Array<PullRequestQuery.Sort>","com.river.connector.github.model.query.PullRequestQuery.Sort.values"]},{"name":"fun values(): Array<PullRequestQuery.State>","description":"com.river.connector.github.model.query.PullRequestQuery.State.values","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/-state/values.html","searchKeys":["values","fun values(): Array<PullRequestQuery.State>","com.river.connector.github.model.query.PullRequestQuery.State.values"]},{"name":"fun values(): Array<RepositoryIssueQuery.Direction>","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Direction.values","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-direction/values.html","searchKeys":["values","fun values(): Array<RepositoryIssueQuery.Direction>","com.river.connector.github.model.query.RepositoryIssueQuery.Direction.values"]},{"name":"fun values(): Array<RepositoryIssueQuery.Sort>","description":"com.river.connector.github.model.query.RepositoryIssueQuery.Sort.values","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-sort/values.html","searchKeys":["values","fun values(): Array<RepositoryIssueQuery.Sort>","com.river.connector.github.model.query.RepositoryIssueQuery.Sort.values"]},{"name":"fun values(): Array<RepositoryIssueQuery.State>","description":"com.river.connector.github.model.query.RepositoryIssueQuery.State.values","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/-state/values.html","searchKeys":["values","fun values(): Array<RepositoryIssueQuery.State>","com.river.connector.github.model.query.RepositoryIssueQuery.State.values"]},{"name":"fun values(): Array<RepositoryQuery.Direction>","description":"com.river.connector.github.model.query.RepositoryQuery.Direction.values","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-direction/values.html","searchKeys":["values","fun values(): Array<RepositoryQuery.Direction>","com.river.connector.github.model.query.RepositoryQuery.Direction.values"]},{"name":"fun values(): Array<RepositoryQuery.Sort>","description":"com.river.connector.github.model.query.RepositoryQuery.Sort.values","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-sort/values.html","searchKeys":["values","fun values(): Array<RepositoryQuery.Sort>","com.river.connector.github.model.query.RepositoryQuery.Sort.values"]},{"name":"fun values(): Array<RepositoryQuery.Type>","description":"com.river.connector.github.model.query.RepositoryQuery.Type.values","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/-type/values.html","searchKeys":["values","fun values(): Array<RepositoryQuery.Type>","com.river.connector.github.model.query.RepositoryQuery.Type.values"]},{"name":"interface Content","description":"com.river.connector.github.model.Content","location":"connector/connector-github/com.river.connector.github.model/-content/index.html","searchKeys":["Content","interface Content","com.river.connector.github.model.Content"]},{"name":"interface PageableQuery : QueryParameters","description":"com.river.connector.github.model.query.PageableQuery","location":"connector/connector-github/com.river.connector.github.model.query/-pageable-query/index.html","searchKeys":["PageableQuery","interface PageableQuery : QueryParameters","com.river.connector.github.model.query.PageableQuery"]},{"name":"interface QueryParameters","description":"com.river.connector.github.model.QueryParameters","location":"connector/connector-github/com.river.connector.github.model/-query-parameters/index.html","searchKeys":["QueryParameters","interface QueryParameters","com.river.connector.github.model.QueryParameters"]},{"name":"interface TreeEntry","description":"com.river.connector.github.model.TreeRef.TreeEntry","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/index.html","searchKeys":["TreeEntry","interface TreeEntry","com.river.connector.github.model.TreeRef.TreeEntry"]},{"name":"object Companion","description":"com.river.connector.github.GithubApi.Companion","location":"connector/connector-github/com.river.connector.github/-github-api/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.github.GithubApi.Companion"]},{"name":"open override val mode: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob.mode","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/mode.html","searchKeys":["mode","open override val mode: String","com.river.connector.github.model.TreeRef.TreeEntry.Blob.mode"]},{"name":"open override val mode: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Tree.mode","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-tree/mode.html","searchKeys":["mode","open override val mode: String","com.river.connector.github.model.TreeRef.TreeEntry.Tree.mode"]},{"name":"open override val path: String","description":"com.river.connector.github.model.Content.Dir.path","location":"connector/connector-github/com.river.connector.github.model/-content/-dir/path.html","searchKeys":["path","open override val path: String","com.river.connector.github.model.Content.Dir.path"]},{"name":"open override val path: String","description":"com.river.connector.github.model.Content.File.path","location":"connector/connector-github/com.river.connector.github.model/-content/-file/path.html","searchKeys":["path","open override val path: String","com.river.connector.github.model.Content.File.path"]},{"name":"open override val path: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob.path","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/path.html","searchKeys":["path","open override val path: String","com.river.connector.github.model.TreeRef.TreeEntry.Blob.path"]},{"name":"open override val path: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Tree.path","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-tree/path.html","searchKeys":["path","open override val path: String","com.river.connector.github.model.TreeRef.TreeEntry.Tree.path"]},{"name":"open override val sha: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob.sha","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/sha.html","searchKeys":["sha","open override val sha: String","com.river.connector.github.model.TreeRef.TreeEntry.Blob.sha"]},{"name":"open override val sha: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Tree.sha","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-tree/sha.html","searchKeys":["sha","open override val sha: String","com.river.connector.github.model.TreeRef.TreeEntry.Tree.sha"]},{"name":"open override val url: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob.url","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/url.html","searchKeys":["url","open override val url: String","com.river.connector.github.model.TreeRef.TreeEntry.Blob.url"]},{"name":"open override val url: String","description":"com.river.connector.github.model.TreeRef.TreeEntry.Tree.url","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-tree/url.html","searchKeys":["url","open override val url: String","com.river.connector.github.model.TreeRef.TreeEntry.Tree.url"]},{"name":"open override var page: Int","description":"com.river.connector.github.model.query.CommitQuery.page","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/page.html","searchKeys":["page","open override var page: Int","com.river.connector.github.model.query.CommitQuery.page"]},{"name":"open override var page: Int","description":"com.river.connector.github.model.query.IssueQuery.page","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/page.html","searchKeys":["page","open override var page: Int","com.river.connector.github.model.query.IssueQuery.page"]},{"name":"open override var page: Int","description":"com.river.connector.github.model.query.PullRequestQuery.page","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/page.html","searchKeys":["page","open override var page: Int","com.river.connector.github.model.query.PullRequestQuery.page"]},{"name":"open override var page: Int","description":"com.river.connector.github.model.query.RepositoryIssueQuery.page","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/page.html","searchKeys":["page","open override var page: Int","com.river.connector.github.model.query.RepositoryIssueQuery.page"]},{"name":"open override var page: Int","description":"com.river.connector.github.model.query.RepositoryQuery.page","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/page.html","searchKeys":["page","open override var page: Int","com.river.connector.github.model.query.RepositoryQuery.page"]},{"name":"open override var perPage: Int","description":"com.river.connector.github.model.query.CommitQuery.perPage","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/per-page.html","searchKeys":["perPage","open override var perPage: Int","com.river.connector.github.model.query.CommitQuery.perPage"]},{"name":"open override var perPage: Int","description":"com.river.connector.github.model.query.IssueQuery.perPage","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/per-page.html","searchKeys":["perPage","open override var perPage: Int","com.river.connector.github.model.query.IssueQuery.perPage"]},{"name":"open override var perPage: Int","description":"com.river.connector.github.model.query.PullRequestQuery.perPage","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/per-page.html","searchKeys":["perPage","open override var perPage: Int","com.river.connector.github.model.query.PullRequestQuery.perPage"]},{"name":"open override var perPage: Int","description":"com.river.connector.github.model.query.RepositoryIssueQuery.perPage","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/per-page.html","searchKeys":["perPage","open override var perPage: Int","com.river.connector.github.model.query.RepositoryIssueQuery.perPage"]},{"name":"open override var perPage: Int","description":"com.river.connector.github.model.query.RepositoryQuery.perPage","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/per-page.html","searchKeys":["perPage","open override var perPage: Int","com.river.connector.github.model.query.RepositoryQuery.perPage"]},{"name":"val assignee: Issue.User?","description":"com.river.connector.github.model.Issue.assignee","location":"connector/connector-github/com.river.connector.github.model/-issue/assignee.html","searchKeys":["assignee","val assignee: Issue.User?","com.river.connector.github.model.Issue.assignee"]},{"name":"val assignee: PullRequest.User?","description":"com.river.connector.github.model.PullRequest.assignee","location":"connector/connector-github/com.river.connector.github.model/-pull-request/assignee.html","searchKeys":["assignee","val assignee: PullRequest.User?","com.river.connector.github.model.PullRequest.assignee"]},{"name":"val assignees: List<Issue.User>","description":"com.river.connector.github.model.Issue.assignees","location":"connector/connector-github/com.river.connector.github.model/-issue/assignees.html","searchKeys":["assignees","val assignees: List<Issue.User>","com.river.connector.github.model.Issue.assignees"]},{"name":"val assignees: List<PullRequest.User>","description":"com.river.connector.github.model.PullRequest.assignees","location":"connector/connector-github/com.river.connector.github.model/-pull-request/assignees.html","searchKeys":["assignees","val assignees: List<PullRequest.User>","com.river.connector.github.model.PullRequest.assignees"]},{"name":"val author: Commit.Author?","description":"com.river.connector.github.model.Commit.author","location":"connector/connector-github/com.river.connector.github.model/-commit/author.html","searchKeys":["author","val author: Commit.Author?","com.river.connector.github.model.Commit.author"]},{"name":"val author: Commit.CommitAuthor","description":"com.river.connector.github.model.Commit.CommitDetails.author","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-details/author.html","searchKeys":["author","val author: Commit.CommitAuthor","com.river.connector.github.model.Commit.CommitDetails.author"]},{"name":"val avatarUrl: String","description":"com.river.connector.github.model.Issue.User.avatarUrl","location":"connector/connector-github/com.river.connector.github.model/-issue/-user/avatar-url.html","searchKeys":["avatarUrl","val avatarUrl: String","com.river.connector.github.model.Issue.User.avatarUrl"]},{"name":"val avatarUrl: String","description":"com.river.connector.github.model.PullRequest.User.avatarUrl","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-user/avatar-url.html","searchKeys":["avatarUrl","val avatarUrl: String","com.river.connector.github.model.PullRequest.User.avatarUrl"]},{"name":"val avatarUrl: String","description":"com.river.connector.github.model.Repository.Owner.avatarUrl","location":"connector/connector-github/com.river.connector.github.model/-repository/-owner/avatar-url.html","searchKeys":["avatarUrl","val avatarUrl: String","com.river.connector.github.model.Repository.Owner.avatarUrl"]},{"name":"val avatarUrl: String?","description":"com.river.connector.github.model.Commit.Author.avatarUrl","location":"connector/connector-github/com.river.connector.github.model/-commit/-author/avatar-url.html","searchKeys":["avatarUrl","val avatarUrl: String?","com.river.connector.github.model.Commit.Author.avatarUrl"]},{"name":"val avatarUrl: String?","description":"com.river.connector.github.model.Commit.Committer.avatarUrl","location":"connector/connector-github/com.river.connector.github.model/-commit/-committer/avatar-url.html","searchKeys":["avatarUrl","val avatarUrl: String?","com.river.connector.github.model.Commit.Committer.avatarUrl"]},{"name":"val base: PullRequest.Branch","description":"com.river.connector.github.model.PullRequest.base","location":"connector/connector-github/com.river.connector.github.model/-pull-request/base.html","searchKeys":["base","val base: PullRequest.Branch","com.river.connector.github.model.PullRequest.base"]},{"name":"val body: String?","description":"com.river.connector.github.model.Issue.body","location":"connector/connector-github/com.river.connector.github.model/-issue/body.html","searchKeys":["body","val body: String?","com.river.connector.github.model.Issue.body"]},{"name":"val body: String?","description":"com.river.connector.github.model.PullRequest.body","location":"connector/connector-github/com.river.connector.github.model/-pull-request/body.html","searchKeys":["body","val body: String?","com.river.connector.github.model.PullRequest.body"]},{"name":"val closedAt: String?","description":"com.river.connector.github.model.Issue.closedAt","location":"connector/connector-github/com.river.connector.github.model/-issue/closed-at.html","searchKeys":["closedAt","val closedAt: String?","com.river.connector.github.model.Issue.closedAt"]},{"name":"val closedAt: String?","description":"com.river.connector.github.model.PullRequest.closedAt","location":"connector/connector-github/com.river.connector.github.model/-pull-request/closed-at.html","searchKeys":["closedAt","val closedAt: String?","com.river.connector.github.model.PullRequest.closedAt"]},{"name":"val color: String","description":"com.river.connector.github.model.Issue.Label.color","location":"connector/connector-github/com.river.connector.github.model/-issue/-label/color.html","searchKeys":["color","val color: String","com.river.connector.github.model.Issue.Label.color"]},{"name":"val commit: Commit.CommitDetails","description":"com.river.connector.github.model.Commit.commit","location":"connector/connector-github/com.river.connector.github.model/-commit/commit.html","searchKeys":["commit","val commit: Commit.CommitDetails","com.river.connector.github.model.Commit.commit"]},{"name":"val committer: Commit.CommitCommitter","description":"com.river.connector.github.model.Commit.CommitDetails.committer","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-details/committer.html","searchKeys":["committer","val committer: Commit.CommitCommitter","com.river.connector.github.model.Commit.CommitDetails.committer"]},{"name":"val committer: Commit.Committer?","description":"com.river.connector.github.model.Commit.committer","location":"connector/connector-github/com.river.connector.github.model/-commit/committer.html","searchKeys":["committer","val committer: Commit.Committer?","com.river.connector.github.model.Commit.committer"]},{"name":"val content: String","description":"com.river.connector.github.model.BlobContent.content","location":"connector/connector-github/com.river.connector.github.model/-blob-content/content.html","searchKeys":["content","val content: String","com.river.connector.github.model.BlobContent.content"]},{"name":"val content: String","description":"com.river.connector.github.model.Content.File.content","location":"connector/connector-github/com.river.connector.github.model/-content/-file/content.html","searchKeys":["content","val content: String","com.river.connector.github.model.Content.File.content"]},{"name":"val content: String","description":"com.river.connector.github.model.FileContent.content","location":"connector/connector-github/com.river.connector.github.model/-file-content/content.html","searchKeys":["content","val content: String","com.river.connector.github.model.FileContent.content"]},{"name":"val createdAt: String","description":"com.river.connector.github.model.Issue.createdAt","location":"connector/connector-github/com.river.connector.github.model/-issue/created-at.html","searchKeys":["createdAt","val createdAt: String","com.river.connector.github.model.Issue.createdAt"]},{"name":"val createdAt: String","description":"com.river.connector.github.model.PullRequest.createdAt","location":"connector/connector-github/com.river.connector.github.model/-pull-request/created-at.html","searchKeys":["createdAt","val createdAt: String","com.river.connector.github.model.PullRequest.createdAt"]},{"name":"val createdAt: String","description":"com.river.connector.github.model.Repository.createdAt","location":"connector/connector-github/com.river.connector.github.model/-repository/created-at.html","searchKeys":["createdAt","val createdAt: String","com.river.connector.github.model.Repository.createdAt"]},{"name":"val date: String","description":"com.river.connector.github.model.Commit.CommitAuthor.date","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-author/date.html","searchKeys":["date","val date: String","com.river.connector.github.model.Commit.CommitAuthor.date"]},{"name":"val date: String","description":"com.river.connector.github.model.Commit.CommitCommitter.date","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-committer/date.html","searchKeys":["date","val date: String","com.river.connector.github.model.Commit.CommitCommitter.date"]},{"name":"val decodedContent: String","description":"com.river.connector.github.model.BlobContent.decodedContent","location":"connector/connector-github/com.river.connector.github.model/-blob-content/decoded-content.html","searchKeys":["decodedContent","val decodedContent: String","com.river.connector.github.model.BlobContent.decodedContent"]},{"name":"val description: String?","description":"com.river.connector.github.model.Repository.description","location":"connector/connector-github/com.river.connector.github.model/-repository/description.html","searchKeys":["description","val description: String?","com.river.connector.github.model.Repository.description"]},{"name":"val downloadUrl: String","description":"com.river.connector.github.model.Content.File.downloadUrl","location":"connector/connector-github/com.river.connector.github.model/-content/-file/download-url.html","searchKeys":["downloadUrl","val downloadUrl: String","com.river.connector.github.model.Content.File.downloadUrl"]},{"name":"val email: String","description":"com.river.connector.github.model.Commit.CommitAuthor.email","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-author/email.html","searchKeys":["email","val email: String","com.river.connector.github.model.Commit.CommitAuthor.email"]},{"name":"val email: String","description":"com.river.connector.github.model.Commit.CommitCommitter.email","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-committer/email.html","searchKeys":["email","val email: String","com.river.connector.github.model.Commit.CommitCommitter.email"]},{"name":"val encoding: BlobContent.Encoding","description":"com.river.connector.github.model.BlobContent.encoding","location":"connector/connector-github/com.river.connector.github.model/-blob-content/encoding.html","searchKeys":["encoding","val encoding: BlobContent.Encoding","com.river.connector.github.model.BlobContent.encoding"]},{"name":"val encoding: String","description":"com.river.connector.github.model.Content.File.encoding","location":"connector/connector-github/com.river.connector.github.model/-content/-file/encoding.html","searchKeys":["encoding","val encoding: String","com.river.connector.github.model.Content.File.encoding"]},{"name":"val fileType: String","description":"com.river.connector.github.model.FileContent.fileType","location":"connector/connector-github/com.river.connector.github.model/-file-content/file-type.html","searchKeys":["fileType","val fileType: String","com.river.connector.github.model.FileContent.fileType"]},{"name":"val forks: Int","description":"com.river.connector.github.model.Repository.forks","location":"connector/connector-github/com.river.connector.github.model/-repository/forks.html","searchKeys":["forks","val forks: Int","com.river.connector.github.model.Repository.forks"]},{"name":"val fullName: String","description":"com.river.connector.github.model.Repository.fullName","location":"connector/connector-github/com.river.connector.github.model/-repository/full-name.html","searchKeys":["fullName","val fullName: String","com.river.connector.github.model.Repository.fullName"]},{"name":"val gitUrl: String","description":"com.river.connector.github.model.Content.File.gitUrl","location":"connector/connector-github/com.river.connector.github.model/-content/-file/git-url.html","searchKeys":["gitUrl","val gitUrl: String","com.river.connector.github.model.Content.File.gitUrl"]},{"name":"val head: PullRequest.Branch","description":"com.river.connector.github.model.PullRequest.head","location":"connector/connector-github/com.river.connector.github.model/-pull-request/head.html","searchKeys":["head","val head: PullRequest.Branch","com.river.connector.github.model.PullRequest.head"]},{"name":"val htmlUrl: String","description":"com.river.connector.github.model.Commit.htmlUrl","location":"connector/connector-github/com.river.connector.github.model/-commit/html-url.html","searchKeys":["htmlUrl","val htmlUrl: String","com.river.connector.github.model.Commit.htmlUrl"]},{"name":"val htmlUrl: String","description":"com.river.connector.github.model.Content.File.htmlUrl","location":"connector/connector-github/com.river.connector.github.model/-content/-file/html-url.html","searchKeys":["htmlUrl","val htmlUrl: String","com.river.connector.github.model.Content.File.htmlUrl"]},{"name":"val htmlUrl: String","description":"com.river.connector.github.model.Issue.htmlUrl","location":"connector/connector-github/com.river.connector.github.model/-issue/html-url.html","searchKeys":["htmlUrl","val htmlUrl: String","com.river.connector.github.model.Issue.htmlUrl"]},{"name":"val htmlUrl: String","description":"com.river.connector.github.model.PullRequest.htmlUrl","location":"connector/connector-github/com.river.connector.github.model/-pull-request/html-url.html","searchKeys":["htmlUrl","val htmlUrl: String","com.river.connector.github.model.PullRequest.htmlUrl"]},{"name":"val htmlUrl: String","description":"com.river.connector.github.model.Repository.htmlUrl","location":"connector/connector-github/com.river.connector.github.model/-repository/html-url.html","searchKeys":["htmlUrl","val htmlUrl: String","com.river.connector.github.model.Repository.htmlUrl"]},{"name":"val id: Long","description":"com.river.connector.github.model.Commit.Author.id","location":"connector/connector-github/com.river.connector.github.model/-commit/-author/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Commit.Author.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.Commit.Committer.id","location":"connector/connector-github/com.river.connector.github.model/-commit/-committer/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Commit.Committer.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.Issue.Label.id","location":"connector/connector-github/com.river.connector.github.model/-issue/-label/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Issue.Label.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.Issue.User.id","location":"connector/connector-github/com.river.connector.github.model/-issue/-user/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Issue.User.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.Issue.id","location":"connector/connector-github/com.river.connector.github.model/-issue/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Issue.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.PullRequest.User.id","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-user/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.PullRequest.User.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.PullRequest.id","location":"connector/connector-github/com.river.connector.github.model/-pull-request/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.PullRequest.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.Repository.Owner.id","location":"connector/connector-github/com.river.connector.github.model/-repository/-owner/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Repository.Owner.id"]},{"name":"val id: Long","description":"com.river.connector.github.model.Repository.id","location":"connector/connector-github/com.river.connector.github.model/-repository/id.html","searchKeys":["id","val id: Long","com.river.connector.github.model.Repository.id"]},{"name":"val label: String","description":"com.river.connector.github.model.PullRequest.Branch.label","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-branch/label.html","searchKeys":["label","val label: String","com.river.connector.github.model.PullRequest.Branch.label"]},{"name":"val labels: List<Issue.Label>","description":"com.river.connector.github.model.Issue.labels","location":"connector/connector-github/com.river.connector.github.model/-issue/labels.html","searchKeys":["labels","val labels: List<Issue.Label>","com.river.connector.github.model.Issue.labels"]},{"name":"val links: Map<String, String>","description":"com.river.connector.github.model.Content.File.links","location":"connector/connector-github/com.river.connector.github.model/-content/-file/links.html","searchKeys":["links","val links: Map<String, String>","com.river.connector.github.model.Content.File.links"]},{"name":"val list: List<Content>","description":"com.river.connector.github.model.Content.Dir.list","location":"connector/connector-github/com.river.connector.github.model/-content/-dir/list.html","searchKeys":["list","val list: List<Content>","com.river.connector.github.model.Content.Dir.list"]},{"name":"val login: String","description":"com.river.connector.github.model.Issue.User.login","location":"connector/connector-github/com.river.connector.github.model/-issue/-user/login.html","searchKeys":["login","val login: String","com.river.connector.github.model.Issue.User.login"]},{"name":"val login: String","description":"com.river.connector.github.model.PullRequest.User.login","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-user/login.html","searchKeys":["login","val login: String","com.river.connector.github.model.PullRequest.User.login"]},{"name":"val login: String","description":"com.river.connector.github.model.Repository.Owner.login","location":"connector/connector-github/com.river.connector.github.model/-repository/-owner/login.html","searchKeys":["login","val login: String","com.river.connector.github.model.Repository.Owner.login"]},{"name":"val login: String?","description":"com.river.connector.github.model.Commit.Author.login","location":"connector/connector-github/com.river.connector.github.model/-commit/-author/login.html","searchKeys":["login","val login: String?","com.river.connector.github.model.Commit.Author.login"]},{"name":"val login: String?","description":"com.river.connector.github.model.Commit.Committer.login","location":"connector/connector-github/com.river.connector.github.model/-commit/-committer/login.html","searchKeys":["login","val login: String?","com.river.connector.github.model.Commit.Committer.login"]},{"name":"val mergedAt: String?","description":"com.river.connector.github.model.PullRequest.mergedAt","location":"connector/connector-github/com.river.connector.github.model/-pull-request/merged-at.html","searchKeys":["mergedAt","val mergedAt: String?","com.river.connector.github.model.PullRequest.mergedAt"]},{"name":"val message: String","description":"com.river.connector.github.model.Commit.CommitDetails.message","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-details/message.html","searchKeys":["message","val message: String","com.river.connector.github.model.Commit.CommitDetails.message"]},{"name":"val name: String","description":"com.river.connector.github.model.Commit.CommitAuthor.name","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-author/name.html","searchKeys":["name","val name: String","com.river.connector.github.model.Commit.CommitAuthor.name"]},{"name":"val name: String","description":"com.river.connector.github.model.Commit.CommitCommitter.name","location":"connector/connector-github/com.river.connector.github.model/-commit/-commit-committer/name.html","searchKeys":["name","val name: String","com.river.connector.github.model.Commit.CommitCommitter.name"]},{"name":"val name: String","description":"com.river.connector.github.model.Content.File.name","location":"connector/connector-github/com.river.connector.github.model/-content/-file/name.html","searchKeys":["name","val name: String","com.river.connector.github.model.Content.File.name"]},{"name":"val name: String","description":"com.river.connector.github.model.Issue.Label.name","location":"connector/connector-github/com.river.connector.github.model/-issue/-label/name.html","searchKeys":["name","val name: String","com.river.connector.github.model.Issue.Label.name"]},{"name":"val name: String","description":"com.river.connector.github.model.Repository.name","location":"connector/connector-github/com.river.connector.github.model/-repository/name.html","searchKeys":["name","val name: String","com.river.connector.github.model.Repository.name"]},{"name":"val nodeId: String","description":"com.river.connector.github.model.BlobContent.nodeId","location":"connector/connector-github/com.river.connector.github.model/-blob-content/node-id.html","searchKeys":["nodeId","val nodeId: String","com.river.connector.github.model.BlobContent.nodeId"]},{"name":"val number: Int","description":"com.river.connector.github.model.Issue.number","location":"connector/connector-github/com.river.connector.github.model/-issue/number.html","searchKeys":["number","val number: Int","com.river.connector.github.model.Issue.number"]},{"name":"val number: Int","description":"com.river.connector.github.model.PullRequest.number","location":"connector/connector-github/com.river.connector.github.model/-pull-request/number.html","searchKeys":["number","val number: Int","com.river.connector.github.model.PullRequest.number"]},{"name":"val owner: Repository.Owner","description":"com.river.connector.github.model.Repository.owner","location":"connector/connector-github/com.river.connector.github.model/-repository/owner.html","searchKeys":["owner","val owner: Repository.Owner","com.river.connector.github.model.Repository.owner"]},{"name":"val path: String","description":"com.river.connector.github.model.FileContent.path","location":"connector/connector-github/com.river.connector.github.model/-file-content/path.html","searchKeys":["path","val path: String","com.river.connector.github.model.FileContent.path"]},{"name":"val pushedAt: String","description":"com.river.connector.github.model.Repository.pushedAt","location":"connector/connector-github/com.river.connector.github.model/-repository/pushed-at.html","searchKeys":["pushedAt","val pushedAt: String","com.river.connector.github.model.Repository.pushedAt"]},{"name":"val ref: String","description":"com.river.connector.github.model.PullRequest.Branch.ref","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-branch/ref.html","searchKeys":["ref","val ref: String","com.river.connector.github.model.PullRequest.Branch.ref"]},{"name":"val requestedReviewers: List<PullRequest.User>","description":"com.river.connector.github.model.PullRequest.requestedReviewers","location":"connector/connector-github/com.river.connector.github.model/-pull-request/requested-reviewers.html","searchKeys":["requestedReviewers","val requestedReviewers: List<PullRequest.User>","com.river.connector.github.model.PullRequest.requestedReviewers"]},{"name":"val sha: String","description":"com.river.connector.github.model.BlobContent.sha","location":"connector/connector-github/com.river.connector.github.model/-blob-content/sha.html","searchKeys":["sha","val sha: String","com.river.connector.github.model.BlobContent.sha"]},{"name":"val sha: String","description":"com.river.connector.github.model.Commit.sha","location":"connector/connector-github/com.river.connector.github.model/-commit/sha.html","searchKeys":["sha","val sha: String","com.river.connector.github.model.Commit.sha"]},{"name":"val sha: String","description":"com.river.connector.github.model.Content.File.sha","location":"connector/connector-github/com.river.connector.github.model/-content/-file/sha.html","searchKeys":["sha","val sha: String","com.river.connector.github.model.Content.File.sha"]},{"name":"val sha: String","description":"com.river.connector.github.model.PullRequest.Branch.sha","location":"connector/connector-github/com.river.connector.github.model/-pull-request/-branch/sha.html","searchKeys":["sha","val sha: String","com.river.connector.github.model.PullRequest.Branch.sha"]},{"name":"val sha: String","description":"com.river.connector.github.model.TreeRef.sha","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/sha.html","searchKeys":["sha","val sha: String","com.river.connector.github.model.TreeRef.sha"]},{"name":"val size: Int","description":"com.river.connector.github.model.Content.File.size","location":"connector/connector-github/com.river.connector.github.model/-content/-file/size.html","searchKeys":["size","val size: Int","com.river.connector.github.model.Content.File.size"]},{"name":"val size: Long","description":"com.river.connector.github.model.BlobContent.size","location":"connector/connector-github/com.river.connector.github.model/-blob-content/size.html","searchKeys":["size","val size: Long","com.river.connector.github.model.BlobContent.size"]},{"name":"val size: Long","description":"com.river.connector.github.model.TreeRef.TreeEntry.Blob.size","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/-tree-entry/-blob/size.html","searchKeys":["size","val size: Long","com.river.connector.github.model.TreeRef.TreeEntry.Blob.size"]},{"name":"val state: String","description":"com.river.connector.github.model.Issue.state","location":"connector/connector-github/com.river.connector.github.model/-issue/state.html","searchKeys":["state","val state: String","com.river.connector.github.model.Issue.state"]},{"name":"val state: String","description":"com.river.connector.github.model.PullRequest.state","location":"connector/connector-github/com.river.connector.github.model/-pull-request/state.html","searchKeys":["state","val state: String","com.river.connector.github.model.PullRequest.state"]},{"name":"val title: String","description":"com.river.connector.github.model.Issue.title","location":"connector/connector-github/com.river.connector.github.model/-issue/title.html","searchKeys":["title","val title: String","com.river.connector.github.model.Issue.title"]},{"name":"val title: String","description":"com.river.connector.github.model.PullRequest.title","location":"connector/connector-github/com.river.connector.github.model/-pull-request/title.html","searchKeys":["title","val title: String","com.river.connector.github.model.PullRequest.title"]},{"name":"val tree: List<TreeRef.TreeEntry>","description":"com.river.connector.github.model.TreeRef.tree","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/tree.html","searchKeys":["tree","val tree: List<TreeRef.TreeEntry>","com.river.connector.github.model.TreeRef.tree"]},{"name":"val type: String","description":"com.river.connector.github.model.CompressionType.type","location":"connector/connector-github/com.river.connector.github.model/-compression-type/type.html","searchKeys":["type","val type: String","com.river.connector.github.model.CompressionType.type"]},{"name":"val type: String","description":"com.river.connector.github.model.Content.File.type","location":"connector/connector-github/com.river.connector.github.model/-content/-file/type.html","searchKeys":["type","val type: String","com.river.connector.github.model.Content.File.type"]},{"name":"val updatedAt: String","description":"com.river.connector.github.model.Issue.updatedAt","location":"connector/connector-github/com.river.connector.github.model/-issue/updated-at.html","searchKeys":["updatedAt","val updatedAt: String","com.river.connector.github.model.Issue.updatedAt"]},{"name":"val updatedAt: String","description":"com.river.connector.github.model.PullRequest.updatedAt","location":"connector/connector-github/com.river.connector.github.model/-pull-request/updated-at.html","searchKeys":["updatedAt","val updatedAt: String","com.river.connector.github.model.PullRequest.updatedAt"]},{"name":"val updatedAt: String","description":"com.river.connector.github.model.Repository.updatedAt","location":"connector/connector-github/com.river.connector.github.model/-repository/updated-at.html","searchKeys":["updatedAt","val updatedAt: String","com.river.connector.github.model.Repository.updatedAt"]},{"name":"val url: String","description":"com.river.connector.github.model.BlobContent.url","location":"connector/connector-github/com.river.connector.github.model/-blob-content/url.html","searchKeys":["url","val url: String","com.river.connector.github.model.BlobContent.url"]},{"name":"val url: String","description":"com.river.connector.github.model.Content.File.url","location":"connector/connector-github/com.river.connector.github.model/-content/-file/url.html","searchKeys":["url","val url: String","com.river.connector.github.model.Content.File.url"]},{"name":"val url: String","description":"com.river.connector.github.model.TreeRef.url","location":"connector/connector-github/com.river.connector.github.model/-tree-ref/url.html","searchKeys":["url","val url: String","com.river.connector.github.model.TreeRef.url"]},{"name":"val user: Issue.User","description":"com.river.connector.github.model.Issue.user","location":"connector/connector-github/com.river.connector.github.model/-issue/user.html","searchKeys":["user","val user: Issue.User","com.river.connector.github.model.Issue.user"]},{"name":"val user: PullRequest.User","description":"com.river.connector.github.model.PullRequest.user","location":"connector/connector-github/com.river.connector.github.model/-pull-request/user.html","searchKeys":["user","val user: PullRequest.User","com.river.connector.github.model.PullRequest.user"]},{"name":"val watchers: Int","description":"com.river.connector.github.model.Repository.watchers","location":"connector/connector-github/com.river.connector.github.model/-repository/watchers.html","searchKeys":["watchers","val watchers: Int","com.river.connector.github.model.Repository.watchers"]},{"name":"var assignee: String?","description":"com.river.connector.github.model.query.RepositoryIssueQuery.assignee","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/assignee.html","searchKeys":["assignee","var assignee: String?","com.river.connector.github.model.query.RepositoryIssueQuery.assignee"]},{"name":"var author: String?","description":"com.river.connector.github.model.query.CommitQuery.author","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/author.html","searchKeys":["author","var author: String?","com.river.connector.github.model.query.CommitQuery.author"]},{"name":"var base: String?","description":"com.river.connector.github.model.query.PullRequestQuery.base","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/base.html","searchKeys":["base","var base: String?","com.river.connector.github.model.query.PullRequestQuery.base"]},{"name":"var collab: Boolean","description":"com.river.connector.github.model.query.IssueQuery.collab","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/collab.html","searchKeys":["collab","var collab: Boolean","com.river.connector.github.model.query.IssueQuery.collab"]},{"name":"var committer: String?","description":"com.river.connector.github.model.query.CommitQuery.committer","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/committer.html","searchKeys":["committer","var committer: String?","com.river.connector.github.model.query.CommitQuery.committer"]},{"name":"var creator: String?","description":"com.river.connector.github.model.query.RepositoryIssueQuery.creator","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/creator.html","searchKeys":["creator","var creator: String?","com.river.connector.github.model.query.RepositoryIssueQuery.creator"]},{"name":"var direction: IssueQuery.Direction","description":"com.river.connector.github.model.query.IssueQuery.direction","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/direction.html","searchKeys":["direction","var direction: IssueQuery.Direction","com.river.connector.github.model.query.IssueQuery.direction"]},{"name":"var direction: PullRequestQuery.Direction?","description":"com.river.connector.github.model.query.PullRequestQuery.direction","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/direction.html","searchKeys":["direction","var direction: PullRequestQuery.Direction?","com.river.connector.github.model.query.PullRequestQuery.direction"]},{"name":"var direction: RepositoryIssueQuery.Direction","description":"com.river.connector.github.model.query.RepositoryIssueQuery.direction","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/direction.html","searchKeys":["direction","var direction: RepositoryIssueQuery.Direction","com.river.connector.github.model.query.RepositoryIssueQuery.direction"]},{"name":"var direction: RepositoryQuery.Direction","description":"com.river.connector.github.model.query.RepositoryQuery.direction","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/direction.html","searchKeys":["direction","var direction: RepositoryQuery.Direction","com.river.connector.github.model.query.RepositoryQuery.direction"]},{"name":"var filter: IssueQuery.Filter","description":"com.river.connector.github.model.query.IssueQuery.filter","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/filter.html","searchKeys":["filter","var filter: IssueQuery.Filter","com.river.connector.github.model.query.IssueQuery.filter"]},{"name":"var head: String?","description":"com.river.connector.github.model.query.PullRequestQuery.head","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/head.html","searchKeys":["head","var head: String?","com.river.connector.github.model.query.PullRequestQuery.head"]},{"name":"var labels: String?","description":"com.river.connector.github.model.query.IssueQuery.labels","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/labels.html","searchKeys":["labels","var labels: String?","com.river.connector.github.model.query.IssueQuery.labels"]},{"name":"var labels: String?","description":"com.river.connector.github.model.query.RepositoryIssueQuery.labels","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/labels.html","searchKeys":["labels","var labels: String?","com.river.connector.github.model.query.RepositoryIssueQuery.labels"]},{"name":"var mentioned: String?","description":"com.river.connector.github.model.query.RepositoryIssueQuery.mentioned","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/mentioned.html","searchKeys":["mentioned","var mentioned: String?","com.river.connector.github.model.query.RepositoryIssueQuery.mentioned"]},{"name":"var milestone: String?","description":"com.river.connector.github.model.query.RepositoryIssueQuery.milestone","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/milestone.html","searchKeys":["milestone","var milestone: String?","com.river.connector.github.model.query.RepositoryIssueQuery.milestone"]},{"name":"var orgs: Boolean","description":"com.river.connector.github.model.query.IssueQuery.orgs","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/orgs.html","searchKeys":["orgs","var orgs: Boolean","com.river.connector.github.model.query.IssueQuery.orgs"]},{"name":"var owned: Boolean","description":"com.river.connector.github.model.query.IssueQuery.owned","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/owned.html","searchKeys":["owned","var owned: Boolean","com.river.connector.github.model.query.IssueQuery.owned"]},{"name":"var path: String?","description":"com.river.connector.github.model.query.CommitQuery.path","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/path.html","searchKeys":["path","var path: String?","com.river.connector.github.model.query.CommitQuery.path"]},{"name":"var pulls: Boolean","description":"com.river.connector.github.model.query.IssueQuery.pulls","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/pulls.html","searchKeys":["pulls","var pulls: Boolean","com.river.connector.github.model.query.IssueQuery.pulls"]},{"name":"var sha: String?","description":"com.river.connector.github.model.query.CommitQuery.sha","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/sha.html","searchKeys":["sha","var sha: String?","com.river.connector.github.model.query.CommitQuery.sha"]},{"name":"var since: String?","description":"com.river.connector.github.model.query.IssueQuery.since","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/since.html","searchKeys":["since","var since: String?","com.river.connector.github.model.query.IssueQuery.since"]},{"name":"var since: String?","description":"com.river.connector.github.model.query.RepositoryIssueQuery.since","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/since.html","searchKeys":["since","var since: String?","com.river.connector.github.model.query.RepositoryIssueQuery.since"]},{"name":"var since: ZonedDateTime?","description":"com.river.connector.github.model.query.CommitQuery.since","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/since.html","searchKeys":["since","var since: ZonedDateTime?","com.river.connector.github.model.query.CommitQuery.since"]},{"name":"var sort: IssueQuery.Sort","description":"com.river.connector.github.model.query.IssueQuery.sort","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/sort.html","searchKeys":["sort","var sort: IssueQuery.Sort","com.river.connector.github.model.query.IssueQuery.sort"]},{"name":"var sort: PullRequestQuery.Sort","description":"com.river.connector.github.model.query.PullRequestQuery.sort","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/sort.html","searchKeys":["sort","var sort: PullRequestQuery.Sort","com.river.connector.github.model.query.PullRequestQuery.sort"]},{"name":"var sort: RepositoryIssueQuery.Sort","description":"com.river.connector.github.model.query.RepositoryIssueQuery.sort","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/sort.html","searchKeys":["sort","var sort: RepositoryIssueQuery.Sort","com.river.connector.github.model.query.RepositoryIssueQuery.sort"]},{"name":"var sort: RepositoryQuery.Sort","description":"com.river.connector.github.model.query.RepositoryQuery.sort","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/sort.html","searchKeys":["sort","var sort: RepositoryQuery.Sort","com.river.connector.github.model.query.RepositoryQuery.sort"]},{"name":"var state: IssueQuery.State","description":"com.river.connector.github.model.query.IssueQuery.state","location":"connector/connector-github/com.river.connector.github.model.query/-issue-query/state.html","searchKeys":["state","var state: IssueQuery.State","com.river.connector.github.model.query.IssueQuery.state"]},{"name":"var state: PullRequestQuery.State","description":"com.river.connector.github.model.query.PullRequestQuery.state","location":"connector/connector-github/com.river.connector.github.model.query/-pull-request-query/state.html","searchKeys":["state","var state: PullRequestQuery.State","com.river.connector.github.model.query.PullRequestQuery.state"]},{"name":"var state: RepositoryIssueQuery.State","description":"com.river.connector.github.model.query.RepositoryIssueQuery.state","location":"connector/connector-github/com.river.connector.github.model.query/-repository-issue-query/state.html","searchKeys":["state","var state: RepositoryIssueQuery.State","com.river.connector.github.model.query.RepositoryIssueQuery.state"]},{"name":"var type: RepositoryQuery.Type","description":"com.river.connector.github.model.query.RepositoryQuery.type","location":"connector/connector-github/com.river.connector.github.model.query/-repository-query/type.html","searchKeys":["type","var type: RepositoryQuery.Type","com.river.connector.github.model.query.RepositoryQuery.type"]},{"name":"var until: ZonedDateTime?","description":"com.river.connector.github.model.query.CommitQuery.until","location":"connector/connector-github/com.river.connector.github.model.query/-commit-query/until.html","searchKeys":["until","var until: ZonedDateTime?","com.river.connector.github.model.query.CommitQuery.until"]},{"name":"abstract val id: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.id","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/id.html","searchKeys":["id","abstract val id: String","com.river.connector.aws.sqs.model.SendMessageResponse.id"]},{"name":"abstract val internalBatchResponse: SendMessageBatchResponse","description":"com.river.connector.aws.sqs.model.SendMessageResponse.internalBatchResponse","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/internal-batch-response.html","searchKeys":["internalBatchResponse","abstract val internalBatchResponse: SendMessageBatchResponse","com.river.connector.aws.sqs.model.SendMessageResponse.internalBatchResponse"]},{"name":"class ChangeMessageVisibility(val timeout: Int) : Acknowledgment","description":"com.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/-change-message-visibility/index.html","searchKeys":["ChangeMessageVisibility","class ChangeMessageVisibility(val timeout: Int) : Acknowledgment","com.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility"]},{"name":"class CommitConfiguration","description":"com.river.connector.aws.sqs.model.CommitConfiguration","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-commit-configuration/index.html","searchKeys":["CommitConfiguration","class CommitConfiguration","com.river.connector.aws.sqs.model.CommitConfiguration"]},{"name":"class ReceiveConfiguration","description":"com.river.connector.aws.sqs.model.ReceiveConfiguration","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-configuration/index.html","searchKeys":["ReceiveConfiguration","class ReceiveConfiguration","com.river.connector.aws.sqs.model.ReceiveConfiguration"]},{"name":"class ReceiveMessageRequestBuilder(var queueUrl: String? = null, var waitTimeSeconds: Int = 20, var maxNumberOfMessages: Int = 10, var visibilityTimeout: Int = 30, var receiveRequestAttemptId: String? = null, var messageAttributeNames: List<String> = emptyList(), var attributeNames: List<QueueAttributeName> = emptyList())","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/index.html","searchKeys":["ReceiveMessageRequestBuilder","class ReceiveMessageRequestBuilder(var queueUrl: String? = null, var waitTimeSeconds: Int = 20, var maxNumberOfMessages: Int = 10, var visibilityTimeout: Int = 30, var receiveRequestAttemptId: String? = null, var messageAttributeNames: List<String> = emptyList(), var attributeNames: List<QueueAttributeName> = emptyList())","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder"]},{"name":"constructor()","description":"com.river.connector.aws.sqs.model.CommitConfiguration.CommitConfiguration","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-commit-configuration/-commit-configuration.html","searchKeys":["CommitConfiguration","constructor()","com.river.connector.aws.sqs.model.CommitConfiguration.CommitConfiguration"]},{"name":"constructor()","description":"com.river.connector.aws.sqs.model.ReceiveConfiguration.ReceiveConfiguration","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-configuration/-receive-configuration.html","searchKeys":["ReceiveConfiguration","constructor()","com.river.connector.aws.sqs.model.ReceiveConfiguration.ReceiveConfiguration"]},{"name":"constructor(body: String, delaySeconds: Int = 0, messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), id: String = UUID.randomUUID().toString())","description":"com.river.connector.aws.sqs.model.SendMessageRequest.SendMessageRequest","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-request/-send-message-request.html","searchKeys":["SendMessageRequest","constructor(body: String, delaySeconds: Int = 0, messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), id: String = UUID.randomUUID().toString())","com.river.connector.aws.sqs.model.SendMessageRequest.SendMessageRequest"]},{"name":"constructor(id: String, code: String, message: String, senderFault: Boolean, internalBatchResponse: SendMessageBatchResponse)","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure.Failure","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/-failure.html","searchKeys":["Failure","constructor(id: String, code: String, message: String, senderFault: Boolean, internalBatchResponse: SendMessageBatchResponse)","com.river.connector.aws.sqs.model.SendMessageResponse.Failure.Failure"]},{"name":"constructor(id: String, messageId: String, sequenceNumber: String?, md5OfMessageBody: String, md5OfMessageAttributes: String?, md5OfMessageSystemAttributes: String?, internalBatchResponse: SendMessageBatchResponse)","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.Successful","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/-successful.html","searchKeys":["Successful","constructor(id: String, messageId: String, sequenceNumber: String?, md5OfMessageBody: String, md5OfMessageAttributes: String?, md5OfMessageSystemAttributes: String?, internalBatchResponse: SendMessageBatchResponse)","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.Successful"]},{"name":"constructor(message: Message, acknowledgment: Acknowledgment, response: SdkResponse?)","description":"com.river.connector.aws.sqs.model.AcknowledgmentResult.AcknowledgmentResult","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment-result/-acknowledgment-result.html","searchKeys":["AcknowledgmentResult","constructor(message: Message, acknowledgment: Acknowledgment, response: SdkResponse?)","com.river.connector.aws.sqs.model.AcknowledgmentResult.AcknowledgmentResult"]},{"name":"constructor(message: Message, acknowledgment: T)","description":"com.river.connector.aws.sqs.model.MessageAcknowledgment.MessageAcknowledgment","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-message-acknowledgment/-message-acknowledgment.html","searchKeys":["MessageAcknowledgment","constructor(message: Message, acknowledgment: T)","com.river.connector.aws.sqs.model.MessageAcknowledgment.MessageAcknowledgment"]},{"name":"constructor(queueUrl: String? = null, waitTimeSeconds: Int = 20, maxNumberOfMessages: Int = 10, visibilityTimeout: Int = 30, receiveRequestAttemptId: String? = null, messageAttributeNames: List<String> = emptyList(), attributeNames: List<QueueAttributeName> = emptyList())","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.ReceiveMessageRequestBuilder","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/-receive-message-request-builder.html","searchKeys":["ReceiveMessageRequestBuilder","constructor(queueUrl: String? = null, waitTimeSeconds: Int = 20, maxNumberOfMessages: Int = 10, visibilityTimeout: Int = 30, receiveRequestAttemptId: String? = null, messageAttributeNames: List<String> = emptyList(), attributeNames: List<QueueAttributeName> = emptyList())","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.ReceiveMessageRequestBuilder"]},{"name":"constructor(timeout: Int)","description":"com.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.ChangeMessageVisibility","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/-change-message-visibility/-change-message-visibility.html","searchKeys":["ChangeMessageVisibility","constructor(timeout: Int)","com.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.ChangeMessageVisibility"]},{"name":"data class AcknowledgmentResult<T : SdkResponse>(val message: Message, val acknowledgment: Acknowledgment, val response: SdkResponse?)","description":"com.river.connector.aws.sqs.model.AcknowledgmentResult","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment-result/index.html","searchKeys":["AcknowledgmentResult","data class AcknowledgmentResult<T : SdkResponse>(val message: Message, val acknowledgment: Acknowledgment, val response: SdkResponse?)","com.river.connector.aws.sqs.model.AcknowledgmentResult"]},{"name":"data class Failure(val id: String, val code: String, val message: String, val senderFault: Boolean, val internalBatchResponse: SendMessageBatchResponse) : SendMessageResponse","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/index.html","searchKeys":["Failure","data class Failure(val id: String, val code: String, val message: String, val senderFault: Boolean, val internalBatchResponse: SendMessageBatchResponse) : SendMessageResponse","com.river.connector.aws.sqs.model.SendMessageResponse.Failure"]},{"name":"data class MessageAcknowledgment<T : Acknowledgment>(val message: Message, val acknowledgment: T)","description":"com.river.connector.aws.sqs.model.MessageAcknowledgment","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-message-acknowledgment/index.html","searchKeys":["MessageAcknowledgment","data class MessageAcknowledgment<T : Acknowledgment>(val message: Message, val acknowledgment: T)","com.river.connector.aws.sqs.model.MessageAcknowledgment"]},{"name":"data class SendMessageRequest(val body: String, val delaySeconds: Int = 0, val messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), val id: String = UUID.randomUUID().toString())","description":"com.river.connector.aws.sqs.model.SendMessageRequest","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-request/index.html","searchKeys":["SendMessageRequest","data class SendMessageRequest(val body: String, val delaySeconds: Int = 0, val messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), val id: String = UUID.randomUUID().toString())","com.river.connector.aws.sqs.model.SendMessageRequest"]},{"name":"data class Successful(val id: String, val messageId: String, val sequenceNumber: String?, val md5OfMessageBody: String, val md5OfMessageAttributes: String?, val md5OfMessageSystemAttributes: String?, val internalBatchResponse: SendMessageBatchResponse) : SendMessageResponse","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/index.html","searchKeys":["Successful","data class Successful(val id: String, val messageId: String, val sequenceNumber: String?, val md5OfMessageBody: String, val md5OfMessageAttributes: String?, val md5OfMessageSystemAttributes: String?, val internalBatchResponse: SendMessageBatchResponse) : SendMessageResponse","com.river.connector.aws.sqs.model.SendMessageResponse.Successful"]},{"name":"fun Message.acknowledgeWith(acknowledgment: Acknowledgment): MessageAcknowledgment<Acknowledgment>","description":"com.river.connector.aws.sqs.acknowledgeWith","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/acknowledge-with.html","searchKeys":["acknowledgeWith","fun Message.acknowledgeWith(acknowledgment: Acknowledgment): MessageAcknowledgment<Acknowledgment>","com.river.connector.aws.sqs.acknowledgeWith"]},{"name":"fun SqsAsyncClient.acknowledgmentMessageFlow(upstream: Flow<MessageAcknowledgment<out Acknowledgment>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<AcknowledgmentResult<SdkResponse>>","description":"com.river.connector.aws.sqs.acknowledgmentMessageFlow","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/acknowledgment-message-flow.html","searchKeys":["acknowledgmentMessageFlow","fun SqsAsyncClient.acknowledgmentMessageFlow(upstream: Flow<MessageAcknowledgment<out Acknowledgment>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<AcknowledgmentResult<SdkResponse>>","com.river.connector.aws.sqs.acknowledgmentMessageFlow"]},{"name":"fun SqsAsyncClient.changeMessageVisibilityFlow(upstream: Flow<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<Pair<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>, ChangeMessageVisibilityBatchResponse>>","description":"com.river.connector.aws.sqs.changeMessageVisibilityFlow","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/change-message-visibility-flow.html","searchKeys":["changeMessageVisibilityFlow","fun SqsAsyncClient.changeMessageVisibilityFlow(upstream: Flow<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<Pair<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>, ChangeMessageVisibilityBatchResponse>>","com.river.connector.aws.sqs.changeMessageVisibilityFlow"]},{"name":"fun SqsAsyncClient.deleteMessagesFlow(upstream: Flow<MessageAcknowledgment<Acknowledgment.Delete>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<Pair<MessageAcknowledgment<Acknowledgment.Delete>, DeleteMessageBatchResponse>>","description":"com.river.connector.aws.sqs.deleteMessagesFlow","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/delete-messages-flow.html","searchKeys":["deleteMessagesFlow","fun SqsAsyncClient.deleteMessagesFlow(upstream: Flow<MessageAcknowledgment<Acknowledgment.Delete>>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<Pair<MessageAcknowledgment<Acknowledgment.Delete>, DeleteMessageBatchResponse>>","com.river.connector.aws.sqs.deleteMessagesFlow"]},{"name":"fun SqsAsyncClient.receiveMessagesAsFlow(concurrency: ConcurrencyStrategy = ConcurrencyStrategy.disabled, stopOnEmptyList: Boolean = false, builder: suspend ReceiveMessageRequestBuilder.() -> Unit): Flow<Message>","description":"com.river.connector.aws.sqs.receiveMessagesAsFlow","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/receive-messages-as-flow.html","searchKeys":["receiveMessagesAsFlow","fun SqsAsyncClient.receiveMessagesAsFlow(concurrency: ConcurrencyStrategy = ConcurrencyStrategy.disabled, stopOnEmptyList: Boolean = false, builder: suspend ReceiveMessageRequestBuilder.() -> Unit): Flow<Message>","com.river.connector.aws.sqs.receiveMessagesAsFlow"]},{"name":"fun SqsAsyncClient.sendMessageFlow(upstream: Flow<SendMessageRequest>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<SendMessageResponse>","description":"com.river.connector.aws.sqs.sendMessageFlow","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/send-message-flow.html","searchKeys":["sendMessageFlow","fun SqsAsyncClient.sendMessageFlow(upstream: Flow<SendMessageRequest>, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), queueUrl: suspend () -> String): Flow<SendMessageResponse>","com.river.connector.aws.sqs.sendMessageFlow"]},{"name":"fun build(): ReceiveMessageRequest","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.build","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/build.html","searchKeys":["build","fun build(): ReceiveMessageRequest","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.build"]},{"name":"fun receiveRequest(f: ReceiveMessageRequestBuilder.() -> Unit)","description":"com.river.connector.aws.sqs.model.ReceiveConfiguration.receiveRequest","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-configuration/receive-request.html","searchKeys":["receiveRequest","fun receiveRequest(f: ReceiveMessageRequestBuilder.() -> Unit)","com.river.connector.aws.sqs.model.ReceiveConfiguration.receiveRequest"]},{"name":"interface SendMessageResponse","description":"com.river.connector.aws.sqs.model.SendMessageResponse","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/index.html","searchKeys":["SendMessageResponse","interface SendMessageResponse","com.river.connector.aws.sqs.model.SendMessageResponse"]},{"name":"object Delete : Acknowledgment","description":"com.river.connector.aws.sqs.model.Acknowledgment.Delete","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/-delete/index.html","searchKeys":["Delete","object Delete : Acknowledgment","com.river.connector.aws.sqs.model.Acknowledgment.Delete"]},{"name":"object Ignore : Acknowledgment","description":"com.river.connector.aws.sqs.model.Acknowledgment.Ignore","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/-ignore/index.html","searchKeys":["Ignore","object Ignore : Acknowledgment","com.river.connector.aws.sqs.model.Acknowledgment.Ignore"]},{"name":"open override fun toString(): String","description":"com.river.connector.aws.sqs.model.Acknowledgment.toString","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/to-string.html","searchKeys":["toString","open override fun toString(): String","com.river.connector.aws.sqs.model.Acknowledgment.toString"]},{"name":"open override val id: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure.id","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/id.html","searchKeys":["id","open override val id: String","com.river.connector.aws.sqs.model.SendMessageResponse.Failure.id"]},{"name":"open override val id: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.id","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/id.html","searchKeys":["id","open override val id: String","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.id"]},{"name":"open override val internalBatchResponse: SendMessageBatchResponse","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure.internalBatchResponse","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/internal-batch-response.html","searchKeys":["internalBatchResponse","open override val internalBatchResponse: SendMessageBatchResponse","com.river.connector.aws.sqs.model.SendMessageResponse.Failure.internalBatchResponse"]},{"name":"open override val internalBatchResponse: SendMessageBatchResponse","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.internalBatchResponse","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/internal-batch-response.html","searchKeys":["internalBatchResponse","open override val internalBatchResponse: SendMessageBatchResponse","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.internalBatchResponse"]},{"name":"sealed class Acknowledgment","description":"com.river.connector.aws.sqs.model.Acknowledgment","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/index.html","searchKeys":["Acknowledgment","sealed class Acknowledgment","com.river.connector.aws.sqs.model.Acknowledgment"]},{"name":"suspend fun SqsAsyncClient.getQueueUrlByName(name: String): String","description":"com.river.connector.aws.sqs.getQueueUrlByName","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/get-queue-url-by-name.html","searchKeys":["getQueueUrlByName","suspend fun SqsAsyncClient.getQueueUrlByName(name: String): String","com.river.connector.aws.sqs.getQueueUrlByName"]},{"name":"suspend fun SqsAsyncClient.onMessage(queueName: String, concurrency: Int = 1, receiveConfiguration: ReceiveConfiguration.() -> Unit = {}, commitConfiguration: CommitConfiguration.() -> Unit = {}, f: suspend (Message) -> MessageAcknowledgment<Acknowledgment>): Job","description":"com.river.connector.aws.sqs.onMessage","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/on-message.html","searchKeys":["onMessage","suspend fun SqsAsyncClient.onMessage(queueName: String, concurrency: Int = 1, receiveConfiguration: ReceiveConfiguration.() -> Unit = {}, commitConfiguration: CommitConfiguration.() -> Unit = {}, f: suspend (Message) -> MessageAcknowledgment<Acknowledgment>): Job","com.river.connector.aws.sqs.onMessage"]},{"name":"suspend fun SqsAsyncClient.onMessages(queueName: String, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), receiveConfiguration: ReceiveConfiguration.() -> Unit = {}, commitConfiguration: CommitConfiguration.() -> Unit = {}, f: suspend (List<Message>) -> List<MessageAcknowledgment<Acknowledgment>>): Job","description":"com.river.connector.aws.sqs.onMessages","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs/on-messages.html","searchKeys":["onMessages","suspend fun SqsAsyncClient.onMessages(queueName: String, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 250.milliseconds), receiveConfiguration: ReceiveConfiguration.() -> Unit = {}, commitConfiguration: CommitConfiguration.() -> Unit = {}, f: suspend (List<Message>) -> List<MessageAcknowledgment<Acknowledgment>>): Job","com.river.connector.aws.sqs.onMessages"]},{"name":"val acknowledgment: Acknowledgment","description":"com.river.connector.aws.sqs.model.AcknowledgmentResult.acknowledgment","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment-result/acknowledgment.html","searchKeys":["acknowledgment","val acknowledgment: Acknowledgment","com.river.connector.aws.sqs.model.AcknowledgmentResult.acknowledgment"]},{"name":"val acknowledgment: T","description":"com.river.connector.aws.sqs.model.MessageAcknowledgment.acknowledgment","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-message-acknowledgment/acknowledgment.html","searchKeys":["acknowledgment","val acknowledgment: T","com.river.connector.aws.sqs.model.MessageAcknowledgment.acknowledgment"]},{"name":"val body: String","description":"com.river.connector.aws.sqs.model.SendMessageRequest.body","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-request/body.html","searchKeys":["body","val body: String","com.river.connector.aws.sqs.model.SendMessageRequest.body"]},{"name":"val code: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure.code","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/code.html","searchKeys":["code","val code: String","com.river.connector.aws.sqs.model.SendMessageResponse.Failure.code"]},{"name":"val delaySeconds: Int = 0","description":"com.river.connector.aws.sqs.model.SendMessageRequest.delaySeconds","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-request/delay-seconds.html","searchKeys":["delaySeconds","val delaySeconds: Int = 0","com.river.connector.aws.sqs.model.SendMessageRequest.delaySeconds"]},{"name":"val id: String","description":"com.river.connector.aws.sqs.model.SendMessageRequest.id","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-request/id.html","searchKeys":["id","val id: String","com.river.connector.aws.sqs.model.SendMessageRequest.id"]},{"name":"val md5OfMessageAttributes: String?","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.md5OfMessageAttributes","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/md5-of-message-attributes.html","searchKeys":["md5OfMessageAttributes","val md5OfMessageAttributes: String?","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.md5OfMessageAttributes"]},{"name":"val md5OfMessageBody: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.md5OfMessageBody","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/md5-of-message-body.html","searchKeys":["md5OfMessageBody","val md5OfMessageBody: String","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.md5OfMessageBody"]},{"name":"val md5OfMessageSystemAttributes: String?","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.md5OfMessageSystemAttributes","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/md5-of-message-system-attributes.html","searchKeys":["md5OfMessageSystemAttributes","val md5OfMessageSystemAttributes: String?","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.md5OfMessageSystemAttributes"]},{"name":"val message: Message","description":"com.river.connector.aws.sqs.model.AcknowledgmentResult.message","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment-result/message.html","searchKeys":["message","val message: Message","com.river.connector.aws.sqs.model.AcknowledgmentResult.message"]},{"name":"val message: Message","description":"com.river.connector.aws.sqs.model.MessageAcknowledgment.message","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-message-acknowledgment/message.html","searchKeys":["message","val message: Message","com.river.connector.aws.sqs.model.MessageAcknowledgment.message"]},{"name":"val message: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure.message","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/message.html","searchKeys":["message","val message: String","com.river.connector.aws.sqs.model.SendMessageResponse.Failure.message"]},{"name":"val messageAttributes: Map<String, MessageAttributeValue>","description":"com.river.connector.aws.sqs.model.SendMessageRequest.messageAttributes","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-request/message-attributes.html","searchKeys":["messageAttributes","val messageAttributes: Map<String, MessageAttributeValue>","com.river.connector.aws.sqs.model.SendMessageRequest.messageAttributes"]},{"name":"val messageId: String","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.messageId","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/message-id.html","searchKeys":["messageId","val messageId: String","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.messageId"]},{"name":"val response: SdkResponse?","description":"com.river.connector.aws.sqs.model.AcknowledgmentResult.response","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment-result/response.html","searchKeys":["response","val response: SdkResponse?","com.river.connector.aws.sqs.model.AcknowledgmentResult.response"]},{"name":"val senderFault: Boolean","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Failure.senderFault","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-failure/sender-fault.html","searchKeys":["senderFault","val senderFault: Boolean","com.river.connector.aws.sqs.model.SendMessageResponse.Failure.senderFault"]},{"name":"val sequenceNumber: String?","description":"com.river.connector.aws.sqs.model.SendMessageResponse.Successful.sequenceNumber","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-send-message-response/-successful/sequence-number.html","searchKeys":["sequenceNumber","val sequenceNumber: String?","com.river.connector.aws.sqs.model.SendMessageResponse.Successful.sequenceNumber"]},{"name":"val timeout: Int","description":"com.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.timeout","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-acknowledgment/-change-message-visibility/timeout.html","searchKeys":["timeout","val timeout: Int","com.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.timeout"]},{"name":"var attributeNames: List<QueueAttributeName>","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.attributeNames","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/attribute-names.html","searchKeys":["attributeNames","var attributeNames: List<QueueAttributeName>","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.attributeNames"]},{"name":"var concurrency: Int","description":"com.river.connector.aws.sqs.model.CommitConfiguration.concurrency","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-commit-configuration/concurrency.html","searchKeys":["concurrency","var concurrency: Int","com.river.connector.aws.sqs.model.CommitConfiguration.concurrency"]},{"name":"var concurrency: Int","description":"com.river.connector.aws.sqs.model.ReceiveConfiguration.concurrency","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-configuration/concurrency.html","searchKeys":["concurrency","var concurrency: Int","com.river.connector.aws.sqs.model.ReceiveConfiguration.concurrency"]},{"name":"var groupStrategy: GroupStrategy.TimeWindow","description":"com.river.connector.aws.sqs.model.CommitConfiguration.groupStrategy","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-commit-configuration/group-strategy.html","searchKeys":["groupStrategy","var groupStrategy: GroupStrategy.TimeWindow","com.river.connector.aws.sqs.model.CommitConfiguration.groupStrategy"]},{"name":"var maxNumberOfMessages: Int","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.maxNumberOfMessages","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/max-number-of-messages.html","searchKeys":["maxNumberOfMessages","var maxNumberOfMessages: Int","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.maxNumberOfMessages"]},{"name":"var messageAttributeNames: List<String>","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.messageAttributeNames","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/message-attribute-names.html","searchKeys":["messageAttributeNames","var messageAttributeNames: List<String>","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.messageAttributeNames"]},{"name":"var queueUrl: String?","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.queueUrl","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/queue-url.html","searchKeys":["queueUrl","var queueUrl: String?","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.queueUrl"]},{"name":"var receiveRequestAttemptId: String?","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.receiveRequestAttemptId","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/receive-request-attempt-id.html","searchKeys":["receiveRequestAttemptId","var receiveRequestAttemptId: String?","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.receiveRequestAttemptId"]},{"name":"var stopOnEmptyList: Boolean","description":"com.river.connector.aws.sqs.model.ReceiveConfiguration.stopOnEmptyList","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-configuration/stop-on-empty-list.html","searchKeys":["stopOnEmptyList","var stopOnEmptyList: Boolean","com.river.connector.aws.sqs.model.ReceiveConfiguration.stopOnEmptyList"]},{"name":"var visibilityTimeout: Int","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.visibilityTimeout","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/visibility-timeout.html","searchKeys":["visibilityTimeout","var visibilityTimeout: Int","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.visibilityTimeout"]},{"name":"var waitTimeSeconds: Int","description":"com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.waitTimeSeconds","location":"connector/connector-aws/connector-aws-sqs/com.river.connector.aws.sqs.model/-receive-message-request-builder/wait-time-seconds.html","searchKeys":["waitTimeSeconds","var waitTimeSeconds: Int","com.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.waitTimeSeconds"]},{"name":"DELETE","description":"com.river.connector.http.HttpMethod.DELETE","location":"connector/connector-http/com.river.connector.http/-http-method/-d-e-l-e-t-e/index.html","searchKeys":["DELETE","DELETE","com.river.connector.http.HttpMethod.DELETE"]},{"name":"GET","description":"com.river.connector.http.HttpMethod.GET","location":"connector/connector-http/com.river.connector.http/-http-method/-g-e-t/index.html","searchKeys":["GET","GET","com.river.connector.http.HttpMethod.GET"]},{"name":"HEAD","description":"com.river.connector.http.HttpMethod.HEAD","location":"connector/connector-http/com.river.connector.http/-http-method/-h-e-a-d/index.html","searchKeys":["HEAD","HEAD","com.river.connector.http.HttpMethod.HEAD"]},{"name":"OPTIONS","description":"com.river.connector.http.HttpMethod.OPTIONS","location":"connector/connector-http/com.river.connector.http/-http-method/-o-p-t-i-o-n-s/index.html","searchKeys":["OPTIONS","OPTIONS","com.river.connector.http.HttpMethod.OPTIONS"]},{"name":"PATCH","description":"com.river.connector.http.HttpMethod.PATCH","location":"connector/connector-http/com.river.connector.http/-http-method/-p-a-t-c-h/index.html","searchKeys":["PATCH","PATCH","com.river.connector.http.HttpMethod.PATCH"]},{"name":"POST","description":"com.river.connector.http.HttpMethod.POST","location":"connector/connector-http/com.river.connector.http/-http-method/-p-o-s-t/index.html","searchKeys":["POST","POST","com.river.connector.http.HttpMethod.POST"]},{"name":"PUT","description":"com.river.connector.http.HttpMethod.PUT","location":"connector/connector-http/com.river.connector.http/-http-method/-p-u-t/index.html","searchKeys":["PUT","PUT","com.river.connector.http.HttpMethod.PUT"]},{"name":"abstract fun headerValue(): String","description":"com.river.connector.http.Authorization.headerValue","location":"connector/connector-http/com.river.connector.http/-authorization/header-value.html","searchKeys":["headerValue","abstract fun headerValue(): String","com.river.connector.http.Authorization.headerValue"]},{"name":"class CustomHttpRequestBuilder(method: HttpMethod, other: HttpRequest.Builder = newBuilder().method(method.name, noBody())) : HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/index.html","searchKeys":["CustomHttpRequestBuilder","class CustomHttpRequestBuilder(method: HttpMethod, other: HttpRequest.Builder = newBuilder().method(method.name, noBody())) : HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder"]},{"name":"constructor(id: String? = null, event: String? = null, data: List<String>, comments: List<String> = listOf())","description":"com.river.connector.http.ServerSentEvent.ServerSentEvent","location":"connector/connector-http/com.river.connector.http/-server-sent-event/-server-sent-event.html","searchKeys":["ServerSentEvent","constructor(id: String? = null, event: String? = null, data: List<String>, comments: List<String> = listOf())","com.river.connector.http.ServerSentEvent.ServerSentEvent"]},{"name":"constructor(method: HttpMethod, other: HttpRequest.Builder = newBuilder().method(method.name, noBody()))","description":"com.river.connector.http.CustomHttpRequestBuilder.CustomHttpRequestBuilder","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/-custom-http-request-builder.html","searchKeys":["CustomHttpRequestBuilder","constructor(method: HttpMethod, other: HttpRequest.Builder = newBuilder().method(method.name, noBody()))","com.river.connector.http.CustomHttpRequestBuilder.CustomHttpRequestBuilder"]},{"name":"data class ServerSentEvent(val id: String? = null, val event: String? = null, val data: List<String>, val comments: List<String> = listOf())","description":"com.river.connector.http.ServerSentEvent","location":"connector/connector-http/com.river.connector.http/-server-sent-event/index.html","searchKeys":["ServerSentEvent","data class ServerSentEvent(val id: String? = null, val event: String? = null, val data: List<String>, val comments: List<String> = listOf())","com.river.connector.http.ServerSentEvent"]},{"name":"enum HttpMethod : Enum<HttpMethod> ","description":"com.river.connector.http.HttpMethod","location":"connector/connector-http/com.river.connector.http/-http-method/index.html","searchKeys":["HttpMethod","enum HttpMethod : Enum<HttpMethod> ","com.river.connector.http.HttpMethod"]},{"name":"fun <T, R> HttpResponse.BodyHandler<T>.map(f: (T) -> R): HttpResponse.BodyHandler<R>","description":"com.river.connector.http.map","location":"connector/connector-http/com.river.connector.http/map.html","searchKeys":["map","fun <T, R> HttpResponse.BodyHandler<T>.map(f: (T) -> R): HttpResponse.BodyHandler<R>","com.river.connector.http.map"]},{"name":"fun <T> Flow<HttpRequest>.sendAndHandle(bodyHandler: HttpResponse.BodyHandler<T>, concurrency: Int = 1, httpClient: HttpClient = DefaultHttpClient): Flow<HttpResponse<T>>","description":"com.river.connector.http.sendAndHandle","location":"connector/connector-http/com.river.connector.http/send-and-handle.html","searchKeys":["sendAndHandle","fun <T> Flow<HttpRequest>.sendAndHandle(bodyHandler: HttpResponse.BodyHandler<T>, concurrency: Int = 1, httpClient: HttpClient = DefaultHttpClient): Flow<HttpResponse<T>>","com.river.connector.http.sendAndHandle"]},{"name":"fun <T> Flow<HttpRequest>.sendAndHandle(concurrency: Int = 1, httpClient: HttpClient = DefaultHttpClient, handle: CoroutineScope.() -> HttpResponse.BodyHandler<T>): Flow<HttpResponse<T>>","description":"com.river.connector.http.sendAndHandle","location":"connector/connector-http/com.river.connector.http/send-and-handle.html","searchKeys":["sendAndHandle","fun <T> Flow<HttpRequest>.sendAndHandle(concurrency: Int = 1, httpClient: HttpClient = DefaultHttpClient, handle: CoroutineScope.() -> HttpResponse.BodyHandler<T>): Flow<HttpResponse<T>>","com.river.connector.http.sendAndHandle"]},{"name":"fun <T> HttpResponse<Flow.Publisher<T>>.bodyAsFlow(): Flow<T>","description":"com.river.connector.http.bodyAsFlow","location":"connector/connector-http/com.river.connector.http/body-as-flow.html","searchKeys":["bodyAsFlow","fun <T> HttpResponse<Flow.Publisher<T>>.bodyAsFlow(): Flow<T>","com.river.connector.http.bodyAsFlow"]},{"name":"fun Flow<String>.parseAsServerSentEvents(): Flow<ServerSentEvent>","description":"com.river.connector.http.parseAsServerSentEvents","location":"connector/connector-http/com.river.connector.http/parse-as-server-sent-events.html","searchKeys":["parseAsServerSentEvents","fun Flow<String>.parseAsServerSentEvents(): Flow<ServerSentEvent>","com.river.connector.http.parseAsServerSentEvents"]},{"name":"fun accept(value: String): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.accept","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/accept.html","searchKeys":["accept","fun accept(value: String): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.accept"]},{"name":"fun basic(username: String, password: String): Authorization","description":"com.river.connector.http.Authorization.Companion.basic","location":"connector/connector-http/com.river.connector.http/-authorization/-companion/basic.html","searchKeys":["basic","fun basic(username: String, password: String): Authorization","com.river.connector.http.Authorization.Companion.basic"]},{"name":"fun bearer(token: String): Authorization","description":"com.river.connector.http.Authorization.Companion.bearer","location":"connector/connector-http/com.river.connector.http/-authorization/-companion/bearer.html","searchKeys":["bearer","fun bearer(token: String): Authorization","com.river.connector.http.Authorization.Companion.bearer"]},{"name":"fun body(body: HttpRequest.BodyPublisher): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.body","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/body.html","searchKeys":["body","fun body(body: HttpRequest.BodyPublisher): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.body"]},{"name":"fun byteArrayBody(value: ByteArray): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.byteArrayBody","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/byte-array-body.html","searchKeys":["byteArrayBody","fun byteArrayBody(value: ByteArray): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.byteArrayBody"]},{"name":"fun contentType(value: String): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.contentType","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/content-type.html","searchKeys":["contentType","fun contentType(value: String): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.contentType"]},{"name":"fun flowBody(value: Flow<ByteBuffer>, contentLength: Long? = null): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.flowBody","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/flow-body.html","searchKeys":["flowBody","fun flowBody(value: Flow<ByteBuffer>, contentLength: Long? = null): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.flowBody"]},{"name":"fun interface Authorization","description":"com.river.connector.http.Authorization","location":"connector/connector-http/com.river.connector.http/-authorization/index.html","searchKeys":["Authorization","fun interface Authorization","com.river.connector.http.Authorization"]},{"name":"fun publisherBody(body: Flow.Publisher<ByteBuffer>, contentLength: Long? = null): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.publisherBody","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/publisher-body.html","searchKeys":["publisherBody","fun publisherBody(body: Flow.Publisher<ByteBuffer>, contentLength: Long? = null): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.publisherBody"]},{"name":"fun query(name: String, value: String): CustomHttpRequestBuilder","description":"com.river.connector.http.CustomHttpRequestBuilder.query","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/query.html","searchKeys":["query","fun query(name: String, value: String): CustomHttpRequestBuilder","com.river.connector.http.CustomHttpRequestBuilder.query"]},{"name":"fun query(name: String, values: List<String>): CustomHttpRequestBuilder","description":"com.river.connector.http.CustomHttpRequestBuilder.query","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/query.html","searchKeys":["query","fun query(name: String, values: List<String>): CustomHttpRequestBuilder","com.river.connector.http.CustomHttpRequestBuilder.query"]},{"name":"fun query(name: String, vararg values: String): CustomHttpRequestBuilder","description":"com.river.connector.http.CustomHttpRequestBuilder.query","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/query.html","searchKeys":["query","fun query(name: String, vararg values: String): CustomHttpRequestBuilder","com.river.connector.http.CustomHttpRequestBuilder.query"]},{"name":"fun setHeaders(headers: Map<String, List<String>>): CustomHttpRequestBuilder","description":"com.river.connector.http.CustomHttpRequestBuilder.setHeaders","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/set-headers.html","searchKeys":["setHeaders","fun setHeaders(headers: Map<String, List<String>>): CustomHttpRequestBuilder","com.river.connector.http.CustomHttpRequestBuilder.setHeaders"]},{"name":"fun setQuery(name: String, values: List<String>): CustomHttpRequestBuilder","description":"com.river.connector.http.CustomHttpRequestBuilder.setQuery","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/set-query.html","searchKeys":["setQuery","fun setQuery(name: String, values: List<String>): CustomHttpRequestBuilder","com.river.connector.http.CustomHttpRequestBuilder.setQuery"]},{"name":"fun setQueryParameters(parameters: Map<String, List<String>>): CustomHttpRequestBuilder","description":"com.river.connector.http.CustomHttpRequestBuilder.setQueryParameters","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/set-query-parameters.html","searchKeys":["setQueryParameters","fun setQueryParameters(parameters: Map<String, List<String>>): CustomHttpRequestBuilder","com.river.connector.http.CustomHttpRequestBuilder.setQueryParameters"]},{"name":"fun stringBody(value: String, charset: Charset = Charset.defaultCharset()): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.stringBody","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/string-body.html","searchKeys":["stringBody","fun stringBody(value: String, charset: Charset = Charset.defaultCharset()): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.stringBody"]},{"name":"fun valueOf(value: String): HttpMethod","description":"com.river.connector.http.HttpMethod.valueOf","location":"connector/connector-http/com.river.connector.http/-http-method/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): HttpMethod","com.river.connector.http.HttpMethod.valueOf"]},{"name":"fun values(): Array<HttpMethod>","description":"com.river.connector.http.HttpMethod.values","location":"connector/connector-http/com.river.connector.http/-http-method/values.html","searchKeys":["values","fun values(): Array<HttpMethod>","com.river.connector.http.HttpMethod.values"]},{"name":"inline fun authorization(f: Authorization.Companion.() -> Authorization): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.authorization","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/authorization.html","searchKeys":["authorization","inline fun authorization(f: Authorization.Companion.() -> Authorization): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.authorization"]},{"name":"inline fun delete(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.delete","location":"connector/connector-http/com.river.connector.http/delete.html","searchKeys":["delete","inline fun delete(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.delete"]},{"name":"inline fun get(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.get","location":"connector/connector-http/com.river.connector.http/get.html","searchKeys":["get","inline fun get(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.get"]},{"name":"inline fun head(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.head","location":"connector/connector-http/com.river.connector.http/head.html","searchKeys":["head","inline fun head(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.head"]},{"name":"inline fun options(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.options","location":"connector/connector-http/com.river.connector.http/options.html","searchKeys":["options","inline fun options(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.options"]},{"name":"inline fun patch(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.patch","location":"connector/connector-http/com.river.connector.http/patch.html","searchKeys":["patch","inline fun patch(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.patch"]},{"name":"inline fun post(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.post","location":"connector/connector-http/com.river.connector.http/post.html","searchKeys":["post","inline fun post(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.post"]},{"name":"inline fun put(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.put","location":"connector/connector-http/com.river.connector.http/put.html","searchKeys":["put","inline fun put(url: String, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.put"]},{"name":"inline fun request(uri: String, method: HttpMethod, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.request","location":"connector/connector-http/com.river.connector.http/request.html","searchKeys":["request","inline fun request(uri: String, method: HttpMethod, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.request"]},{"name":"inline fun request(uri: URI, method: HttpMethod, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","description":"com.river.connector.http.request","location":"connector/connector-http/com.river.connector.http/request.html","searchKeys":["request","inline fun request(uri: URI, method: HttpMethod, f: CustomHttpRequestBuilder.() -> Unit = {}): HttpRequest","com.river.connector.http.request"]},{"name":"object Companion","description":"com.river.connector.http.Authorization.Companion","location":"connector/connector-http/com.river.connector.http/-authorization/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.http.Authorization.Companion"]},{"name":"object Companion","description":"com.river.connector.http.ServerSentEvent.Companion","location":"connector/connector-http/com.river.connector.http/-server-sent-event/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.http.ServerSentEvent.Companion"]},{"name":"open override fun uri(uri: URI): HttpRequest.Builder","description":"com.river.connector.http.CustomHttpRequestBuilder.uri","location":"connector/connector-http/com.river.connector.http/-custom-http-request-builder/uri.html","searchKeys":["uri","open override fun uri(uri: URI): HttpRequest.Builder","com.river.connector.http.CustomHttpRequestBuilder.uri"]},{"name":"operator fun invoke(data: String): ServerSentEvent","description":"com.river.connector.http.ServerSentEvent.Companion.invoke","location":"connector/connector-http/com.river.connector.http/-server-sent-event/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(data: String): ServerSentEvent","com.river.connector.http.ServerSentEvent.Companion.invoke"]},{"name":"suspend fun <T> HttpClient.coSend(bodyHandler: HttpResponse.BodyHandler<T>, request: suspend () -> HttpRequest): HttpResponse<T>","description":"com.river.connector.http.coSend","location":"connector/connector-http/com.river.connector.http/co-send.html","searchKeys":["coSend","suspend fun <T> HttpClient.coSend(bodyHandler: HttpResponse.BodyHandler<T>, request: suspend () -> HttpRequest): HttpResponse<T>","com.river.connector.http.coSend"]},{"name":"suspend fun <T> HttpClient.coSend(request: HttpRequest, bodyHandler: HttpResponse.BodyHandler<T>): HttpResponse<T>","description":"com.river.connector.http.coSend","location":"connector/connector-http/com.river.connector.http/co-send.html","searchKeys":["coSend","suspend fun <T> HttpClient.coSend(request: HttpRequest, bodyHandler: HttpResponse.BodyHandler<T>): HttpResponse<T>","com.river.connector.http.coSend"]},{"name":"suspend fun <T> HttpRequest.coSend(bodyHandler: HttpResponse.BodyHandler<T>, client: HttpClient = DefaultHttpClient): HttpResponse<T>","description":"com.river.connector.http.coSend","location":"connector/connector-http/com.river.connector.http/co-send.html","searchKeys":["coSend","suspend fun <T> HttpRequest.coSend(bodyHandler: HttpResponse.BodyHandler<T>, client: HttpClient = DefaultHttpClient): HttpResponse<T>","com.river.connector.http.coSend"]},{"name":"val comments: List<String>","description":"com.river.connector.http.ServerSentEvent.comments","location":"connector/connector-http/com.river.connector.http/-server-sent-event/comments.html","searchKeys":["comments","val comments: List<String>","com.river.connector.http.ServerSentEvent.comments"]},{"name":"val data: List<String>","description":"com.river.connector.http.ServerSentEvent.data","location":"connector/connector-http/com.river.connector.http/-server-sent-event/data.html","searchKeys":["data","val data: List<String>","com.river.connector.http.ServerSentEvent.data"]},{"name":"val discarding: HttpResponse.BodyHandler<Void>","description":"com.river.connector.http.discarding","location":"connector/connector-http/com.river.connector.http/discarding.html","searchKeys":["discarding","val discarding: HttpResponse.BodyHandler<Void>","com.river.connector.http.discarding"]},{"name":"val event: String? = null","description":"com.river.connector.http.ServerSentEvent.event","location":"connector/connector-http/com.river.connector.http/-server-sent-event/event.html","searchKeys":["event","val event: String? = null","com.river.connector.http.ServerSentEvent.event"]},{"name":"val id: String? = null","description":"com.river.connector.http.ServerSentEvent.id","location":"connector/connector-http/com.river.connector.http/-server-sent-event/id.html","searchKeys":["id","val id: String? = null","com.river.connector.http.ServerSentEvent.id"]},{"name":"val ofByteArray: HttpResponse.BodyHandler<ByteArray>","description":"com.river.connector.http.ofByteArray","location":"connector/connector-http/com.river.connector.http/of-byte-array.html","searchKeys":["ofByteArray","val ofByteArray: HttpResponse.BodyHandler<ByteArray>","com.river.connector.http.ofByteArray"]},{"name":"val ofByteArrayFlow: HttpResponse.BodyHandler<Flow<ByteArray>>","description":"com.river.connector.http.ofByteArrayFlow","location":"connector/connector-http/com.river.connector.http/of-byte-array-flow.html","searchKeys":["ofByteArrayFlow","val ofByteArrayFlow: HttpResponse.BodyHandler<Flow<ByteArray>>","com.river.connector.http.ofByteArrayFlow"]},{"name":"val ofFlow: HttpResponse.BodyHandler<Flow<ByteBuffer>>","description":"com.river.connector.http.ofFlow","location":"connector/connector-http/com.river.connector.http/of-flow.html","searchKeys":["ofFlow","val ofFlow: HttpResponse.BodyHandler<Flow<ByteBuffer>>","com.river.connector.http.ofFlow"]},{"name":"val ofLines: HttpResponse.BodyHandler<Flow<String>>","description":"com.river.connector.http.ofLines","location":"connector/connector-http/com.river.connector.http/of-lines.html","searchKeys":["ofLines","val ofLines: HttpResponse.BodyHandler<Flow<String>>","com.river.connector.http.ofLines"]},{"name":"val ofServerSentEventFlow: HttpResponse.BodyHandler<Flow<ServerSentEvent>>","description":"com.river.connector.http.ofServerSentEventFlow","location":"connector/connector-http/com.river.connector.http/of-server-sent-event-flow.html","searchKeys":["ofServerSentEventFlow","val ofServerSentEventFlow: HttpResponse.BodyHandler<Flow<ServerSentEvent>>","com.river.connector.http.ofServerSentEventFlow"]},{"name":"val ofString: HttpResponse.BodyHandler<String>","description":"com.river.connector.http.ofString","location":"connector/connector-http/com.river.connector.http/of-string.html","searchKeys":["ofString","val ofString: HttpResponse.BodyHandler<String>","com.river.connector.http.ofString"]},{"name":"val ofStringFlow: HttpResponse.BodyHandler<Flow<String>>","description":"com.river.connector.http.ofStringFlow","location":"connector/connector-http/com.river.connector.http/of-string-flow.html","searchKeys":["ofStringFlow","val ofStringFlow: HttpResponse.BodyHandler<Flow<String>>","com.river.connector.http.ofStringFlow"]},{"name":"fun <T : Any> MongoCollection<T>.findAsFlow(): Flow<T>","description":"com.river.connector.mongodb.findAsFlow","location":"connector/connector-mongodb/com.river.connector.mongodb/find-as-flow.html","searchKeys":["findAsFlow","fun <T : Any> MongoCollection<T>.findAsFlow(): Flow<T>","com.river.connector.mongodb.findAsFlow"]},{"name":"fun <T : Any> MongoCollection<T>.findAsFlow(query: Bson): Flow<T>","description":"com.river.connector.mongodb.findAsFlow","location":"connector/connector-mongodb/com.river.connector.mongodb/find-as-flow.html","searchKeys":["findAsFlow","fun <T : Any> MongoCollection<T>.findAsFlow(query: Bson): Flow<T>","com.river.connector.mongodb.findAsFlow"]},{"name":"fun <T> MongoCollection<T>.insert(flow: Flow<T>, concurrency: Int = 1): Flow<InsertOneResult>","description":"com.river.connector.mongodb.insert","location":"connector/connector-mongodb/com.river.connector.mongodb/insert.html","searchKeys":["insert","fun <T> MongoCollection<T>.insert(flow: Flow<T>, concurrency: Int = 1): Flow<InsertOneResult>","com.river.connector.mongodb.insert"]},{"name":"fun <T> MongoCollection<T>.insertMany(flow: Flow<T>, concurrency: Int = 1, options: InsertManyOptions = InsertManyOptions(), groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 500.milliseconds)): Flow<InsertManyResult>","description":"com.river.connector.mongodb.insertMany","location":"connector/connector-mongodb/com.river.connector.mongodb/insert-many.html","searchKeys":["insertMany","fun <T> MongoCollection<T>.insertMany(flow: Flow<T>, concurrency: Int = 1, options: InsertManyOptions = InsertManyOptions(), groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 500.milliseconds)): Flow<InsertManyResult>","com.river.connector.mongodb.insertMany"]},{"name":"fun <T> MongoCollection<T>.replace(flow: Flow<Pair<Bson, T>>, concurrency: Int = 1): Flow<UpdateResult>","description":"com.river.connector.mongodb.replace","location":"connector/connector-mongodb/com.river.connector.mongodb/replace.html","searchKeys":["replace","fun <T> MongoCollection<T>.replace(flow: Flow<Pair<Bson, T>>, concurrency: Int = 1): Flow<UpdateResult>","com.river.connector.mongodb.replace"]},{"name":"fun <T> MongoCollection<T>.replace(flow: Flow<T>, filter: Bson, concurrency: Int = 1): Flow<UpdateResult>","description":"com.river.connector.mongodb.replace","location":"connector/connector-mongodb/com.river.connector.mongodb/replace.html","searchKeys":["replace","fun <T> MongoCollection<T>.replace(flow: Flow<T>, filter: Bson, concurrency: Int = 1): Flow<UpdateResult>","com.river.connector.mongodb.replace"]},{"name":"fun MongoCollection<Document>.update(flow: Flow<Document>, filter: Bson, concurrency: Int = 1): Flow<UpdateResult>","description":"com.river.connector.mongodb.update","location":"connector/connector-mongodb/com.river.connector.mongodb/update.html","searchKeys":["update","fun MongoCollection<Document>.update(flow: Flow<Document>, filter: Bson, concurrency: Int = 1): Flow<UpdateResult>","com.river.connector.mongodb.update"]},{"name":"fun MongoCollection<Document>.updateMany(flow: Flow<Document>, filter: Bson, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 500.milliseconds)): Flow<UpdateResult>","description":"com.river.connector.mongodb.updateMany","location":"connector/connector-mongodb/com.river.connector.mongodb/update-many.html","searchKeys":["updateMany","fun MongoCollection<Document>.updateMany(flow: Flow<Document>, filter: Bson, concurrency: Int = 1, groupStrategy: GroupStrategy = GroupStrategy.TimeWindow(10, 500.milliseconds)): Flow<UpdateResult>","com.river.connector.mongodb.updateMany"]},{"name":"class FilesListQuery","description":"com.river.connector.google.drive.FilesListQuery","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/index.html","searchKeys":["FilesListQuery","class FilesListQuery","com.river.connector.google.drive.FilesListQuery"]},{"name":"class GoogleDriveApi(serviceAccount: JsonNode, scope: CoroutineScope = defaultCoroutineScope, httpClient: HttpClient = defaultHttpClient, baseUrl: String = defaultBaseUrl)","description":"com.river.connector.google.drive.GoogleDriveApi","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-api/index.html","searchKeys":["GoogleDriveApi","class GoogleDriveApi(serviceAccount: JsonNode, scope: CoroutineScope = defaultCoroutineScope, httpClient: HttpClient = defaultHttpClient, baseUrl: String = defaultBaseUrl)","com.river.connector.google.drive.GoogleDriveApi"]},{"name":"constructor()","description":"com.river.connector.google.drive.FilesListQuery.FilesListQuery","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/-files-list-query.html","searchKeys":["FilesListQuery","constructor()","com.river.connector.google.drive.FilesListQuery.FilesListQuery"]},{"name":"constructor(kind: String, incompleteSearch: Boolean, files: List<GoogleDriveFile>, nextPageToken: String?)","description":"com.river.connector.google.drive.FileList.FileList","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-file-list/-file-list.html","searchKeys":["FileList","constructor(kind: String, incompleteSearch: Boolean, files: List<GoogleDriveFile>, nextPageToken: String?)","com.river.connector.google.drive.FileList.FileList"]},{"name":"constructor(kind: String, mimeType: String, id: String, name: String, resourceKey: String)","description":"com.river.connector.google.drive.GoogleDriveFile.GoogleDriveFile","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/-google-drive-file.html","searchKeys":["GoogleDriveFile","constructor(kind: String, mimeType: String, id: String, name: String, resourceKey: String)","com.river.connector.google.drive.GoogleDriveFile.GoogleDriveFile"]},{"name":"constructor(serviceAccount: JsonNode, scope: CoroutineScope = defaultCoroutineScope, httpClient: HttpClient = defaultHttpClient, baseUrl: String = defaultBaseUrl)","description":"com.river.connector.google.drive.GoogleDriveApi.GoogleDriveApi","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-api/-google-drive-api.html","searchKeys":["GoogleDriveApi","constructor(serviceAccount: JsonNode, scope: CoroutineScope = defaultCoroutineScope, httpClient: HttpClient = defaultHttpClient, baseUrl: String = defaultBaseUrl)","com.river.connector.google.drive.GoogleDriveApi.GoogleDriveApi"]},{"name":"data class FileList(val kind: String, val incompleteSearch: Boolean, val files: List<GoogleDriveFile>, val nextPageToken: String?)","description":"com.river.connector.google.drive.FileList","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-file-list/index.html","searchKeys":["FileList","data class FileList(val kind: String, val incompleteSearch: Boolean, val files: List<GoogleDriveFile>, val nextPageToken: String?)","com.river.connector.google.drive.FileList"]},{"name":"data class GoogleDriveFile(val kind: String, val mimeType: String, val id: String, val name: String, val resourceKey: String)","description":"com.river.connector.google.drive.GoogleDriveFile","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/index.html","searchKeys":["GoogleDriveFile","data class GoogleDriveFile(val kind: String, val mimeType: String, val id: String, val name: String, val resourceKey: String)","com.river.connector.google.drive.GoogleDriveFile"]},{"name":"fun GoogleDriveApi.download(fileId: String): Flow<ByteArray>","description":"com.river.connector.google.drive.download","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/download.html","searchKeys":["download","fun GoogleDriveApi.download(fileId: String): Flow<ByteArray>","com.river.connector.google.drive.download"]},{"name":"fun GoogleDriveApi.listFiles(query: FilesListQuery.() -> Unit = {}): Flow<GoogleDriveFile>","description":"com.river.connector.google.drive.listFiles","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/list-files.html","searchKeys":["listFiles","fun GoogleDriveApi.listFiles(query: FilesListQuery.() -> Unit = {}): Flow<GoogleDriveFile>","com.river.connector.google.drive.listFiles"]},{"name":"fun build(): Map<String, Any?>","description":"com.river.connector.google.drive.FilesListQuery.build","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/build.html","searchKeys":["build","fun build(): Map<String, Any?>","com.river.connector.google.drive.FilesListQuery.build"]},{"name":"object Companion","description":"com.river.connector.google.drive.GoogleDriveApi.Companion","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-api/-companion/index.html","searchKeys":["Companion","object Companion","com.river.connector.google.drive.GoogleDriveApi.Companion"]},{"name":"operator fun CoroutineScope.invoke(serviceAccount: JsonNode, httpClient: HttpClient = defaultHttpClient, baseUrl: String = defaultBaseUrl): GoogleDriveApi","description":"com.river.connector.google.drive.GoogleDriveApi.Companion.invoke","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-api/-companion/invoke.html","searchKeys":["invoke","operator fun CoroutineScope.invoke(serviceAccount: JsonNode, httpClient: HttpClient = defaultHttpClient, baseUrl: String = defaultBaseUrl): GoogleDriveApi","com.river.connector.google.drive.GoogleDriveApi.Companion.invoke"]},{"name":"val files: List<GoogleDriveFile>","description":"com.river.connector.google.drive.FileList.files","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-file-list/files.html","searchKeys":["files","val files: List<GoogleDriveFile>","com.river.connector.google.drive.FileList.files"]},{"name":"val id: String","description":"com.river.connector.google.drive.GoogleDriveFile.id","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/id.html","searchKeys":["id","val id: String","com.river.connector.google.drive.GoogleDriveFile.id"]},{"name":"val incompleteSearch: Boolean","description":"com.river.connector.google.drive.FileList.incompleteSearch","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-file-list/incomplete-search.html","searchKeys":["incompleteSearch","val incompleteSearch: Boolean","com.river.connector.google.drive.FileList.incompleteSearch"]},{"name":"val kind: String","description":"com.river.connector.google.drive.FileList.kind","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-file-list/kind.html","searchKeys":["kind","val kind: String","com.river.connector.google.drive.FileList.kind"]},{"name":"val kind: String","description":"com.river.connector.google.drive.GoogleDriveFile.kind","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/kind.html","searchKeys":["kind","val kind: String","com.river.connector.google.drive.GoogleDriveFile.kind"]},{"name":"val mimeType: String","description":"com.river.connector.google.drive.GoogleDriveFile.mimeType","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/mime-type.html","searchKeys":["mimeType","val mimeType: String","com.river.connector.google.drive.GoogleDriveFile.mimeType"]},{"name":"val name: String","description":"com.river.connector.google.drive.GoogleDriveFile.name","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/name.html","searchKeys":["name","val name: String","com.river.connector.google.drive.GoogleDriveFile.name"]},{"name":"val nextPageToken: String?","description":"com.river.connector.google.drive.FileList.nextPageToken","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-file-list/next-page-token.html","searchKeys":["nextPageToken","val nextPageToken: String?","com.river.connector.google.drive.FileList.nextPageToken"]},{"name":"val resourceKey: String","description":"com.river.connector.google.drive.GoogleDriveFile.resourceKey","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-google-drive-file/resource-key.html","searchKeys":["resourceKey","val resourceKey: String","com.river.connector.google.drive.GoogleDriveFile.resourceKey"]},{"name":"var corpora: String","description":"com.river.connector.google.drive.FilesListQuery.corpora","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/corpora.html","searchKeys":["corpora","var corpora: String","com.river.connector.google.drive.FilesListQuery.corpora"]},{"name":"var driveId: String?","description":"com.river.connector.google.drive.FilesListQuery.driveId","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/drive-id.html","searchKeys":["driveId","var driveId: String?","com.river.connector.google.drive.FilesListQuery.driveId"]},{"name":"var includeItemsFromAllDrives: Boolean","description":"com.river.connector.google.drive.FilesListQuery.includeItemsFromAllDrives","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/include-items-from-all-drives.html","searchKeys":["includeItemsFromAllDrives","var includeItemsFromAllDrives: Boolean","com.river.connector.google.drive.FilesListQuery.includeItemsFromAllDrives"]},{"name":"var includeLabels: String?","description":"com.river.connector.google.drive.FilesListQuery.includeLabels","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/include-labels.html","searchKeys":["includeLabels","var includeLabels: String?","com.river.connector.google.drive.FilesListQuery.includeLabels"]},{"name":"var includePermissionsForView: String?","description":"com.river.connector.google.drive.FilesListQuery.includePermissionsForView","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/include-permissions-for-view.html","searchKeys":["includePermissionsForView","var includePermissionsForView: String?","com.river.connector.google.drive.FilesListQuery.includePermissionsForView"]},{"name":"var orderBy: String?","description":"com.river.connector.google.drive.FilesListQuery.orderBy","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/order-by.html","searchKeys":["orderBy","var orderBy: String?","com.river.connector.google.drive.FilesListQuery.orderBy"]},{"name":"var pageSize: Int","description":"com.river.connector.google.drive.FilesListQuery.pageSize","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/page-size.html","searchKeys":["pageSize","var pageSize: Int","com.river.connector.google.drive.FilesListQuery.pageSize"]},{"name":"var pageToken: String?","description":"com.river.connector.google.drive.FilesListQuery.pageToken","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/page-token.html","searchKeys":["pageToken","var pageToken: String?","com.river.connector.google.drive.FilesListQuery.pageToken"]},{"name":"var spaces: String?","description":"com.river.connector.google.drive.FilesListQuery.spaces","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/spaces.html","searchKeys":["spaces","var spaces: String?","com.river.connector.google.drive.FilesListQuery.spaces"]},{"name":"var supportsAllDrives: Boolean","description":"com.river.connector.google.drive.FilesListQuery.supportsAllDrives","location":"connector/connector-google/connector-google-drive/com.river.connector.google.drive/-files-list-query/supports-all-drives.html","searchKeys":["supportsAllDrives","var supportsAllDrives: Boolean","com.river.connector.google.drive.FilesListQuery.supportsAllDrives"]},{"name":"abstract val body: ByteArray","description":"com.river.connector.amqp.Message.body","location":"connector/connector-amqp/com.river.connector.amqp/-message/body.html","searchKeys":["body","abstract val body: ByteArray","com.river.connector.amqp.Message.body"]},{"name":"abstract val body: ByteArray","description":"com.river.connector.amqp.ReceivingMessage.body","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/body.html","searchKeys":["body","abstract val body: ByteArray","com.river.connector.amqp.ReceivingMessage.body"]},{"name":"abstract val consumerTag: String","description":"com.river.connector.amqp.ReceivingMessage.consumerTag","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/consumer-tag.html","searchKeys":["consumerTag","abstract val consumerTag: String","com.river.connector.amqp.ReceivingMessage.consumerTag"]},{"name":"abstract val envelope: Envelope","description":"com.river.connector.amqp.ReceivingMessage.envelope","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/envelope.html","searchKeys":["envelope","abstract val envelope: Envelope","com.river.connector.amqp.ReceivingMessage.envelope"]},{"name":"abstract val immediate: Boolean","description":"com.river.connector.amqp.Message.immediate","location":"connector/connector-amqp/com.river.connector.amqp/-message/immediate.html","searchKeys":["immediate","abstract val immediate: Boolean","com.river.connector.amqp.Message.immediate"]},{"name":"abstract val mandatory: Boolean","description":"com.river.connector.amqp.Message.mandatory","location":"connector/connector-amqp/com.river.connector.amqp/-message/mandatory.html","searchKeys":["mandatory","abstract val mandatory: Boolean","com.river.connector.amqp.Message.mandatory"]},{"name":"abstract val properties: AMQP.BasicProperties","description":"com.river.connector.amqp.Message.properties","location":"connector/connector-amqp/com.river.connector.amqp/-message/properties.html","searchKeys":["properties","abstract val properties: AMQP.BasicProperties","com.river.connector.amqp.Message.properties"]},{"name":"abstract val properties: AMQP.BasicProperties","description":"com.river.connector.amqp.ReceivingMessage.properties","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/properties.html","searchKeys":["properties","abstract val properties: AMQP.BasicProperties","com.river.connector.amqp.ReceivingMessage.properties"]},{"name":"constructor(body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","description":"com.river.connector.amqp.Message.Simple.Simple","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/-simple.html","searchKeys":["Simple","constructor(body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","com.river.connector.amqp.Message.Simple.Simple"]},{"name":"constructor(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray)","description":"com.river.connector.amqp.ReceivingMessage.AutoAck.AutoAck","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-auto-ack/-auto-ack.html","searchKeys":["AutoAck","constructor(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray)","com.river.connector.amqp.ReceivingMessage.AutoAck.AutoAck"]},{"name":"constructor(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray, channel: Channel)","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.ManualAck","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/-manual-ack.html","searchKeys":["ManualAck","constructor(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray, channel: Channel)","com.river.connector.amqp.ReceivingMessage.ManualAck.ManualAck"]},{"name":"constructor(exchange: String, routingKey: String, body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","description":"com.river.connector.amqp.Message.Default.Default","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/-default.html","searchKeys":["Default","constructor(exchange: String, routingKey: String, body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","com.river.connector.amqp.Message.Default.Default"]},{"name":"data class AutoAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray) : ReceivingMessage","description":"com.river.connector.amqp.ReceivingMessage.AutoAck","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-auto-ack/index.html","searchKeys":["AutoAck","data class AutoAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray) : ReceivingMessage","com.river.connector.amqp.ReceivingMessage.AutoAck"]},{"name":"data class Default(val exchange: String, val routingKey: String, val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false) : Message","description":"com.river.connector.amqp.Message.Default","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/index.html","searchKeys":["Default","data class Default(val exchange: String, val routingKey: String, val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false) : Message","com.river.connector.amqp.Message.Default"]},{"name":"data class ManualAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray, channel: Channel) : ReceivingMessage","description":"com.river.connector.amqp.ReceivingMessage.ManualAck","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/index.html","searchKeys":["ManualAck","data class ManualAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray, channel: Channel) : ReceivingMessage","com.river.connector.amqp.ReceivingMessage.ManualAck"]},{"name":"data class Simple(val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false)","description":"com.river.connector.amqp.Message.Simple","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/index.html","searchKeys":["Simple","data class Simple(val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false)","com.river.connector.amqp.Message.Simple"]},{"name":"fun <T> Connection.withChannel(f: Channel.() -> T): T","description":"com.river.connector.amqp.withChannel","location":"connector/connector-amqp/com.river.connector.amqp/with-channel.html","searchKeys":["withChannel","fun <T> Connection.withChannel(f: Channel.() -> T): T","com.river.connector.amqp.withChannel"]},{"name":"fun Channel.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","description":"com.river.connector.amqp.publishFlow","location":"connector/connector-amqp/com.river.connector.amqp/publish-flow.html","searchKeys":["publishFlow","fun Channel.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","com.river.connector.amqp.publishFlow"]},{"name":"fun Channel.publishFlow(upstream: Flow<Message.Default>): Flow<Unit>","description":"com.river.connector.amqp.publishFlow","location":"connector/connector-amqp/com.river.connector.amqp/publish-flow.html","searchKeys":["publishFlow","fun Channel.publishFlow(upstream: Flow<Message.Default>): Flow<Unit>","com.river.connector.amqp.publishFlow"]},{"name":"fun Connection.autoAckConsume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.AutoAck>","description":"com.river.connector.amqp.autoAckConsume","location":"connector/connector-amqp/com.river.connector.amqp/auto-ack-consume.html","searchKeys":["autoAckConsume","fun Connection.autoAckConsume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.AutoAck>","com.river.connector.amqp.autoAckConsume"]},{"name":"fun Connection.consume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.ManualAck>","description":"com.river.connector.amqp.consume","location":"connector/connector-amqp/com.river.connector.amqp/consume.html","searchKeys":["consume","fun Connection.consume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.ManualAck>","com.river.connector.amqp.consume"]},{"name":"fun Connection.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","description":"com.river.connector.amqp.publishFlow","location":"connector/connector-amqp/com.river.connector.amqp/publish-flow.html","searchKeys":["publishFlow","fun Connection.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","com.river.connector.amqp.publishFlow"]},{"name":"fun ConnectionFactory.connection(name: String? = null): Connection","description":"com.river.connector.amqp.connection","location":"connector/connector-amqp/com.river.connector.amqp/connection.html","searchKeys":["connection","fun ConnectionFactory.connection(name: String? = null): Connection","com.river.connector.amqp.connection"]},{"name":"fun ack()","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.ack","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/ack.html","searchKeys":["ack","fun ack()","com.river.connector.amqp.ReceivingMessage.ManualAck.ack"]},{"name":"fun asDefault(exchange: String, routingKey: String): Message.Default","description":"com.river.connector.amqp.Message.Simple.asDefault","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/as-default.html","searchKeys":["asDefault","fun asDefault(exchange: String, routingKey: String): Message.Default","com.river.connector.amqp.Message.Simple.asDefault"]},{"name":"fun nack(requeue: Boolean = true)","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.nack","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/nack.html","searchKeys":["nack","fun nack(requeue: Boolean = true)","com.river.connector.amqp.ReceivingMessage.ManualAck.nack"]},{"name":"fun nonBlockingConnectionFactory(threadNumber: Int = 1, f: ConnectionFactory.() -> Unit): ConnectionFactory","description":"com.river.connector.amqp.nonBlockingConnectionFactory","location":"connector/connector-amqp/com.river.connector.amqp/non-blocking-connection-factory.html","searchKeys":["nonBlockingConnectionFactory","fun nonBlockingConnectionFactory(threadNumber: Int = 1, f: ConnectionFactory.() -> Unit): ConnectionFactory","com.river.connector.amqp.nonBlockingConnectionFactory"]},{"name":"interface Message","description":"com.river.connector.amqp.Message","location":"connector/connector-amqp/com.river.connector.amqp/-message/index.html","searchKeys":["Message","interface Message","com.river.connector.amqp.Message"]},{"name":"interface ReceivingMessage","description":"com.river.connector.amqp.ReceivingMessage","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/index.html","searchKeys":["ReceivingMessage","interface ReceivingMessage","com.river.connector.amqp.ReceivingMessage"]},{"name":"open fun bodyAsString(charset: Charset = Charset.defaultCharset()): String","description":"com.river.connector.amqp.ReceivingMessage.bodyAsString","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/body-as-string.html","searchKeys":["bodyAsString","open fun bodyAsString(charset: Charset = Charset.defaultCharset()): String","com.river.connector.amqp.ReceivingMessage.bodyAsString"]},{"name":"open override val body: ByteArray","description":"com.river.connector.amqp.Message.Default.body","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/body.html","searchKeys":["body","open override val body: ByteArray","com.river.connector.amqp.Message.Default.body"]},{"name":"open override val body: ByteArray","description":"com.river.connector.amqp.ReceivingMessage.AutoAck.body","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-auto-ack/body.html","searchKeys":["body","open override val body: ByteArray","com.river.connector.amqp.ReceivingMessage.AutoAck.body"]},{"name":"open override val body: ByteArray","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.body","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/body.html","searchKeys":["body","open override val body: ByteArray","com.river.connector.amqp.ReceivingMessage.ManualAck.body"]},{"name":"open override val consumerTag: String","description":"com.river.connector.amqp.ReceivingMessage.AutoAck.consumerTag","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-auto-ack/consumer-tag.html","searchKeys":["consumerTag","open override val consumerTag: String","com.river.connector.amqp.ReceivingMessage.AutoAck.consumerTag"]},{"name":"open override val consumerTag: String","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.consumerTag","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/consumer-tag.html","searchKeys":["consumerTag","open override val consumerTag: String","com.river.connector.amqp.ReceivingMessage.ManualAck.consumerTag"]},{"name":"open override val envelope: Envelope","description":"com.river.connector.amqp.ReceivingMessage.AutoAck.envelope","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-auto-ack/envelope.html","searchKeys":["envelope","open override val envelope: Envelope","com.river.connector.amqp.ReceivingMessage.AutoAck.envelope"]},{"name":"open override val envelope: Envelope","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.envelope","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/envelope.html","searchKeys":["envelope","open override val envelope: Envelope","com.river.connector.amqp.ReceivingMessage.ManualAck.envelope"]},{"name":"open override val immediate: Boolean = false","description":"com.river.connector.amqp.Message.Default.immediate","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/immediate.html","searchKeys":["immediate","open override val immediate: Boolean = false","com.river.connector.amqp.Message.Default.immediate"]},{"name":"open override val mandatory: Boolean = false","description":"com.river.connector.amqp.Message.Default.mandatory","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/mandatory.html","searchKeys":["mandatory","open override val mandatory: Boolean = false","com.river.connector.amqp.Message.Default.mandatory"]},{"name":"open override val properties: AMQP.BasicProperties","description":"com.river.connector.amqp.Message.Default.properties","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/properties.html","searchKeys":["properties","open override val properties: AMQP.BasicProperties","com.river.connector.amqp.Message.Default.properties"]},{"name":"open override val properties: AMQP.BasicProperties","description":"com.river.connector.amqp.ReceivingMessage.AutoAck.properties","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-auto-ack/properties.html","searchKeys":["properties","open override val properties: AMQP.BasicProperties","com.river.connector.amqp.ReceivingMessage.AutoAck.properties"]},{"name":"open override val properties: AMQP.BasicProperties","description":"com.river.connector.amqp.ReceivingMessage.ManualAck.properties","location":"connector/connector-amqp/com.river.connector.amqp/-receiving-message/-manual-ack/properties.html","searchKeys":["properties","open override val properties: AMQP.BasicProperties","com.river.connector.amqp.ReceivingMessage.ManualAck.properties"]},{"name":"val body: ByteArray","description":"com.river.connector.amqp.Message.Simple.body","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/body.html","searchKeys":["body","val body: ByteArray","com.river.connector.amqp.Message.Simple.body"]},{"name":"val exchange: String","description":"com.river.connector.amqp.Message.Default.exchange","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/exchange.html","searchKeys":["exchange","val exchange: String","com.river.connector.amqp.Message.Default.exchange"]},{"name":"val immediate: Boolean = false","description":"com.river.connector.amqp.Message.Simple.immediate","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/immediate.html","searchKeys":["immediate","val immediate: Boolean = false","com.river.connector.amqp.Message.Simple.immediate"]},{"name":"val mandatory: Boolean = false","description":"com.river.connector.amqp.Message.Simple.mandatory","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/mandatory.html","searchKeys":["mandatory","val mandatory: Boolean = false","com.river.connector.amqp.Message.Simple.mandatory"]},{"name":"val properties: AMQP.BasicProperties","description":"com.river.connector.amqp.Message.Simple.properties","location":"connector/connector-amqp/com.river.connector.amqp/-message/-simple/properties.html","searchKeys":["properties","val properties: AMQP.BasicProperties","com.river.connector.amqp.Message.Simple.properties"]},{"name":"val routingKey: String","description":"com.river.connector.amqp.Message.Default.routingKey","location":"connector/connector-amqp/com.river.connector.amqp/-message/-default/routing-key.html","searchKeys":["routingKey","val routingKey: String","com.river.connector.amqp.Message.Default.routingKey"]}]