package com.river.connector.openai

import com.river.connector.http.coSend
import com.river.connector.http.get
import com.river.connector.http.post
import com.river.connector.openai.model.*
import com.river.core.ExperimentalRiverApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow

/**
 * Retrieves a list of all models from the OpenAI API.
 *
 * @return a [Flow] of [ModelObject] representing the different models provided by the API.
 *
 * Example usage:
 * ```
 * val client = OpenAIClient("<API_KEY>")
 * val modelsFlow = client.models()
 * modelsFlow.collect { model ->
 *     println("Model ID: ${model.id}")
 * }
 * ```
 */
@ExperimentalRiverApi
fun OpenAIClient.models(): Flow<ModelObject> =
    flow {
        val request = get("$baseUrl/models") { authorization { bearer(apiKey) } }
        val response = client.coSend(request, ofJson<Items<ModelObject>>())

        require(response.statusCode() != 401) {
            "You're not authorized to use this API: ${response.statusCode()}"
        }

        require(response.statusCode() == 200) {
            "The completions API responded an invalid http status: ${response.statusCode()}"
        }

        response.body().value.data.forEach { emit(it) }
    }

/**
 * Sends a request to the OpenAI API to generate a chat completion.
 *
 * @param request The chat completion request to be sent to the API. This object contains
 * parameters for the chat completion, such as the prompt and other model settings.
 *
 * @return a [Flow] of [ChatCompletionResponse] representing the chat completions generated by the API.
 *
 * Example usage:
 * ```
 * val client = OpenAIClient("<API_KEY>")
 * val chatRequest = ChatCompletionRequest("<Chat request parameters>")
 * val chatCompletionsFlow = client.chatCompletions(chatRequest)
 * chatCompletionsFlow.collect { response ->
 *     println("Chat completion: ${response.text}")
 * }
 * ```
 */
@ExperimentalRiverApi
fun OpenAIClient.chatCompletions(
    request: ChatCompletionRequest
): Flow<ChatCompletionResponse> = completionStream {
    post(url = "$baseUrl/chat/completions") {
        authorization { bearer(apiKey) }
        jsonBody(request)
    }
}

/**
 * Sends a request to the OpenAI API to generate a completion.
 *
 * @param request The completion request to be sent to the API. This object contains parameters
 * for the completion, such as the prompt and other model settings.
 *
 * @return a [Flow] of [CompletionResponse] representing the completions generated by the API.
 *
 * Example usage:
 * ```
 * val client = OpenAIClient("<API_KEY>")
 * val completionRequest = CompletionRequest("<Completion request parameters>")
 * val completionsFlow = client.completions(completionRequest)
 * completionsFlow.collect { completion ->
 *     println("Completion text: ${completion.text}")
 * }
 * ```
 */
@ExperimentalRiverApi
fun OpenAIClient.completions(
    request: CompletionRequest
): Flow<CompletionResponse> = completionStream {
    post(url = "$baseUrl/completions") {
        authorization { bearer(apiKey) }
        jsonBody(request)
    }
}
